#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫ "–°–¢–†–ê–ù–ò–¶–ê –ò–ì–†–´"
"""

import asyncio
import aiohttp
from bs4 import BeautifulSoup

async def analyze_game_pages():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–≥—Ä"""
    print("üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –°–°–´–õ–û–ö '–°–¢–†–ê–ù–ò–¶–ê –ò–ì–†–´'")
    print("=" * 60)
    
    try:
        url = "http://letobasket.ru"
        
        print(f"üåê –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å {url}...")
        
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=30) as response:
                if response.status != 200:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {response.status}")
                    return
                
                html = await response.text()
                print(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª—É—á–µ–Ω–∞, —Ä–∞–∑–º–µ—Ä: {len(html)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü–∞—Ä—Å–∏–º HTML
        soup = BeautifulSoup(html, 'html.parser')
        
        # –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        all_links = soup.find_all('a', href=True)
        
        print(f"\nüìä –ù–ê–ô–î–ï–ù–û {len(all_links)} –°–°–´–õ–û–ö –ù–ê –°–¢–†–ê–ù–ò–¶–ï")
        print("=" * 60)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏
        game_page_links = []
        vizotek_related_links = []
        
        for i, link in enumerate(all_links):
            href = link.get('href', '')
            link_text = link.get_text().strip()
            link_text_lower = link_text.lower()
            
            if not href or not link_text:
                continue
            
            # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ "–°–¢–†–ê–ù–ò–¶–ê –ò–ì–†–´"
            if '—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–≥—Ä—ã' in link_text_lower or 'game page' in link_text_lower:
                game_page_links.append({
                    'index': i,
                    'href': href,
                    'text': link_text,
                    'context': link.parent.get_text()[:100] if link.parent else ""
                })
            
            # –ò—â–µ–º —Å—Å—ã–ª–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –í–∏–∑–æ—Ç–µ–∫
            if '–≤–∏–∑–æ—Ç–µ–∫' in link_text_lower or 'vizotek' in link_text_lower:
                vizotek_related_links.append({
                    'index': i,
                    'href': href,
                    'text': link_text,
                    'context': link.parent.get_text()[:100] if link.parent else ""
                })
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"\nüéÆ –°–°–´–õ–ö–ò '–°–¢–†–ê–ù–ò–¶–ê –ò–ì–†–´' ({len(game_page_links)}):")
        for link in game_page_links:
            print(f"   {link['index']:3d}. {link['text']} -> {link['href']}")
            print(f"       –ö–æ–Ω—Ç–µ–∫—Å—Ç: {link['context']}")
            print()
        
        if not game_page_links:
            print("   ‚ùå –°—Å—ã–ª–∫–∏ '–°–¢–†–ê–ù–ò–¶–ê –ò–ì–†–´' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        print(f"\nüéØ –°–°–´–õ–ö–ò, –°–í–Ø–ó–ê–ù–ù–´–ï –° –í–ò–ó–û–¢–ï–ö ({len(vizotek_related_links)}):")
        for link in vizotek_related_links:
            print(f"   {link['index']:3d}. {link['text']} -> {link['href']}")
            print(f"       –ö–æ–Ω—Ç–µ–∫—Å—Ç: {link['context']}")
            print()
        
        if not vizotek_related_links:
            print("   ‚ùå –°—Å—ã–ª–∫–∏ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –í–∏–∑–æ—Ç–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º "–∏–≥—Ä–∞" –∏–ª–∏ "game"
        game_related_texts = []
        for i, link in enumerate(all_links):
            link_text = link.get_text().strip()
            if any(keyword in link_text.lower() for keyword in ['–∏–≥—Ä–∞', 'game', 'match', '–º–∞—Ç—á']):
                game_related_texts.append({
                    'index': i,
                    'text': link_text,
                    'href': link.get('href', '')
                })
        
        print(f"\nüèÄ –°–°–´–õ–ö–ò –° –ò–ì–†–û–í–´–ú–ò –¢–ï–†–ú–ò–ù–ê–ú–ò ({len(game_related_texts)}):")
        for link in game_related_texts[:20]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20
            print(f"   {link['index']:3d}. {link['text']} -> {link['href']}")
        
        if len(game_related_texts) > 20:
            print(f"   ... –∏ –µ—â–µ {len(game_related_texts) - 20} —Å—Å—ã–ª–æ–∫")
        
        # –ò—â–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã —Å—Å—ã–ª–æ–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ "—Å—Ç—Ä–∞–Ω–∏—Ü–∞"
        page_links = []
        for i, link in enumerate(all_links):
            link_text = link.get_text().strip()
            if '—Å—Ç—Ä–∞–Ω–∏—Ü–∞' in link_text.lower():
                page_links.append({
                    'index': i,
                    'text': link_text,
                    'href': link.get('href', '')
                })
        
        print(f"\nüìÑ –°–°–´–õ–ö–ò –° –¢–ï–ö–°–¢–û–ú '–°–¢–†–ê–ù–ò–¶–ê' ({len(page_links)}):")
        for link in page_links:
            print(f"   {link['index']:3d}. {link['text']} -> {link['href']}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")

if __name__ == "__main__":
    asyncio.run(analyze_game_pages())
