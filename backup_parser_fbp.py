#!/usr/bin/env python3
"""
–†–µ–∑–µ—Ä–≤–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è fbp.ru (–§–µ–¥–µ—Ä–∞—Ü–∏—è –ë–∞—Å–∫–µ—Ç–±–æ–ª–∞ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞)
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ –∏–≥—Ä–∞—Ö
"""

import asyncio
import aiohttp
from bs4 import BeautifulSoup
import re
from datetime import datetime
from typing import List, Dict, Optional

class FBPBackupParser:
    """–ü–∞—Ä—Å–µ—Ä –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞ –§–µ–¥–µ—Ä–∞—Ü–∏–∏ –ë–∞—Å–∫–µ—Ç–±–æ–ª–∞ –°–ü–±"""
    
    def __init__(self):
        self.base_url = "https://www.fbp.ru/turniryi/letnyaya-liga.html"
    
    async def fetch_games_data(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–± –∏–≥—Ä–∞—Ö —Å fbp.ru"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(self.base_url) as response:
                    if response.status == 200:
                        content = await response.text()
                        soup = BeautifulSoup(content, 'html.parser')
                        
                        # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                        games = []
                        
                        # –ò—â–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                        tables = soup.find_all('table')
                        
                        for table in tables:
                            rows = table.find_all('tr')
                            for row in rows:
                                cells = row.find_all(['td', 'th'])
                                if len(cells) >= 3:
                                    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ
                                    game_data = self._parse_table_row(cells)
                                    if game_data:
                                        games.append(game_data)
                        
                        print(f"üîç FBP: –ù–∞–π–¥–µ–Ω–æ {len(games)} –∏–≥—Ä")
                        return games
                    else:
                        print(f"‚ùå FBP: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {response.status}")
                        return []
                        
        except Exception as e:
            print(f"‚ùå FBP: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return []
    
    def _parse_table_row(self, cells) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã –≤ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã"""
        try:
            # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å –¥–∞—Ç–∞–º–∏ –∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
            text_content = ' '.join([cell.get_text(strip=True) for cell in cells])
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–∞—Ç
            date_pattern = r'(\d{1,2}\.\d{1,2}\.\d{4})'
            date_match = re.search(date_pattern, text_content)
            
            if date_match:
                date = date_match.group(1)
                
                # –ò—â–µ–º –∫–æ–º–∞–Ω–¥—ã Pull Up
                if any(team in text_content for team in ['Pull Up', 'PullUP', 'Pull-Up']):
                    return {
                        'date': date,
                        'source': 'fbp.ru',
                        'raw_text': text_content,
                        'parsed': True
                    }
            
            return None
            
        except Exception as e:
            print(f"‚ö†Ô∏è FBP: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏: {e}")
            return None
    
    async def get_backup_games(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–± –∏–≥—Ä–∞—Ö"""
        games = await self.fetch_games_data()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏–≥—Ä—ã —Å –Ω–∞—à–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
        target_games = []
        for game in games:
            if game.get('parsed'):
                target_games.append(game)
        
        return target_games

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def main():
    parser = FBPBackupParser()
    games = await parser.get_backup_games()
    
    print(f"üìä –†–µ–∑–µ—Ä–≤–Ω—ã–π –ø–∞—Ä—Å–µ—Ä FBP –Ω–∞—à–µ–ª {len(games)} –∏–≥—Ä:")
    for game in games:
        print(f"   {game['date']}: {game['raw_text'][:50]}...")

if __name__ == "__main__":
    asyncio.run(main())
