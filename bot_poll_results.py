#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ Telegram Bot API
"""

import os
import asyncio
import datetime
import json
from typing import Dict, List, Optional, Any
from dotenv import load_dotenv
from telegram import Bot
from telegram.error import TelegramError

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
ANNOUNCEMENTS_TOPIC_ID = int(os.getenv("ANNOUNCEMENTS_TOPIC_ID", "26"))

class BotPollResultsHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ Bot API"""
    
    def __init__(self):
        self.bot = None
        self._init_bot()
    
    def _init_bot(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        try:
            if not BOT_TOKEN:
                print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return
            
            self.bot = Bot(token=BOT_TOKEN)
            print("‚úÖ Telegram Bot API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
    
    async def get_chat_history(self, limit: int = 100) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞"""
        if not self.bot or not CHAT_ID:
            print("‚ùå –ë–æ—Ç –∏–ª–∏ CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return []
        
        try:
            messages = []
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –æ–¥–Ω–æ–º—É, –Ω–∞—á–∏–Ω–∞—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
            offset = 0
            
            while len(messages) < limit:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é getUpdates –∏–ª–∏ –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                    # –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, Bot API –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
                    # –ü–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥
                    
                    # –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ä–æ—Å–æ–≤ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å webhook –∏–ª–∏ polling
                    # –ù–æ —ç—Ç–æ —Å–ª–æ–∂–Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    
                    print("‚ö†Ô∏è Bot API –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π")
                    print("   –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ä–æ—Å–æ–≤ –Ω—É–∂–µ–Ω Telegram Client API")
                    break
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
                    break
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(messages)} –æ–ø—Ä–æ—Å–æ–≤ –≤ –∏—Å—Ç–æ—Ä–∏–∏")
            return messages
            
        except TelegramError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            return []
    
    async def get_training_polls(self, days_back: int = 7) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–ø—Ä–æ—Å—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π"""
        try:
            all_polls = await self.get_chat_history(limit=200)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –æ–ø—Ä–æ—Å—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
            training_polls = []
            cutoff_date = datetime.datetime.now() - datetime.timedelta(days=days_back)
            
            for poll_data in all_polls:
                poll_date = datetime.datetime.fromisoformat(poll_data['date'].replace('Z', '+00:00'))
                question = poll_data['poll']['question'].lower()
                
                if poll_date >= cutoff_date and '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏' in question:
                    training_polls.append(poll_data)
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(training_polls)} –æ–ø—Ä–æ—Å–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days_back} –¥–Ω–µ–π")
            return training_polls
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –æ–ø—Ä–æ—Å–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {e}")
            return []
    
    async def get_latest_sunday_training_poll(self) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–ø—Ä–æ—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"""
        try:
            training_polls = await self.get_training_polls(days_back=7)
            
            # –ò—â–µ–º –æ–ø—Ä–æ—Å—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
            sunday_polls = []
            for poll_data in training_polls:
                poll_date = datetime.datetime.fromisoformat(poll_data['date'].replace('Z', '+00:00'))
                if poll_date.weekday() == 6:  # 6 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
                    sunday_polls.append(poll_data)
            
            if sunday_polls:
                # –ë–µ—Ä–µ–º —Å–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–ø—Ä–æ—Å
                latest_poll = sunday_polls[0]
                poll_date = datetime.datetime.fromisoformat(latest_poll['date'].replace('Z', '+00:00'))
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–ø—Ä–æ—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –æ—Ç {poll_date.strftime('%Y-%m-%d %H:%M')}")
                return latest_poll
            else:
                print("‚ö†Ô∏è –û–ø—Ä–æ—Å—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–ø—Ä–æ—Å–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {e}")
            return None
    
    def parse_training_votes(self, poll_results: Dict[str, Any]) -> Dict[str, List[str]]:
        """–ü–∞—Ä—Å–∏—Ç –≥–æ–ª–æ—Å–∞ –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ä–æ—Å–∞"""
        attendees = {
            "–í—Ç–æ—Ä–Ω–∏–∫": [],
            "–ü—è—Ç–Ω–∏—Ü–∞": [],
            "–¢—Ä–µ–Ω–µ—Ä": [],
            "–ù–µ—Ç": []
        }
        
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞
            for option in poll_results['poll']['options']:
                option_text = option['text'].lower()
                voter_count = option['voter_count']
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ —Ç–µ–∫—Å—Ç—É
                category = None
                if '–≤—Ç–æ—Ä–Ω–∏–∫' in option_text:
                    category = "–í—Ç–æ—Ä–Ω–∏–∫"
                elif '–ø—è—Ç–Ω–∏—Ü–∞' in option_text:
                    category = "–ü—è—Ç–Ω–∏—Ü–∞"
                elif '—Ç—Ä–µ–Ω–µ—Ä' in option_text:
                    category = "–¢—Ä–µ–Ω–µ—Ä"
                elif '–Ω–µ—Ç' in option_text:
                    category = "–ù–µ—Ç"
                
                if category and voter_count > 0:
                    attendees[category].append(f"–£—á–∞—Å—Ç–Ω–∏–∫ (–≥–æ–ª–æ—Å–æ–≤: {voter_count})")
            
            return attendees
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≥–æ–ª–æ—Å–æ–≤: {e}")
            return attendees

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
bot_poll_handler = BotPollResultsHandler()

async def test_bot_poll_results():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ Bot API"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ Bot API...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø—Ä–æ—Å—ã
        recent_polls = await bot_poll_handler.get_chat_history(limit=20)
        
        if recent_polls:
            print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ {len(recent_polls)} –æ–ø—Ä–æ—Å–æ–≤:")
            for i, poll in enumerate(recent_polls, 1):
                print(f"\n{i}. {poll['poll']['question']}")
                print(f"   –í—Å–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤: {poll['poll']['total_voter_count']}")
                for option in poll['poll']['options']:
                    print(f"   - {option['text']}: {option['voter_count']} –≥–æ–ª–æ—Å–æ–≤")
        else:
            print("üìä –û–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ä–æ—Å—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        training_polls = await bot_poll_handler.get_training_polls(days_back=7)
        
        if training_polls:
            print(f"\nüèãÔ∏è‚Äç‚ôÇÔ∏è –ù–∞–π–¥–µ–Ω–æ {len(training_polls)} –æ–ø—Ä–æ—Å–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:")
            for poll in training_polls:
                attendees = bot_poll_handler.parse_training_votes(poll)
                print(f"\nüìÖ –û–ø—Ä–æ—Å –æ—Ç {poll['date']}:")
                for day, users in attendees.items():
                    if users:
                        print(f"   {day}: {len(users)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

if __name__ == "__main__":
    asyncio.run(test_bot_poll_results())
