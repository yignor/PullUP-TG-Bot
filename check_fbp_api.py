#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è API –∏–ª–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ fbp.ru
"""

import asyncio
import aiohttp
import json
import re
from bs4 import BeautifulSoup
from urllib.parse import urljoin, urlparse

class FBPApiChecker:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ API –∏–ª–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ fbp.ru"""
    
    def __init__(self):
        self.base_url = "https://www.fbp.ru"
        self.target_url = "https://www.fbp.ru/turniryi/letnyaya-liga.html"
        self.api_endpoints = []
        self.js_files = []
        self.ajax_calls = []
    
    async def check_for_api(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ API endpoints –Ω–∞ —Å–∞–π—Ç–µ"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API –Ω–∞ fbp.ru...")
        
        try:
            async with aiohttp.ClientSession() as session:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                async with session.get(self.target_url) as response:
                    if response.status == 200:
                        content = await response.text()
                        soup = BeautifulSoup(content, 'html.parser')
                        
                        # 1. –ò—â–µ–º —Å–∫—Ä–∏–ø—Ç—ã —Å API –≤—ã–∑–æ–≤–∞–º–∏
                        await self._check_scripts(session, soup)
                        
                        # 2. –ò—â–µ–º JSON –¥–∞–Ω–Ω—ã–µ –≤ HTML
                        await self._check_json_data(content)
                        
                        # 3. –ò—â–µ–º AJAX –∑–∞–ø—Ä–æ—Å—ã
                        await self._check_ajax_calls(content)
                        
                        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º Network tab (–∏–º–∏—Ç–∏—Ä—É–µ–º)
                        await self._check_network_requests(session)
                        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API: {e}")
    
    async def _check_scripts(self, session, soup):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç JavaScript —Ñ–∞–π–ª—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ API –≤—ã–∑–æ–≤–æ–≤"""
        print("üìú –ü—Ä–æ–≤–µ—Ä–∫–∞ JavaScript —Ñ–∞–π–ª–æ–≤...")
        
        scripts = soup.find_all('script', src=True)
        for script in scripts:
            script_url = urljoin(self.base_url, script['src'])
            self.js_files.append(script_url)
            
            try:
                async with session.get(script_url) as response:
                    if response.status == 200:
                        js_content = await response.text()
                        
                        # –ò—â–µ–º API endpoints –≤ JS
                        api_patterns = [
                            r'fetch\(["\']([^"\']+)["\']',
                            r'axios\.get\(["\']([^"\']+)["\']',
                            r'\.get\(["\']([^"\']+)["\']',
                            r'ajax\(["\']([^"\']+)["\']',
                            r'api["\']?\s*:\s*["\']([^"\']+)["\']',
                            r'/api/[^"\']+',
                            r'\.json[^"\']*',
                        ]
                        
                        for pattern in api_patterns:
                            matches = re.findall(pattern, js_content, re.IGNORECASE)
                            for match in matches:
                                if match.startswith('/') or 'api' in match.lower():
                                    self.api_endpoints.append(match)
                                    print(f"   üîó –ù–∞–π–¥–µ–Ω API endpoint: {match}")
            
            except Exception as e:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–∞ {script_url}: {e}")
    
    async def _check_json_data(self, content):
        """–ò—â–µ—Ç JSON –¥–∞–Ω–Ω—ã–µ –≤ HTML"""
        print("üìÑ –ü–æ–∏—Å–∫ JSON –¥–∞–Ω–Ω—ã—Ö –≤ HTML...")
        
        # –ò—â–µ–º JSON –≤ script —Ç–µ–≥–∞—Ö
        json_pattern = r'<script[^>]*>(.*?)</script>'
        scripts = re.findall(json_pattern, content, re.DOTALL)
        
        for script in scripts:
            if 'json' in script.lower() or '{' in script:
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ JSON –æ–±—ä–µ–∫—Ç—ã
                    json_matches = re.findall(r'\{[^{}]*"[^"]*"[^{}]*\}', script)
                    for json_str in json_matches:
                        try:
                            data = json.loads(json_str)
                            if isinstance(data, dict) and len(data) > 0:
                                print(f"   üìä –ù–∞–π–¥–µ–Ω JSON: {json_str[:100]}...")
                        except:
                            pass
                except:
                    pass
    
    async def _check_ajax_calls(self, content):
        """–ò—â–µ—Ç AJAX –≤—ã–∑–æ–≤—ã –≤ –∫–æ–¥–µ"""
        print("üîÑ –ü–æ–∏—Å–∫ AJAX –≤—ã–∑–æ–≤–æ–≤...")
        
        ajax_patterns = [
            r'\.ajax\([^)]+\)',
            r'fetch\([^)]+\)',
            r'XMLHttpRequest',
            r'axios\.[a-z]+\([^)]+\)',
        ]
        
        for pattern in ajax_patterns:
            matches = re.findall(pattern, content, re.IGNORECASE)
            for match in matches:
                self.ajax_calls.append(match)
                print(f"   üîÑ –ù–∞–π–¥–µ–Ω AJAX: {match[:50]}...")
    
    async def _check_network_requests(self, session):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–µ API endpoints"""
        print("üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö API endpoints...")
        
        # –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö API endpoints
        possible_endpoints = [
            '/api/games',
            '/api/matches',
            '/api/results',
            '/api/teams',
            '/api/schedule',
            '/api/letnyaya-liga',
            '/api/tournaments',
            '/data/games.json',
            '/data/matches.json',
            '/json/games',
            '/json/matches',
        ]
        
        for endpoint in possible_endpoints:
            url = urljoin(self.base_url, endpoint)
            try:
                async with session.get(url) as response:
                    if response.status == 200:
                        content_type = response.headers.get('content-type', '')
                        if 'json' in content_type:
                            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω JSON API: {url}")
                            try:
                                data = await response.json()
                                print(f"      üìä –î–∞–Ω–Ω—ã–µ: {str(data)[:100]}...")
                            except:
                                print(f"      üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {await response.text()[:100]}...")
                        else:
                            print(f"   üìÑ –ù–∞–π–¥–µ–Ω endpoint: {url} ({content_type})")
            except:
                pass
    
    def print_results(self):
        """–í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        print("\n" + "="*50)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò FBP.RU")
        print("="*50)
        
        print(f"\nüîó –ù–∞–π–¥–µ–Ω–æ API endpoints: {len(self.api_endpoints)}")
        for endpoint in self.api_endpoints:
            print(f"   - {endpoint}")
        
        print(f"\nüìú JavaScript —Ñ–∞–π–ª–æ–≤: {len(self.js_files)}")
        for js in self.js_files[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            print(f"   - {js}")
        
        print(f"\nüîÑ AJAX –≤—ã–∑–æ–≤–æ–≤: {len(self.ajax_calls)}")
        for ajax in self.ajax_calls[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            print(f"   - {ajax}")
        
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        if self.api_endpoints:
            print("   ‚úÖ –ù–∞–π–¥–µ–Ω—ã API endpoints - –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö")
        else:
            print("   ‚ùå API endpoints –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            print("   üìù –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ HTML")
            print("   üîÑ –ú–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å Selenium –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")

async def main():
    checker = FBPApiChecker()
    await checker.check_for_api()
    checker.print_results()

if __name__ == "__main__":
    asyncio.run(main())
