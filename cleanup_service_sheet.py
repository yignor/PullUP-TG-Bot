#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ —Å–µ—Ä–≤–∏—Å–Ω–æ–º –ª–∏—Å—Ç–µ
"""

import asyncio
from enhanced_duplicate_protection import duplicate_protection

async def cleanup_service_sheet():
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –≤ —Å–µ—Ä–≤–∏—Å–Ω–æ–º –ª–∏—Å—Ç–µ"""
    print("üßπ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –û–ß–ò–°–¢–ö–ê –°–ï–†–í–ò–°–ù–û–ì–û –õ–ò–°–¢–ê")
    print("=" * 60)
    
    try:
        if not duplicate_protection.gc:
            print("‚ùå Google Sheets –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            return False
        
        if not duplicate_protection.service_worksheet:
            print("‚ùå –õ–∏—Å—Ç '–°–µ—Ä–≤–∏—Å–Ω—ã–π' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –æ—á–∏—Å—Ç–∫–µ")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ –æ—á–∏—Å—Ç–∫–∏
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–û –û–ß–ò–°–¢–ö–ò:")
        stats_before = duplicate_protection.get_statistics()
        if 'error' not in stats_before:
            for data_type, data in stats_before.items():
                print(f"   üìä {data_type}: {data['total']} –∑–∞–ø–∏—Å–µ–π")
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –ø–æ —Ç–∏–ø–∞–º
        cleanup_results = []
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–ø—Ä–æ—Å—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
        result = duplicate_protection.cleanup_old_records("–û–ü–†–û–°_–¢–†–ï–ù–ò–†–û–í–ö–ê", 30)
        if result['success']:
            cleanup_results.append(f"–û–ü–†–û–°_–¢–†–ï–ù–ò–†–û–í–ö–ê: {result['cleaned_count']} –∑–∞–ø–∏—Å–µ–π")
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–ø—Ä–æ—Å—ã –∏–≥—Ä (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
        result = duplicate_protection.cleanup_old_records("–û–ü–†–û–°_–ò–ì–†–ê", 30)
        if result['success']:
            cleanup_results.append(f"–û–ü–†–û–°_–ò–ì–†–ê: {result['cleaned_count']} –∑–∞–ø–∏—Å–µ–π")
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∞–Ω–æ–Ω—Å—ã –∏–≥—Ä (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
        result = duplicate_protection.cleanup_old_records("–ê–ù–û–ù–°_–ò–ì–†–ê", 30)
        if result['success']:
            cleanup_results.append(f"–ê–ù–û–ù–°_–ò–ì–†–ê: {result['cleaned_count']} –∑–∞–ø–∏—Å–µ–π")
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
        result = duplicate_protection.cleanup_old_records("–£–í–ï–î–û–ú–õ–ï–ù–ò–ï", 30)
        if result['success']:
            cleanup_results.append(f"–£–í–ï–î–û–ú–õ–ï–ù–ò–ï: {result['cleaned_count']} –∑–∞–ø–∏—Å–µ–π")
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
        result = duplicate_protection.cleanup_old_records("–†–ï–ó–£–õ–¨–¢–ê–¢_–ò–ì–†–ê", 30)
        if result['success']:
            cleanup_results.append(f"–†–ï–ó–£–õ–¨–¢–ê–¢_–ò–ì–†–ê: {result['cleaned_count']} –∑–∞–ø–∏—Å–µ–π")
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
        result = duplicate_protection.cleanup_old_records("–î–ï–ù–¨_–†–û–ñ–î–ï–ù–ò–Ø", 30)
        if result['success']:
            cleanup_results.append(f"–î–ï–ù–¨_–†–û–ñ–î–ï–ù–ò–Ø: {result['cleaned_count']} –∑–∞–ø–∏—Å–µ–π")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–°–õ–ï –û–ß–ò–°–¢–ö–ò:")
        stats_after = duplicate_protection.get_statistics()
        if 'error' not in stats_after:
            for data_type, data in stats_after.items():
                print(f"   üìä {data_type}: {data['total']} –∑–∞–ø–∏—Å–µ–π")
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—Å—Ç–∫–∏
        print(f"\nüßπ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ß–ò–°–¢–ö–ò:")
        print("=" * 40)
        if cleanup_results:
            for result in cleanup_results:
                print(f"   ‚úÖ {result}")
        else:
            print("   ‚ÑπÔ∏è –°—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        print(f"\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
        return False

if __name__ == "__main__":
    asyncio.run(cleanup_service_sheet())
