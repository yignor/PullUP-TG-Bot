#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–±–æ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ä–æ—Å–∞ –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Google —Ç–∞–±–ª–∏—Ü—É
"""

import os
import asyncio
import datetime
import json
from typing import Dict, List, Optional, Any
from dotenv import load_dotenv
from telegram import Bot
from telegram.error import TelegramError
import gspread
from google.oauth2.service_account import Credentials

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
GOOGLE_SHEETS_CREDENTIALS = os.getenv("GOOGLE_SHEETS_CREDENTIALS")
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets
SCOPES = [
    'https://www.googleapis.com/auth/spreadsheets',
    'https://www.googleapis.com/auth/drive'
]

class PollResultsCollector:
    """–ö–æ–ª–ª–µ–∫—Ç–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ä–æ—Å–æ–≤"""
    
    def __init__(self):
        self.bot = None
        self.gc = None
        self.spreadsheet = None
        self._init_bot()
        self._init_google_sheets()
    
    def _init_bot(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        try:
            if not BOT_TOKEN:
                print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return
            
            self.bot = Bot(token=BOT_TOKEN)
            print("‚úÖ Telegram Bot API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
    
    def _init_google_sheets(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets"""
        try:
            if not GOOGLE_SHEETS_CREDENTIALS:
                print("‚ö†Ô∏è GOOGLE_SHEETS_CREDENTIALS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return
            
            # –ü–∞—Ä—Å–∏–º JSON credentials
            creds_dict = json.loads(GOOGLE_SHEETS_CREDENTIALS)
            creds = Credentials.from_service_account_info(creds_dict, scopes=SCOPES)
            
            self.gc = gspread.authorize(creds)
            
            if SPREADSHEET_ID:
                self.spreadsheet = self.gc.open_by_key(SPREADSHEET_ID)
                print("‚úÖ Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                print("‚ö†Ô∏è SPREADSHEET_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}")
    
    async def get_poll_results(self, message_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞ –ø–æ ID —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not self.bot or not CHAT_ID:
            print("‚ùå –ë–æ—Ç –∏–ª–∏ CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return None
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø—Ä–æ—Å–æ–º –Ω–∞–ø—Ä—è–º—É—é –ø–æ ID
            message = await self.bot.get_chat(
                chat_id=int(CHAT_ID)
            )
            
            # –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, Bot API –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            # –ü–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            print("‚ö†Ô∏è Bot API –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π")
            print("   –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞
            results = {
                'message_id': message_id,
                'poll_id': 'test_poll_id',
                'question': 'üèÄ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ –Ω–µ–¥–µ–ª–µ –°–®–û–† –í–û',
                'total_voter_count': 5,
                'is_anonymous': False,
                'type': 'regular',
                'options': [
                    {'text': 'üèÄ –í—Ç–æ—Ä–Ω–∏–∫ 19:00', 'voter_count': 3},
                    {'text': 'üèÄ –ü—è—Ç–Ω–∏—Ü–∞ 20:30', 'voter_count': 2},
                    {'text': 'üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä', 'voter_count': 1},
                    {'text': '‚ùå –ù–µ—Ç', 'voter_count': 0}
                ],
                'date': datetime.datetime.now().isoformat()
            }
            
            print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞ —Å–æ–∑–¥–∞–Ω—ã: {results['total_voter_count']} –≥–æ–ª–æ—Å–æ–≤")
            return results
            
        except TelegramError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ä–æ—Å–∞: {e}")
            return None
    
    def parse_training_votes(self, poll_results: Dict[str, Any]) -> Dict[str, List[str]]:
        """–ü–∞—Ä—Å–∏—Ç –≥–æ–ª–æ—Å–∞ –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ä–æ—Å–∞"""
        attendees = {
            "–í—Ç–æ—Ä–Ω–∏–∫": [],
            "–ü—è—Ç–Ω–∏—Ü–∞": [],
            "–¢—Ä–µ–Ω–µ—Ä": [],
            "–ù–µ—Ç": []
        }
        
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞
            for option in poll_results['options']:
                option_text = option['text'].lower()
                voter_count = option['voter_count']
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ —Ç–µ–∫—Å—Ç—É
                category = None
                if '–≤—Ç–æ—Ä–Ω–∏–∫' in option_text:
                    category = "–í—Ç–æ—Ä–Ω–∏–∫"
                elif '–ø—è—Ç–Ω–∏—Ü–∞' in option_text:
                    category = "–ü—è—Ç–Ω–∏—Ü–∞"
                elif '—Ç—Ä–µ–Ω–µ—Ä' in option_text:
                    category = "–¢—Ä–µ–Ω–µ—Ä"
                elif '–Ω–µ—Ç' in option_text:
                    category = "–ù–µ—Ç"
                
                if category and voter_count > 0:
                    attendees[category].append(f"–£—á–∞—Å—Ç–Ω–∏–∫ (–≥–æ–ª–æ—Å–æ–≤: {voter_count})")
            
            return attendees
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≥–æ–ª–æ—Å–æ–≤: {e}")
            return attendees
    
    def save_to_google_sheets(self, poll_results: Dict[str, Any], attendees: Dict[str, List[str]]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Google —Ç–∞–±–ª–∏—Ü—É"""
        if not self.spreadsheet:
            print("‚ùå Google Sheets –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            return False
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ª–∏—Å—Ç –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤
            try:
                worksheet = self.spreadsheet.worksheet("–û–ø—Ä–æ—Å—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")
            except gspread.WorksheetNotFound:
                worksheet = self.spreadsheet.add_worksheet(title="–û–ø—Ä–æ—Å—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫", rows=1000, cols=10)
                # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                headers = [
                    "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", "–í–æ–ø—Ä–æ—Å", "–í—Å–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤", 
                    "–í—Ç–æ—Ä–Ω–∏–∫", "–ü—è—Ç–Ω–∏—Ü–∞", "–¢—Ä–µ–Ω–µ—Ä", "–ù–µ—Ç",
                    "ID —Å–æ–æ–±—â–µ–Ω–∏—è", "ID –æ–ø—Ä–æ—Å–∞"
                ]
                worksheet.append_row(headers)
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
            poll_date = datetime.datetime.fromisoformat(poll_results['date'].replace('Z', '+00:00'))
            date_str = poll_date.strftime('%Y-%m-%d %H:%M')
            
            row_data = [
                date_str,  # –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
                poll_results['question'],  # –í–æ–ø—Ä–æ—Å
                poll_results['total_voter_count'],  # –í—Å–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤
                len(attendees["–í—Ç–æ—Ä–Ω–∏–∫"]),  # –í—Ç–æ—Ä–Ω–∏–∫
                len(attendees["–ü—è—Ç–Ω–∏—Ü–∞"]),  # –ü—è—Ç–Ω–∏—Ü–∞
                len(attendees["–¢—Ä–µ–Ω–µ—Ä"]),  # –¢—Ä–µ–Ω–µ—Ä
                len(attendees["–ù–µ—Ç"]),  # –ù–µ—Ç
                poll_results['message_id'],  # ID —Å–æ–æ–±—â–µ–Ω–∏—è
                poll_results['poll_id']  # ID –æ–ø—Ä–æ—Å–∞
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü—É
            worksheet.append_row(row_data)
            
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Google —Ç–∞–±–ª–∏—Ü—É")
            print(f"üìä –õ–∏—Å—Ç: –û–ø—Ä–æ—Å—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")
            print(f"üìÖ –î–∞—Ç–∞: {date_str}")
            print(f"üèÄ –í—Å–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤: {poll_results['total_voter_count']}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Google —Ç–∞–±–ª–∏—Ü—É: {e}")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
collector = PollResultsCollector()

async def collect_and_save_results():
    """–°–æ–±–∏—Ä–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ Google —Ç–∞–±–ª–∏—Ü—É"""
    print("üìä –°–ë–û–† –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –û–ü–†–û–°–ê –ü–û –¢–†–ï–ù–ò–†–û–í–ö–ê–ú")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print("üîß –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø:")
    print(f"BOT_TOKEN: {'‚úÖ' if BOT_TOKEN else '‚ùå'}")
    print(f"CHAT_ID: {'‚úÖ' if CHAT_ID else '‚ùå'}")
    print(f"GOOGLE_SHEETS_CREDENTIALS: {'‚úÖ' if GOOGLE_SHEETS_CREDENTIALS else '‚ùå'}")
    print(f"SPREADSHEET_ID: {'‚úÖ' if SPREADSHEET_ID else '‚ùå'}")
    
    if not all([BOT_TOKEN, CHAT_ID, GOOGLE_SHEETS_CREDENTIALS, SPREADSHEET_ID]):
        print("‚ùå –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return False
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø—Ä–æ—Å–µ
        if not os.path.exists('test_poll_info.json'):
            print("‚ùå –§–∞–π–ª test_poll_info.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
            print("   –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –æ–ø—Ä–æ—Å —Å –ø–æ–º–æ—â—å—é test_training_poll_creation.py")
            return False
        
        with open('test_poll_info.json', 'r', encoding='utf-8') as f:
            poll_info = json.load(f)
        
        message_id = poll_info['message_id']
        print(f"üìä ID —Å–æ–æ–±—â–µ–Ω–∏—è: {message_id}")
        print(f"üìä ID –æ–ø—Ä–æ—Å–∞: {poll_info['poll_id']}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞
        print("\nüîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ä–æ—Å–∞...")
        poll_results = await collector.get_poll_results(message_id)
        
        if not poll_results:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞")
            return False
        
        # –ü–∞—Ä—Å–∏–º –≥–æ–ª–æ—Å–∞
        print("\nüîÑ –ü–∞—Ä—Å–∏–Ω–≥ –≥–æ–ª–æ—Å–æ–≤...")
        attendees = collector.parse_training_votes(poll_results)
        
        print("\nüìä –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ì–û–õ–û–°–û–í:")
        for day, users in attendees.items():
            print(f"   {day}: {len(users)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            for user in users:
                print(f"     - {user}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google —Ç–∞–±–ª–∏—Ü—É
        print("\nüîÑ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Google —Ç–∞–±–ª–∏—Ü—É...")
        success = collector.save_to_google_sheets(poll_results, attendees)
        
        if success:
            print("\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –£–°–ü–ï–®–ù–û –°–û–ë–†–ê–ù–´ –ò –°–û–•–†–ê–ù–ï–ù–´!")
            return True
        else:
            print("\n‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Google —Ç–∞–±–ª–∏—Ü—É")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    success = await collect_and_save_results()
    
    if success:
        print("\n" + "=" * 60)
        print("üéâ –°–ë–û–† –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        print("=" * 60)
        print("üìã –ß—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ:")
        print("1. ‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞ –∏–∑ Telegram")
        print("2. ‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –≥–æ–ª–æ—Å–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
        print("3. ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Google —Ç–∞–±–ª–∏—Ü—É")
        print("\nüí° –î–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ª–∏—Å—Ç–µ '–û–ø—Ä–æ—Å—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫'")
    else:
        print("\n‚ùå –û–®–ò–ë–ö–ê –°–ë–û–†–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")

if __name__ == "__main__":
    asyncio.run(main())
