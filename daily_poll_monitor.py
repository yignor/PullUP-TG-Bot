#!/usr/bin/env python3
"""
–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –≥–æ–ª–æ—Å–∞—Ö –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç Google —Ç–∞–±–ª–∏—Ü—É
"""

import os
import asyncio
import datetime
import json
from typing import Dict, List, Optional, Any, Set, Tuple
from dotenv import load_dotenv
from telegram import Bot
import gspread
from datetime_utils import get_moscow_time, log_current_time
from google.oauth2.service_account import Credentials

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
GOOGLE_SHEETS_CREDENTIALS = os.getenv("GOOGLE_SHEETS_CREDENTIALS")
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets
SCOPES = [
    'https://www.googleapis.com/auth/spreadsheets',
    'https://www.googleapis.com/auth/drive'
]


class DailyPollMonitor:
    """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    
    def __init__(self):
        self.bot = None
        self.spreadsheet = None
        self.worksheet = None
        self.current_votes = {}  # –¢–µ–∫—É—â–∏–µ –≥–æ–ª–æ—Å–∞ {user_id: {name, options, day}}
        self.previous_votes = {}  # –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –≥–æ–ª–æ—Å–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ Google Sheets"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
            if BOT_TOKEN:
                self.bot = Bot(token=BOT_TOKEN)
                print("‚úÖ Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            else:
                print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets
            if GOOGLE_SHEETS_CREDENTIALS and SPREADSHEET_ID:
                credentials_info = json.loads(GOOGLE_SHEETS_CREDENTIALS)
                credentials = Credentials.from_service_account_info(
                    credentials_info, scopes=SCOPES
                )
                gc = gspread.authorize(credentials)
                self.spreadsheet = gc.open_by_key(SPREADSHEET_ID)
                
                # –ü–æ–ª—É—á–∞–µ–º –ª–∏—Å—Ç "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"
                try:
                    self.worksheet = self.spreadsheet.worksheet("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
                    print("‚úÖ Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω")
                except gspread.WorksheetNotFound:
                    print("‚ùå –õ–∏—Å—Ç '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False
            else:
                print("‚ùå Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return False
                
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def get_active_polls_info(self) -> Dict[str, Any]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏"""
        now = get_moscow_time()
        weekday = now.weekday()  # 0=–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 6=–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        
        active_polls = {}
        
        # –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤:
        # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ (6): —Å–æ–∑–¥–∞–µ—Ç—Å—è –æ–ø—Ä–æ—Å –Ω–∞ –Ω–µ–¥–µ–ª—é
        # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-—Å—Ä–µ–¥–∞ (0-2): –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –≤—Ç–æ—Ä–Ω–∏–∫
        # –ß–µ—Ç–≤–µ—Ä–≥-—Å—É–±–±–æ—Ç–∞ (3-5): –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –ø—è—Ç–Ω–∏—Ü—É
        
        if weekday >= 0 and weekday <= 2:  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-—Å—Ä–µ–¥–∞
            active_polls['tuesday'] = {
                'day': '–í—Ç–æ—Ä–Ω–∏–∫',
                'active': True,
                'period': '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-—Å—Ä–µ–¥–∞',
                'ends': '—Å—Ä–µ–¥–∞'
            }
        
        if weekday >= 3 and weekday <= 5:  # –ß–µ—Ç–≤–µ—Ä–≥-—Å—É–±–±–æ—Ç–∞
            active_polls['friday'] = {
                'day': '–ü—è—Ç–Ω–∏—Ü–∞', 
                'active': True,
                'period': '—á–µ—Ç–≤–µ—Ä–≥-—Å—É–±–±–æ—Ç–∞',
                'ends': '—Å—É–±–±–æ—Ç–∞'
            }
        
        return active_polls
    
    async def find_active_training_poll(self) -> Optional[str]:
        """–ò—â–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –æ–ø—Ä–æ—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ —á–∞—Ç–µ"""
        if not self.bot or not CHAT_ID:
            return None
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞
            messages = []
            offset = 0
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Ä—Ü–∏—è–º–∏
            for attempt in range(5):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º get_updates –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ–ø—Ä–æ—Å–∞–º–∏
                    # –≠—Ç–æ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–ø—Ä–æ—Å–æ–≤
                    updates = await self.bot.get_updates(limit=100, offset=offset, timeout=10)
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–ø—Ä–æ—Å–∞–º–∏ –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                    chat_messages = []
                    for update in updates:
                        if update.message and update.message.poll:
                            chat_messages.append(update.message)
                    
                    if not updates:
                        break
                    
                    messages.extend(chat_messages)
                    offset = updates[-1].update_id + 1 if updates else offset + 100
                    
                    # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ—Ä—Ü–∏—è
                    if len(updates) < 100:
                        break
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                    break
            
            print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–ø—Ä–æ—Å–∞")
            
            # –ò—â–µ–º –æ–ø—Ä–æ—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
            for message in messages:
                if message.poll:
                    poll = message.poll
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ–ø—Ä–æ—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ —Ç–µ–∫—Å—Ç—É –≤–æ–ø—Ä–æ—Å–∞
                    question = poll.question.lower()
                    
                    # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —É–∫–∞–∑—ã–≤–∞—é—â–∏–µ –Ω–∞ –æ–ø—Ä–æ—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
                    training_keywords = ['—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞', '–≤—Ç–æ—Ä–Ω–∏–∫', '–ø—è—Ç–Ω–∏—Ü–∞', '–Ω–µ–¥–µ–ª—è']
                    if any(keyword in question for keyword in training_keywords):
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω –æ–ø—Ä–æ—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {poll.id}")
                        print(f"üìã –í–æ–ø—Ä–æ—Å: {poll.question}")
                        return poll.id
            
            print("‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–π –æ–ø—Ä–æ—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞: {e}")
            return None

    async def get_current_poll_votes(self, poll_id: str) -> Dict[int, Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –≥–æ–ª–æ—Å–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞"""
        if not self.bot:
            return {}
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞
            updates = await self.bot.get_updates(limit=100, timeout=10)
            
            current_votes = {}
            
            for update in updates:
                if update.poll_answer and update.poll_answer.poll_id == poll_id:
                    user = update.effective_user
                    user_name = f"{user.first_name} {user.last_name or ''}".strip()
                    telegram_id = user.username or "–±–µ–∑_username"
                    if telegram_id != "–±–µ–∑_username":
                        telegram_id = f"@{telegram_id}"
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–º—è
                    formatted_name = self.format_player_name(user_name, telegram_id)
                    
                    current_votes[user.id] = {
                        'name': formatted_name,
                        'options': update.poll_answer.option_ids,
                        'update_id': update.update_id
                    }
            
            return current_votes
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è –æ–ø—Ä–æ—Å–∞ {poll_id}: {e}")
            return {}
    
    def format_player_name(self, user_name: str, telegram_id: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–º—è –∏–≥—Ä–æ–∫–∞"""
        if not user_name or user_name.strip() == "":
            return telegram_id
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        name_parts = user_name.strip().split()
        if len(name_parts) >= 2:
            return f"{name_parts[0]} {name_parts[-1]}"
        else:
            return name_parts[0] if name_parts else telegram_id
    
    def load_previous_votes(self, poll_id: str) -> Dict[int, Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≥–æ–ª–æ—Å–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            filename = f"poll_votes_{poll_id}.json"
            if os.path.exists(filename):
                with open(filename, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≥–æ–ª–æ—Å–æ–≤: {e}")
        
        return {}
    
    def save_current_votes(self, poll_id: str, votes: Dict[int, Dict]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–µ –≥–æ–ª–æ—Å–∞ –≤ —Ñ–∞–π–ª"""
        try:
            filename = f"poll_votes_{poll_id}.json"
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(votes, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤: {e}")
    
    def find_vote_changes(self, previous_votes: Dict[int, Dict], current_votes: Dict[int, Dict]) -> Tuple[List[Dict], List[Dict], List[Dict]]:
        """–ù–∞—Ö–æ–¥–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –≥–æ–ª–æ—Å–∞—Ö"""
        added_votes = []      # –ù–æ–≤—ã–µ –≥–æ–ª–æ—Å–∞
        removed_votes = []    # –£–¥–∞–ª–µ–Ω–Ω—ã–µ –≥–æ–ª–æ—Å–∞  
        changed_votes = []    # –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –≥–æ–ª–æ—Å–∞
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –∏ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –≥–æ–ª–æ—Å–∞
        for user_id, current_vote in current_votes.items():
            if user_id not in previous_votes:
                # –ù–æ–≤—ã–π –≥–æ–ª–æ—Å
                added_votes.append(current_vote)
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ –≥–æ–ª–æ—Å
                previous_vote = previous_votes[user_id]
                if current_vote['options'] != previous_vote['options']:
                    changed_votes.append({
                        'previous': previous_vote,
                        'current': current_vote
                    })
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ –≥–æ–ª–æ—Å–∞
        for user_id, previous_vote in previous_votes.items():
            if user_id not in current_votes:
                removed_votes.append(previous_vote)
        
        return added_votes, removed_votes, changed_votes
    
    def get_existing_voters_from_sheet(self, day: str) -> Set[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ Google —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è"""
        existing_voters = set()
        
        try:
            all_values = self.worksheet.get_all_values()
            
            for i, row in enumerate(all_values):
                if len(row) > 1 and row[1] == day:
                    # –ù–∞—à–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–Ω—è, —Å–æ–±–∏—Ä–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                    j = i + 1
                    while j < len(all_values):
                        next_row = all_values[j]
                        # –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ –¥—Ä—É–≥–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–Ω—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
                        if len(next_row) > 1 and next_row[1] in ["–í—Ç–æ—Ä–Ω–∏–∫", "–ü—è—Ç–Ω–∏—Ü–∞"]:
                            break
                        
                        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è
                        if len(next_row) > 3 and next_row[2] and next_row[3]:
                            name = next_row[3]  # –ò–º—è
                            surname = next_row[2]  # –§–∞–º–∏–ª–∏—è
                            existing_voters.add(f"{name} {surname}")
                        
                        j += 1
                    break
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
        
        return existing_voters
    
    def add_voter_to_sheet(self, voter_name: str, day: str) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ Google —Ç–∞–±–ª–∏—Ü—É"""
        try:
            # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
            all_values = self.worksheet.get_all_values()
            insert_row = None
            
            for i, row in enumerate(all_values):
                if len(row) > 1 and row[1] == day:
                    # –ù–∞—à–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–Ω—è, –∏—â–µ–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
                    j = i + 1
                    while j < len(all_values):
                        next_row = all_values[j]
                        # –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ –¥—Ä—É–≥–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–Ω—è, –≤—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ –Ω–∏–º
                        if len(next_row) > 1 and next_row[1] in ["–í—Ç–æ—Ä–Ω–∏–∫", "–ü—è—Ç–Ω–∏—Ü–∞"]:
                            insert_row = j + 1  # +1 –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω—É–º–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–æ–∫ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1
                            break
                        # –ï—Å–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, –≤—Å—Ç–∞–≤–ª—è–µ–º —Ç—É–¥–∞
                        if not any(next_row[2:5]):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ C, D, E
                            insert_row = j + 1
                            break
                        j += 1
                    
                    if insert_row is None:
                        insert_row = j + 1  # –í—Å—Ç–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü
                    break
            
            if insert_row:
                # –†–∞–∑–±–∏–≤–∞–µ–º –∏–º—è –Ω–∞ —á–∞—Å—Ç–∏
                name_parts = voter_name.split()
                if len(name_parts) >= 2:
                    surname = name_parts[-1]
                    first_name = " ".join(name_parts[:-1])
                else:
                    surname = voter_name
                    first_name = ""
                
                # –í—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É
                self.worksheet.insert_row([
                    "",  # A - –ø—É—Å—Ç–∞—è –∫–æ–ª–æ–Ω–∫–∞
                    "",  # B - –ø—É—Å—Ç–∞—è –∫–æ–ª–æ–Ω–∫–∞  
                    surname,  # C - —Ñ–∞–º–∏–ª–∏—è
                    first_name,  # D - –∏–º—è
                    ""   # E - –ø—É—Å—Ç–∞—è –∫–æ–ª–æ–Ω–∫–∞
                ], insert_row)
                
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫ {voter_name} –≤ {day}")
                return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ {voter_name}: {e}")
        
        return False
    
    def remove_voter_from_sheet(self, voter_name: str, day: str) -> bool:
        """–£–¥–∞–ª—è–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ Google —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            all_values = self.worksheet.get_all_values()
            
            for i, row in enumerate(all_values):
                if len(row) > 1 and row[1] == day:
                    # –ù–∞—à–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–Ω—è, –∏—â–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
                    j = i + 1
                    while j < len(all_values):
                        next_row = all_values[j]
                        # –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ –¥—Ä—É–≥–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–Ω—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
                        if len(next_row) > 1 and next_row[1] in ["–í—Ç–æ—Ä–Ω–∏–∫", "–ü—è—Ç–Ω–∏—Ü–∞"]:
                            break
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ª–∏ –Ω–∞—à —É—á–∞—Å—Ç–Ω–∏–∫
                        if len(next_row) > 3 and next_row[2] and next_row[3]:
                            name = next_row[3]  # –ò–º—è
                            surname = next_row[2]  # –§–∞–º–∏–ª–∏—è
                            table_name = f"{name} {surname}"
                            
                            if table_name == voter_name:
                                # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É (j+1 –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω—É–º–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1)
                                self.worksheet.delete_rows(j + 1)
                                print(f"‚úÖ –£–¥–∞–ª–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫ {voter_name} –∏–∑ {day}")
                                return True
                        
                        j += 1
                    break
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ {voter_name}: {e}")
        
        return False
    
    async def process_poll_changes(self, poll_id: str, day: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è"""
        print(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è {day} (–æ–ø—Ä–æ—Å {poll_id})")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≥–æ–ª–æ—Å–∞
        current_votes = await self.get_current_poll_votes(poll_id)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≥–æ–ª–æ—Å–∞
        previous_votes = self.load_previous_votes(poll_id)
        
        # –ù–∞—Ö–æ–¥–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        added_votes, removed_votes, changed_votes = self.find_vote_changes(previous_votes, current_votes)
        
        print(f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è {day}:")
        print(f"   –ù–æ–≤—ã–µ –≥–æ–ª–æ—Å–∞: {len(added_votes)}")
        print(f"   –£–¥–∞–ª–µ–Ω–Ω—ã–µ –≥–æ–ª–æ—Å–∞: {len(removed_votes)}")
        print(f"   –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –≥–æ–ª–æ—Å–∞: {len(changed_votes)}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        changes_made = False
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –≥–æ–ª–æ—Å–∞
        for vote in added_votes:
            if 0 in vote['options'] and day == '–í—Ç–æ—Ä–Ω–∏–∫':  # –ì–æ–ª–æ—Å –∑–∞ –≤—Ç–æ—Ä–Ω–∏–∫
                if self.add_voter_to_sheet(vote['name'], day):
                    changes_made = True
            elif 1 in vote['options'] and day == '–ü—è—Ç–Ω–∏—Ü–∞':  # –ì–æ–ª–æ—Å –∑–∞ –ø—è—Ç–Ω–∏—Ü—É
                if self.add_voter_to_sheet(vote['name'], day):
                    changes_made = True
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–ø–∞–≤—à–∏–µ –≥–æ–ª–æ—Å–∞
        for vote in removed_votes:
            if 0 in vote['options'] and day == '–í—Ç–æ—Ä–Ω–∏–∫':  # –ë—ã–ª –≥–æ–ª–æ—Å –∑–∞ –≤—Ç–æ—Ä–Ω–∏–∫
                if self.remove_voter_from_sheet(vote['name'], day):
                    changes_made = True
            elif 1 in vote['options'] and day == '–ü—è—Ç–Ω–∏—Ü–∞':  # –ë—ã–ª –≥–æ–ª–æ—Å –∑–∞ –ø—è—Ç–Ω–∏—Ü—É
                if self.remove_voter_from_sheet(vote['name'], day):
                    changes_made = True
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –≥–æ–ª–æ—Å–∞
        for change in changed_votes:
            previous_vote = change['previous']
            current_vote = change['current']
            
            # –ï—Å–ª–∏ —Ä–∞–Ω—å—à–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å, –∞ —Ç–µ–ø–µ—Ä—å –Ω–µ—Ç - —É–¥–∞–ª—è–µ–º
            if 0 in previous_vote['options'] and day == '–í—Ç–æ—Ä–Ω–∏–∫' and 0 not in current_vote['options']:
                if self.remove_voter_from_sheet(previous_vote['name'], day):
                    changes_made = True
            elif 1 in previous_vote['options'] and day == '–ü—è—Ç–Ω–∏—Ü–∞' and 1 not in current_vote['options']:
                if self.remove_voter_from_sheet(previous_vote['name'], day):
                    changes_made = True
            
            # –ï—Å–ª–∏ —Ä–∞–Ω—å—à–µ –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å, –∞ —Ç–µ–ø–µ—Ä—å –≥–æ–ª–æ—Å—É–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º
            if 0 not in previous_vote['options'] and day == '–í—Ç–æ—Ä–Ω–∏–∫' and 0 in current_vote['options']:
                if self.add_voter_to_sheet(current_vote['name'], day):
                    changes_made = True
            elif 1 not in previous_vote['options'] and day == '–ü—è—Ç–Ω–∏—Ü–∞' and 1 in current_vote['options']:
                if self.add_voter_to_sheet(current_vote['name'], day):
                    changes_made = True
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –≥–æ–ª–æ—Å–∞ –∫–∞–∫ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.save_current_votes(poll_id, current_votes)
        
        if changes_made:
            print(f"‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ {day} –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
        else:
            print(f"‚ÑπÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–π –≤ {day} –Ω–µ—Ç")
    
    async def run_daily_check(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π"""
        now = get_moscow_time()
        print(f"üïê –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π - {now.strftime('%d.%m.%Y %H:%M')}")
        print(f"üìÖ –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'][now.weekday()]}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        if not await self.initialize():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
            return False
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø—Ä–æ—Å—ã
        active_polls = self.get_active_polls_info()
        
        if not active_polls:
            print("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
            print("‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è:")
            print("   üìÖ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-—Å—Ä–µ–¥–∞: –∑–∞ –≤—Ç–æ—Ä–Ω–∏–∫")
            print("   üìÖ –ß–µ—Ç–≤–µ—Ä–≥-—Å—É–±–±–æ—Ç–∞: –∑–∞ –ø—è—Ç–Ω–∏—Ü—É")
            print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω (–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤)")
            return True
        
        print(f"üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–ø—Ä–æ—Å—ã: {list(active_polls.keys())}")
        for poll_key, poll_info in active_polls.items():
            print(f"   üèÄ {poll_info['day']}: –ø–µ—Ä–∏–æ–¥ {poll_info['period']}")
        
        # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –æ–ø—Ä–æ—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ Telegram
        print("üîç –ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ —á–∞—Ç–µ...")
        poll_id = await self.find_active_training_poll()
        
        if not poll_id:
            print("‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–π –æ–ø—Ä–æ—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —á–∞—Ç–µ")
            print("‚ÑπÔ∏è –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –æ–ø—Ä–æ—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –µ—â–µ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")
            print("‚ÑπÔ∏è –û–∂–∏–¥–∞–π—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞ –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ")
            print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω (–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞)")
            return True  # –ù–µ –æ—à–∏–±–∫–∞, –ø—Ä–æ—Å—Ç–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞
        
        print(f"üìä –ù–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –æ–ø—Ä–æ—Å: {poll_id}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å
        for day_key, day_info in active_polls.items():
            day_name = day_info['day']
            await self.process_poll_changes(poll_id, day_name)
        
        print("‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return True


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    monitor = DailyPollMonitor()
    await monitor.run_daily_check()


if __name__ == "__main__":
    asyncio.run(main())