#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –∞–Ω–æ–Ω—Å–∞–º–∏
"""

import asyncio
import re
import aiohttp
from bs4 import BeautifulSoup
from datetime import datetime, timezone, timedelta

async def debug_announcement_issue():
    """–û—Ç–ª–∞–∂–∏–≤–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å –∞–Ω–æ–Ω—Å–∞–º–∏"""
    
    print("üîç –û–¢–õ–ê–î–ö–ê –ü–†–û–ë–õ–ï–ú–´ –° –ê–ù–û–ù–°–ê–ú–ò")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    moscow_tz = timezone(timedelta(hours=3))
    current_date = datetime.now(moscow_tz).strftime('%d.%m.%Y')
    print(f"üìÖ –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {current_date}")
    
    async with aiohttp.ClientSession() as session:
        url = "http://letobasket.ru/"
        
        async with session.get(url) as response:
            if response.status == 200:
                content = await response.text()
                soup = BeautifulSoup(content, 'html.parser')
                
                # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                full_text = soup.get_text()
                
                # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –∏–≥—Ä
                game_pattern = r'(\d{2}\.\d{2}\.\d{4})\s+(\d{2}\.\d{2})\s+\(([^)]+)\)\s*-\s*([^-]+)\s*-\s*([^-]+)'
                matches = re.findall(game_pattern, full_text, re.IGNORECASE)
                
                # –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä—ã —Å PullUP
                games = []
                for match in matches:
                    date, time, venue, team1, team2 = match
                    team1 = team1.strip()
                    team2 = team2.strip()
                    venue = venue.strip()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ Pull Up –≤ –∫–æ–º–∞–Ω–¥–∞—Ö
                    if 'Pull Up' in team1 or 'Pull Up' in team2:
                        games.append({
                            'date': date,
                            'time': time,
                            'team1': team1,
                            'team2': team2,
                            'venue': venue,
                            'is_today': date == current_date
                        })
                
                print(f"üìã –ù–∞–π–¥–µ–Ω–æ –∏–≥—Ä —Å PullUP: {len(games)}")
                for i, game in enumerate(games, 1):
                    today_marker = " (–°–ï–ì–û–î–ù–Ø!)" if game['is_today'] else ""
                    print(f"{i}. {game['date']} {game['time']} - {game['team1']} vs {game['team2']} ({game['venue']}){today_marker}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∏–≥—Ä—ã
                today_games = [game for game in games if game['is_today']]
                print(f"\nüéØ –ò–ì–† –ù–ê –°–ï–ì–û–î–ù–Ø: {len(today_games)}")
                
                for game in today_games:
                    print(f"\nüèÄ –ê–Ω–∞–ª–∏–∑ –∏–≥—Ä—ã: {game['team1']} vs {game['team2']}")
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—à—É –∫–æ–º–∞–Ω–¥—É
                    our_team = None
                    opponent = None
                    
                    if 'Pull Up' in game['team1']:
                        our_team = game['team1']
                        opponent = game['team2']
                    elif 'Pull Up' in game['team2']:
                        our_team = game['team2']
                        opponent = game['team1']
                    
                    if our_team:
                        print(f"   ‚úÖ –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞: {our_team}")
                        print(f"   üèÄ –°–æ–ø–µ—Ä–Ω–∏–∫: {opponent}")
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–æ–º–∞–Ω–¥—ã
                        def get_team_category(team_name: str, opponent: str = "", game_time: str = "") -> str:
                            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                            team_upper = team_name.upper().replace(" ", "").replace("-", "").replace("_", "")
                            
                            # –í–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Å–æ—Å—Ç–∞–≤–∞ —Ä–∞–∑–≤–∏—Ç–∏—è
                            development_variants = [
                                "PULLUP–§–ê–†–ú",
                                "PULLUP-–§–ê–†–ú", 
                                "PULLUP-–§–ê–†–ú",
                                "PULLUP–§–ê–†–ú",
                                "PULL UP–§–ê–†–ú",
                                "PULL UP-–§–ê–†–ú",
                                "PULL UP –§–ê–†–ú",
                                "PULLUP –§–ê–†–ú"
                            ]
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Å–æ—Å—Ç–∞–≤–æ–º —Ä–∞–∑–≤–∏—Ç–∏—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
                            for variant in development_variants:
                                if variant in team_upper:
                                    return "–°–æ—Å—Ç–∞–≤ –†–∞–∑–≤–∏—Ç–∏—è"
                            
                            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞: –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è "Pull Up", –Ω–æ —Å–æ–ø–µ—Ä–Ω–∏–∫ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑–≤–∏—Ç–∏—è
                            if "PULLUP" in team_upper and opponent:
                                development_opponents = ['–ö—É–¥—Ä–æ–≤–æ', '–¢–æ—Å–Ω–æ', 'QUASAR', 'TAURUS']
                                if opponent in development_opponents:
                                    return "–°–æ—Å—Ç–∞–≤ –†–∞–∑–≤–∏—Ç–∏—è"
                            
                            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç —Å–æ—Å—Ç–∞–≤–∞ —Ä–∞–∑–≤–∏—Ç–∏—è, —Ç–æ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —Å–æ—Å—Ç–∞–≤
                            return "–ü–µ—Ä–≤—ã–π —Å–æ—Å—Ç–∞–≤"
                        
                        category = get_team_category(our_team, opponent)
                        print(f"   üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–≥—Ä–∞ –≤ —Ç–∞–±–ª–æ
                        print(f"   üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤ —Ç–∞–±–ª–æ...")
                        
                        # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–≥—Ä—ã
                        game_links = []
                        for link in soup.find_all('a', href=True):
                            if "–°–¢–†–ê–ù–ò–¶–ê –ò–ì–†–´" in link.get_text():
                                game_links.append(link['href'])
                        
                        print(f"   üîó –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –≤ —Ç–∞–±–ª–æ: {len(game_links)}")
                        
                        # –ò—â–µ–º –Ω–∞—à—É –∏–≥—Ä—É –≤ —Ç–∞–±–ª–æ
                        game_found_in_scoreboard = False
                        found_game_link = None
                        found_team = None
                        
                        for game_link in game_links:
                            if 'gameId=' in game_link:
                                game_id = game_link.split('gameId=')[1].split('&')[0]
                                
                                # –§–æ—Ä–º–∏—Ä—É–µ–º URL iframe
                                iframe_url = f"http://ig.russiabasket.ru/online/?id={game_id}&compId=62953&db=reg&tab=0&tv=0&color=5&logo=0&foul=0&white=1&timer24=0&blank=6&short=1&teamA=&teamB="
                                
                                try:
                                    async with session.get(iframe_url) as iframe_response:
                                        if iframe_response.status == 200:
                                            iframe_content = await iframe_response.text()
                                            iframe_text = iframe_content.upper()
                                            
                                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–∞–Ω–¥
                                            team1_found = game['team1'].upper() in iframe_text
                                            team2_found = game['team2'].upper() in iframe_text
                                            
                                            if team1_found and team2_found:
                                                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —ç—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–∞—à–∞ –∏–≥—Ä–∞
                                                title_match = re.search(r'<TITLE>.*?([^-]+)\s*-\s*([^-]+)', iframe_content, re.IGNORECASE)
                                                if title_match:
                                                    iframe_team1 = title_match.group(1).strip()
                                                    iframe_team2 = title_match.group(2).strip()
                                                    print(f"   üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫ iframe: {iframe_team1} - {iframe_team2}")
                                                    
                                                    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                                                    def normalize_team_name(name):
                                                        return name.upper().replace(' ', '').replace('-', '').replace('_', '')
                                                    
                                                    team1_normalized = normalize_team_name(game['team1'])
                                                    team2_normalized = normalize_team_name(game['team2'])
                                                    iframe_team1_normalized = normalize_team_name(iframe_team1)
                                                    iframe_team2_normalized = normalize_team_name(iframe_team2)
                                                    
                                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–º–∞–Ω–¥
                                                    teams_match = (
                                                        (team1_normalized in iframe_team1_normalized and team2_normalized in iframe_team2_normalized) or
                                                        (team1_normalized in iframe_team2_normalized and team2_normalized in iframe_team1_normalized)
                                                    )
                                                    
                                                    if teams_match:
                                                        game_found_in_scoreboard = True
                                                        found_game_link = game_link
                                                        
                                                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É Pull Up
                                                        if 'PULL UP-–§–ê–†–ú' in iframe_text or 'PULL UP –§–ê–†–ú' in iframe_text:
                                                            found_team = 'Pull Up-–§–∞—Ä–º'
                                                        elif 'PULL UP' in iframe_text:
                                                            found_team = 'Pull Up'
                                                        
                                                        print(f"   ‚úÖ –ò–≥—Ä–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–æ (GameId: {game_id})")
                                                        print(f"   üè∑Ô∏è –ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {found_team}")
                                                        break
                                                    else:
                                                        print(f"   ‚ùå –ö–æ–º–∞–Ω–¥—ã –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç: {game['team1']} vs {game['team2']} != {iframe_team1} vs {iframe_team2}")
                                                else:
                                                    print(f"   ‚ö†Ô∏è –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                                except:
                                    continue
                        
                        if not game_found_in_scoreboard:
                            print(f"   ‚ö†Ô∏è –ò–≥—Ä–∞ –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–æ")
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –∞–Ω–æ–Ω—Å
                        normalized_time = game['time'].replace('.', ':')
                        announcement = f"üèÄ –°–µ–≥–æ–¥–Ω—è –∏–≥—Ä–∞ {category} –ø—Ä–æ—Ç–∏–≤ {opponent} –≤ {game['venue']}.\n"
                        announcement += f"üïê –í—Ä–µ–º—è –∏–≥—Ä—ã: {normalized_time}."
                        
                        if game_found_in_scoreboard:
                            announcement += f"\nüîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–≥—Ä—É –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞"
                            print(f"   üì¢ –ê–Ω–æ–Ω—Å —Å —Å—Å—ã–ª–∫–æ–π: {announcement}")
                        else:
                            print(f"   üì¢ –ê–Ω–æ–Ω—Å –±–µ–∑ —Å—Å—ã–ª–∫–∏: {announcement}")
                        
                        print(f"   üîë –ö–ª—é—á –∞–Ω–æ–Ω—Å–∞: {game['date']}_{normalized_time}_{game['team1']}_{game['team2']}")
                    else:
                        print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞—à—É –∫–æ–º–∞–Ω–¥—É")
                
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {response.status}")

if __name__ == "__main__":
    asyncio.run(debug_announcement_issue())
