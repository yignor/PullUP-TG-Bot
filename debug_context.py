#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–≥—Ä PullUP
"""

import asyncio
import aiohttp
from bs4 import BeautifulSoup
import re

async def debug_context():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–≥—Ä PullUP"""
    url = "http://letobasket.ru/"
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    html_content = await response.text()
                    
                    # –ü–∞—Ä—Å–∏–º HTML
                    soup = BeautifulSoup(html_content, 'html.parser')
                    
                    # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    page_text = soup.get_text()
                    
                    # –ò—â–µ–º PullUP
                    pullup_pattern = r'pull\s*up'
                    matches = re.findall(pullup_pattern, page_text, re.IGNORECASE)
                    
                    print("üîç –ê–ù–ê–õ–ò–ó –ö–û–ù–¢–ï–ö–°–¢–ê –ò–ì–† PULLUP")
                    print("=" * 50)
                    print(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(matches)}")
                    
                    for i, match in enumerate(matches[:3], 1):  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3
                        print(f"\nüéÆ –ê–ù–ê–õ–ò–ó –ò–ì–†–´ {i}:")
                        print("-" * 30)
                        
                        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                        match_pos = page_text.lower().find(match.lower())
                        if match_pos != -1:
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                            start_context = max(0, match_pos - 200)
                            end_context = min(len(page_text), match_pos + 300)
                            context = page_text[start_context:end_context]
                            
                            print(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç:")
                            print(context)
                            
                            # –ò—â–µ–º –∫–æ–º–∞–Ω–¥—É —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
                            opponent_patterns = [
                                r'([–ê-–Ø][–∞-—è\s]+)\s*[-‚Äî]\s*([–ê-–Ø][–∞-—è\s]+)',
                                r'([–ê-–Ø][–∞-—è\s]+)\s+–ø—Ä–æ—Ç–∏–≤\s+([–ê-–Ø][–∞-—è\s]+)',
                                r'([–ê-–Ø][–∞-—è\s]+)\s+vs\s+([–ê-–Ø][–∞-—è\s]+)',
                            ]
                            
                            print(f"\nüîç –ü–û–ò–°–ö –°–û–ü–ï–†–ù–ò–ö–ê:")
                            for pattern in opponent_patterns:
                                opp_match = re.search(pattern, context)
                                if opp_match:
                                    team1 = opp_match.group(1).strip()
                                    team2 = opp_match.group(2).strip()
                                    print(f"   ‚úÖ –ü–∞—Ç—Ç–µ—Ä–Ω '{pattern}': {team1} vs {team2}")
                                    
                                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
                                    if 'pull' in team1.lower() and 'up' in team1.lower():
                                        print(f"   üèÄ –°–æ–ø–µ—Ä–Ω–∏–∫: {team2}")
                                    elif 'pull' in team2.lower() and 'up' in team2.lower():
                                        print(f"   üèÄ –°–æ–ø–µ—Ä–Ω–∏–∫: {team1}")
                                    else:
                                        print(f"   ‚ùì –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–æ–ø–µ—Ä–Ω–∏–∫–∞")
                                else:
                                    print(f"   ‚ùå –ü–∞—Ç—Ç–µ—Ä–Ω '{pattern}': –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                            
                            # –ò—â–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
                            print(f"\nüìÖ –ü–û–ò–°–ö –î–ê–¢–´ –ò –í–†–ï–ú–ï–ù–ò:")
                            date_match = re.search(r'(\d{1,2}[./]\d{1,2}[./]\d{2,4})', context)
                            time_match = re.search(r'(\d{1,2}[:.]\d{2})', context)
                            score_match = re.search(r'(\d+[:.]\d+)', context)
                            
                            if date_match:
                                print(f"   üìÖ –î–∞—Ç–∞: {date_match.group(1)}")
                            if time_match:
                                print(f"   üïê –í—Ä–µ–º—è: {time_match.group(1)}")
                            if score_match:
                                print(f"   üèÄ –°—á–µ—Ç: {score_match.group(1)}")
                    
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {response.status}")
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(debug_context())
