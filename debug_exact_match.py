#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫–∏ —Å IT Basket - Pull Up-–§–∞—Ä–º
"""

import asyncio
import aiohttp
from bs4 import BeautifulSoup
import re

async def debug_exact_match():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–æ—á–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å IT Basket - Pull Up-–§–∞—Ä–º"""
    url = "http://letobasket.ru/"
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    html_content = await response.text()
                    
                    # –ü–∞—Ä—Å–∏–º HTML
                    soup = BeautifulSoup(html_content, 'html.parser')
                    
                    # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    page_text = soup.get_text()
                    
                    print("üîç –¢–û–ß–ù–´–ô –ü–û–ò–°–ö IT BASKET - PULL UP-–§–ê–†–ú")
                    print("=" * 50)
                    
                    # –ò—â–µ–º —Ç–æ—á–Ω—É—é —Å—Ç—Ä–æ–∫—É
                    exact_pattern = r'16\.08\.2025\s+12\.30\s*\([^)]*\)\s*-\s*IT\s+Basket\s*-\s*Pull\s+Up-–§–∞—Ä–º'
                    exact_match = re.search(exact_pattern, page_text, re.IGNORECASE)
                    
                    if exact_match:
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–æ—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞!")
                        print(f"–°—Ç—Ä–æ–∫–∞: {exact_match.group(0)}")
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∫—Ä—É–≥
                        match_pos = exact_match.start()
                        start_context = max(0, match_pos - 200)
                        end_context = min(len(page_text), match_pos + 300)
                        context = page_text[start_context:end_context]
                        
                        print(f"\nüìÑ –ö–æ–Ω—Ç–µ–∫—Å—Ç:")
                        print(context)
                        
                        # –ü–∞—Ä—Å–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                        print(f"\nüîç –ü–ê–†–°–ò–ù–ì –ö–û–ú–ü–û–ù–ï–ù–¢–û–í:")
                        
                        # –î–∞—Ç–∞
                        date_match = re.search(r'(\d{1,2}[./]\d{1,2}[./]\d{2,4})', exact_match.group(0))
                        if date_match:
                            print(f"   üìÖ –î–∞—Ç–∞: {date_match.group(1)}")
                        
                        # –í—Ä–µ–º—è
                        time_match = re.search(r'(\d{1,2}[:.]\d{2})', exact_match.group(0))
                        if time_match:
                            print(f"   üïê –í—Ä–µ–º—è: {time_match.group(1)}")
                        
                        # –ú–µ—Å—Ç–æ
                        place_match = re.search(r'\(([^)]+)\)', exact_match.group(0))
                        if place_match:
                            print(f"   üèüÔ∏è –ú–µ—Å—Ç–æ: {place_match.group(1)}")
                        
                        # –ö–æ–º–∞–Ω–¥—ã
                        teams_match = re.search(r'-\s*([^-]+)\s*-\s*([^-]+)', exact_match.group(0))
                        if teams_match:
                            team1 = teams_match.group(1).strip()
                            team2 = teams_match.group(2).strip()
                            print(f"   üèÄ –ö–æ–º–∞–Ω–¥–∞ 1: {team1}")
                            print(f"   üèÄ –ö–æ–º–∞–Ω–¥–∞ 2: {team2}")
                            
                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
                            if 'pull' in team1.lower() and 'up' in team1.lower():
                                print(f"   üéØ –°–æ–ø–µ—Ä–Ω–∏–∫: {team2}")
                            elif 'pull' in team2.lower() and 'up' in team2.lower():
                                print(f"   üéØ –°–æ–ø–µ—Ä–Ω–∏–∫: {team1}")
                        
                        # –ò—â–µ–º —Å—Å—ã–ª–∫—É –≤ HTML
                        print(f"\nüîó –ü–û–ò–°–ö –°–°–´–õ–ö–ò:")
                        context_start = html_content.lower().find(context[:50].lower())
                        if context_start != -1:
                            search_start = max(0, context_start - 1000)
                            search_end = min(len(html_content), context_start + 1000)
                            search_area = html_content[search_start:search_end]
                            
                            # –ò—â–µ–º "–°–¢–†–ê–ù–ò–¶–ê –ò–ì–†–´"
                            page_link_match = re.search(r'–°–¢–†–ê–ù–ò–¶–ê –ò–ì–†–´[^>]*href=["\']([^"\']+)["\']', search_area, re.IGNORECASE)
                            if page_link_match:
                                print(f"   ‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞–π–¥–µ–Ω–∞: {page_link_match.group(1)}")
                            else:
                                print(f"   ‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                                
                                # –ò—â–µ–º –ª—é–±—ã–µ —Å—Å—ã–ª–∫–∏
                                all_links = re.findall(r'href=["\']([^"\']+)["\']', search_area)
                                if all_links:
                                    print(f"   üìã –ù–∞–π–¥–µ–Ω–æ {len(all_links)} —Å—Å—ã–ª–æ–∫ –≤ –æ–±–ª–∞—Å—Ç–∏:")
                                    for link in all_links[:5]:
                                        print(f"      - {link}")
                        else:
                            print(f"   ‚ùå –ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ HTML")
                    else:
                        print(f"‚ùå –¢–æ—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                        
                        # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ —Å—Ç—Ä–æ–∫–∏
                        print(f"\nüîç –ü–û–ò–°–ö –ü–û–•–û–ñ–ò–• –°–¢–†–û–ö:")
                        similar_pattern = r'16\.08\.2025.*IT.*Basket.*Pull.*Up'
                        similar_matches = re.findall(similar_pattern, page_text, re.IGNORECASE)
                        if similar_matches:
                            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(similar_matches)} –ø–æ—Ö–æ–∂–∏—Ö —Å—Ç—Ä–æ–∫:")
                            for match in similar_matches:
                                print(f"   - {match}")
                        else:
                            print(f"‚ùå –ü–æ—Ö–æ–∂–∏–µ —Å—Ç—Ä–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {response.status}")
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(debug_exact_match())
