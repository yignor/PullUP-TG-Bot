#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã letobasket.ru
"""

import asyncio
import aiohttp
from bs4 import BeautifulSoup
import re

async def debug_letobasket_page():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã letobasket.ru"""
    url = "http://letobasket.ru/"
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    html_content = await response.text()
                    
                    # –ü–∞—Ä—Å–∏–º HTML
                    soup = BeautifulSoup(html_content, 'html.parser')
                    
                    print("üîç –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –°–¢–†–ê–ù–ò–¶–´ LETOBASKET.RU")
                    print("=" * 60)
                    
                    # 1. –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    page_text = soup.get_text()
                    print(f"üìÑ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞: {len(page_text)} —Å–∏–º–≤–æ–ª–æ–≤")
                    
                    # 2. –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ –º–∞—Ä–∫–µ—Ä—ã
                    markers = [
                        "–¢–∞–±–ª–æ –∏–≥—Ä—ã",
                        "online –≤–∏–¥–µ–æ—Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –∏–≥—Ä –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ",
                        "PullUP",
                        "pull up",
                        "pullup",
                        "–∏–≥—Ä–∞",
                        "–º–∞—Ç—á",
                        "–∫–æ–º–∞–Ω–¥–∞"
                    ]
                    
                    print("\nüéØ –ü–û–ò–°–ö –ö–õ–Æ–ß–ï–í–´–• –ú–ê–†–ö–ï–†–û–í:")
                    for marker in markers:
                        count = page_text.lower().count(marker.lower())
                        if count > 0:
                            print(f"   ‚úÖ '{marker}': –Ω–∞–π–¥–µ–Ω–æ {count} —Ä–∞–∑")
                        else:
                            print(f"   ‚ùå '{marker}': –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    
                    # 3. –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏
                    links = soup.find_all('a', href=True)
                    game_links = []
                    other_links = []
                    
                    for link in links:
                        href = link['href'].lower()
                        if any(k in href for k in ['game.html', 'gameid=', 'match', 'podrobno', 'protocol', 'game']):
                            game_links.append(link['href'])
                        else:
                            other_links.append(link['href'])
                    
                    print(f"\nüîó –°–°–´–õ–ö–ò:")
                    print(f"   –ò–≥—Ä–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏: {len(game_links)}")
                    print(f"   –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏: {len(other_links)}")
                    
                    if game_links:
                        print("\nüéÆ –ò–ì–†–û–í–´–ï –°–°–´–õ–ö–ò:")
                        for i, link in enumerate(game_links[:10], 1):
                            print(f"   {i}. {link}")
                    
                    # 4. –ò—â–µ–º –±–ª–æ–∫–∏ —Å –∏–≥—Ä–∞–º–∏
                    print("\nüìã –ë–õ–û–ö–ò –° –ò–ì–†–ê–ú–ò:")
                    
                    # –ò—â–µ–º div —Å –∫–ª–∞—Å—Å–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–≥—Ä—ã
                    game_blocks = soup.find_all(['div', 'table'], class_=re.compile(r'game|match|tournament|schedule', re.I))
                    print(f"   –ù–∞–π–¥–µ–Ω–æ –±–ª–æ–∫–æ–≤ —Å –∏–≥—Ä–∞–º–∏: {len(game_blocks)}")
                    
                    for i, block in enumerate(game_blocks[:5], 1):
                        block_text = block.get_text()[:200]
                        print(f"   {i}. {block.name}.{block.get('class', [])}: {block_text}...")
                    
                    # 5. –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—ã
                    tables = soup.find_all('table')
                    print(f"\nüìä –¢–ê–ë–õ–ò–¶–´:")
                    print(f"   –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
                    
                    for i, table in enumerate(tables[:3], 1):
                        table_text = table.get_text()[:200]
                        print(f"   {i}. {table.get('class', [])}: {table_text}...")
                    
                    # 6. –ò—â–µ–º —Ç–µ–∫—Å—Ç —Å PullUP
                    pullup_patterns = [
                        r'pull\s*up',
                        r'pullup',
                        r'PullUP',
                        r'Pull UP',
                        r'PULL UP'
                    ]
                    
                    print(f"\nüèÄ –ü–û–ò–°–ö PULLUP:")
                    for pattern in pullup_patterns:
                        matches = re.findall(pattern, page_text, re.IGNORECASE)
                        if matches:
                            print(f"   ‚úÖ '{pattern}': –Ω–∞–π–¥–µ–Ω–æ {len(matches)} —Ä–∞–∑")
                            for match in matches[:3]:
                                # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∫—Ä—É–≥ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                                start = max(0, page_text.lower().find(match.lower()) - 50)
                                end = min(len(page_text), start + 150)
                                context = page_text[start:end]
                                print(f"      –ö–æ–Ω—Ç–µ–∫—Å—Ç: ...{context}...")
                        else:
                            print(f"   ‚ùå '{pattern}': –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    
                    # 7. –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã HTML
                    print(f"\nüèóÔ∏è –°–¢–†–£–ö–¢–£–†–ê HTML:")
                    main_content = soup.find('main') or soup.find('div', id='content') or soup.find('body')
                    if main_content:
                        print(f"   –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç: {main_content.name}")
                        children = list(main_content.children)[:10]
                        for i, child in enumerate(children, 1):
                            if hasattr(child, 'name') and child.name:
                                print(f"   {i}. {child.name}: {child.get('class', [])}")
                    
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {response.status}")
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(debug_letobasket_page())
