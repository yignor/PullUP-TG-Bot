import asyncio
import aiohttp
import re

async def debug_link_mapping():
    url = "http://letobasket.ru/"
    
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            html_content = await response.text()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ HTML
    from bs4 import BeautifulSoup
    soup = BeautifulSoup(html_content, 'html.parser')
    page_text = soup.get_text()
    
    print("=== –ê–ù–ê–õ–ò–ó –°–í–Ø–ó–ò –ò–ì–† –ò –°–°–´–õ–û–ö ===")
    
    # –ò—â–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    date_pattern = r'(\d{2}\.\d{2}\.\d{4})'
    date_match = re.search(date_pattern, page_text)
    if date_match:
        current_date = date_match.group(1)
        print(f"üìÖ –ù–∞–π–¥–µ–Ω–∞ –¥–∞—Ç–∞: {current_date}")
    else:
        print("‚ùå –î–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ game.html
    game_links = re.findall(r'href=["\']([^"\']*game\.html\?gameId=\d+[^"\']*)["\']', html_content, re.IGNORECASE)
    print(f"\nüîó –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ game.html: {len(game_links)}")
    for i, link in enumerate(game_links):
        print(f"  {i+1}. {link}")
    
    # –ò—â–µ–º –∏–≥—Ä—ã PullUP
    pullup_games = [
        {"time": "12.30", "team1": "IT Basket", "team2": "Pull Up-–§–∞—Ä–º"},
        {"time": "14.00", "team1": "–ú–∞–∏–ª–µ –ö–∞—Ä–≥–æ", "team2": "Pull Up"}
    ]
    
    print(f"\n=== –ê–ù–ê–õ–ò–ó –ö–ê–ñ–î–û–ô –ò–ì–†–´ ===")
    
    for i, game in enumerate(pullup_games):
        print(f"\n--- –ò–≥—Ä–∞ {i+1}: {game['time']} {game['team1']} vs {game['team2']} ---")
        
        # –ò—â–µ–º —ç—Ç—É –∏–≥—Ä—É –≤ —Ç–µ–∫—Å—Ç–µ
        game_pattern = rf'{current_date}\s+{game["time"]}[^-]*-\s*{re.escape(game["team1"])}[^-]*-\s*{re.escape(game["team2"])}'
        text_match = re.search(game_pattern, page_text, re.IGNORECASE)
        
        if text_match:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∏–≥—Ä–∞ –≤ —Ç–µ–∫—Å—Ç–µ: {text_match.group(0)}")
            print(f"   –ü–æ–∑–∏—Ü–∏—è –≤ —Ç–µ–∫—Å—Ç–µ: {text_match.start()} - {text_match.end()}")
            
            # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ø–æ–∑–∏—Ü–∏—é –≤ HTML
            text_before_game = page_text[:text_match.start()]
            html_before_game = html_content[:len(text_before_game)]
            
            print(f"   –ü–æ–∑–∏—Ü–∏—è –≤ HTML: {len(html_before_game)}")
            
            # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ game.html –≤ HTML –ø–æ—Å–ª–µ —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
            search_start = len(html_before_game)
            search_end = min(len(html_content), search_start + 2000)
            search_area = html_content[search_start:search_end]
            
            print(f"   –û–±–ª–∞—Å—Ç—å –ø–æ–∏—Å–∫–∞: {search_start} - {search_end} (—Ä–∞–∑–º–µ—Ä: {len(search_area)})")
            
            # –ò—â–µ–º —Å—Å—ã–ª–∫—É game.html –≤ —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏
            game_link_match = re.search(r'href=["\']([^"\']*game\.html\?gameId=\d+[^"\']*)["\']', search_area, re.IGNORECASE)
            if game_link_match:
                found_link = game_link_match.group(1)
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –≤ –æ–±–ª–∞—Å—Ç–∏: {found_link}")
                
                # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —ç—Ç–æ–π —Å—Å—ã–ª–∫–∏ –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ
                for j, link in enumerate(game_links):
                    if link == found_link:
                        print(f"   üìç –≠—Ç–æ —Å—Å—ã–ª–∫–∞ #{j+1} –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ")
                        break
            else:
                print(f"   ‚ùå –°—Å—ã–ª–∫–∞ –≤ –æ–±–ª–∞—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Å—Ç—å HTML –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                print(f"   üîç HTML –≤ –æ–±–ª–∞—Å—Ç–∏ –ø–æ–∏—Å–∫–∞ (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤):")
                print(f"   {search_area[:500]}")
        else:
            print("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–µ–∫—Å—Ç–µ")

if __name__ == "__main__":
    asyncio.run(debug_link_mapping())
