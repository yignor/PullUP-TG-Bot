#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ private_key
"""

import os
import json
import re

def debug_private_key():
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ private_key"""
    print("üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê PRIVATE_KEY")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    google_credentials = os.getenv("GOOGLE_SHEETS_CREDENTIALS")
    
    if not google_credentials:
        print("‚ùå GOOGLE_SHEETS_CREDENTIALS –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–∞—Ä—Å–∏–º JSON —Å —Ç—â–∞—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π
    try:
        # –¢—â–∞—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ—Ç –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        cleaned_credentials = google_credentials
        
        # –£–±–∏—Ä–∞–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        cleaned_credentials = cleaned_credentials.replace('\\n', '\n').replace('\\r', '\r').replace('\\t', '\t')
        
        # –£–±–∏—Ä–∞–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã
        cleaned_credentials = re.sub(r'[\x00-\x1f\x7f-\x9f]', '', cleaned_credentials)
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        cleaned_credentials = cleaned_credentials.strip()
        
        creds_dict = json.loads(cleaned_credentials)
        print("‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON: {e}")
        return
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º private_key
    if 'private_key' not in creds_dict:
        print("‚ùå private_key –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ credentials")
        return
    
    private_key = creds_dict['private_key']
    print(f"\nüìè –î–ª–∏–Ω–∞ private_key: {len(private_key)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç private_key
    print(f"\nüîç –ê–Ω–∞–ª–∏–∑ private_key:")
    print(f"   –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å '-----BEGIN PRIVATE KEY-----': {'‚úÖ' if private_key.startswith('-----BEGIN PRIVATE KEY-----') else '‚ùå'}")
    print(f"   –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ '-----END PRIVATE KEY-----': {'‚úÖ' if private_key.endswith('-----END PRIVATE KEY-----') else '‚ùå'}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü
    print(f"\nüìÑ –ù–∞—á–∞–ª–æ private_key (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤):")
    print(f"   {private_key[:100]}...")
    
    print(f"\nüìÑ –ö–æ–Ω–µ—Ü private_key (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–∏–º–≤–æ–ª–æ–≤):")
    print(f"   ...{private_key[-100:]}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫:")
    contains_escaped_newline = '\\n' in private_key
    contains_real_newline = '\n' in private_key
    print(f"   –°–æ–¥–µ—Ä–∂–∏—Ç '\\n': {'‚úÖ' if contains_escaped_newline else '‚ùå'}")
    print(f"   –°–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫: {'‚úÖ' if contains_real_newline else '‚ùå'}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
    lines = private_key.split('\n')
    print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {len(lines)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
    print(f"\nüìã –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–æ–∫ private_key:")
    for i, line in enumerate(lines[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫
        print(f"   –°—Ç—Ä–æ–∫–∞ {i+1}: {line[:50]}...")
    
    if len(lines) > 10:
        print(f"   ... –∏ –µ—â–µ {len(lines) - 10} —Å—Ç—Ä–æ–∫")
    
    # –ü—Ä–æ–±—É–µ–º –æ—á–∏—Å—Ç–∏—Ç—å private_key
    print(f"\nüßπ –û—á–∏—Å—Ç–∫–∞ private_key...")
    
    # –£–±–∏—Ä–∞–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    cleaned_private_key = private_key.replace('\\n', '\n').replace('\\r', '\r').replace('\\t', '\t')
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    cleaned_private_key = cleaned_private_key.strip()
    
    print(f"   –î–ª–∏–Ω–∞ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {len(cleaned_private_key)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"   –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ: {'‚úÖ' if cleaned_private_key.startswith('-----BEGIN PRIVATE KEY-----') else '‚ùå'}")
    print(f"   –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ: {'‚úÖ' if cleaned_private_key.endswith('-----END PRIVATE KEY-----') else '‚ùå'}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π –∫–ª—é—á
    print(f"\nüìÑ –û—á–∏—â–µ–Ω–Ω—ã–π private_key (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤):")
    print(f"   {cleaned_private_key[:200]}...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª—é—á —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
    cleaned_lines = cleaned_private_key.split('\n')
    print(f"\nüìä –ê–Ω–∞–ª–∏–∑ –æ—á–∏—â–µ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞:")
    print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {len(cleaned_lines)}")
    print(f"   –û–∂–∏–¥–∞–µ—Ç—Å—è –ø—Ä–∏–º–µ—Ä–Ω–æ 28-30 —Å—Ç—Ä–æ–∫ –¥–ª—è RSA –∫–ª—é—á–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    if len(cleaned_lines) >= 3:
        print(f"   –°—Ç—Ä–æ–∫–∞ 1: {cleaned_lines[0]}")
        print(f"   –°—Ç—Ä–æ–∫–∞ 2: {cleaned_lines[1][:20]}...")
        print(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞: {cleaned_lines[-1]}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª—é—á –Ω–µ –æ–±—Ä–µ–∑–∞–Ω
    if len(cleaned_private_key) < 1000:
        print(f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: private_key —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π ({len(cleaned_private_key)} —Å–∏–º–≤–æ–ª–æ–≤)")
        print(f"   –í–æ–∑–º–æ–∂–Ω–æ, –∫–ª—é—á –æ–±—Ä–µ–∑–∞–Ω –≤ GitHub Secrets")
    else:
        print(f"‚úÖ –î–ª–∏–Ω–∞ private_key –≤—ã–≥–ª—è–¥–∏—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")

if __name__ == "__main__":
    debug_private_key()
