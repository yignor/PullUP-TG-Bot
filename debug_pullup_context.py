#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤–æ–∫—Ä—É–≥ PullUP
"""

import asyncio
import aiohttp
from bs4 import BeautifulSoup
import re

async def debug_pullup_context():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∫—Ä—É–≥ PullUP"""
    url = "http://letobasket.ru/"
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    html_content = await response.text()
                    
                    # –ü–∞—Ä—Å–∏–º HTML
                    soup = BeautifulSoup(html_content, 'html.parser')
                    
                    # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    page_text = soup.get_text()
                    
                    print("üîç –ê–ù–ê–õ–ò–ó –ö–û–ù–¢–ï–ö–°–¢–ê PULLUP")
                    print("=" * 50)
                    
                    # –ò—â–µ–º PullUP
                    pullup_pattern = r'PULL UP'
                    matches = re.findall(pullup_pattern, page_text, re.IGNORECASE)
                    
                    print(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(matches)}")
                    
                    for i, match in enumerate(matches[:3], 1):  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3
                        print(f"\nüéÆ –ê–ù–ê–õ–ò–ó PULLUP {i}:")
                        print("-" * 30)
                        
                        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                        match_pos = page_text.lower().find(match.lower())
                        if match_pos != -1:
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                            start_context = max(0, match_pos - 300)
                            end_context = min(len(page_text), match_pos + 400)
                            context = page_text[start_context:end_context]
                            
                            print(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç:")
                            print(context)
                            
                            # –ò—â–µ–º –∫–æ–º–∞–Ω–¥—É —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
                            print(f"\nüîç –ü–û–ò–°–ö –°–û–ü–ï–†–ù–ò–ö–ê:")
                            opponent_patterns = [
                                r'([–ê-–Ø][–∞-—è\s]+)\s+vs\s+([–ê-–Ø][–∞-—è\s]+)',
                                r'([–ê-–Ø][–∞-—è\s]+)\s*[-‚Äî]\s*([–ê-–Ø][–∞-—è\s]+)',
                                r'([–ê-–Ø][–∞-—è\s]+)\s+–ø—Ä–æ—Ç–∏–≤\s+([–ê-–Ø][–∞-—è\s]+)',
                            ]
                            
                            for pattern in opponent_patterns:
                                opp_match = re.search(pattern, context)
                                if opp_match:
                                    team1 = opp_match.group(1).strip()
                                    team2 = opp_match.group(2).strip()
                                    print(f"   ‚úÖ –ü–∞—Ç—Ç–µ—Ä–Ω '{pattern}': {team1} vs {team2}")
                                else:
                                    print(f"   ‚ùå –ü–∞—Ç—Ç–µ—Ä–Ω '{pattern}': –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                            
                            # –ò—â–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã
                            print(f"\nüìä –ü–û–ò–°–ö –°–¢–ê–¢–£–°–ê:")
                            status_match = re.search(r'(\d+)—á', context)
                            if status_match:
                                print(f"   ‚úÖ –°—Ç–∞—Ç—É—Å: {status_match.group(1)}—á")
                            else:
                                print(f"   ‚ùå –°—Ç–∞—Ç—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                            
                            # –ò—â–µ–º –≤—Ä–µ–º—è
                            print(f"\nüïê –ü–û–ò–°–ö –í–†–ï–ú–ï–ù–ò:")
                            time_match = re.search(r'(\d{1,2}[:.]\d{2})', context)
                            if time_match:
                                print(f"   ‚úÖ –í—Ä–µ–º—è: {time_match.group(1)}")
                            else:
                                print(f"   ‚ùå –í—Ä–µ–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                            
                            # –ò—â–µ–º —Å—á–µ—Ç
                            print(f"\nüèÄ –ü–û–ò–°–ö –°–ß–ï–¢–ê:")
                            score_match = re.search(r'(\d+)\s*[-‚Äî]\s*(\d+)', context)
                            if score_match:
                                print(f"   ‚úÖ –°—á–µ—Ç: {score_match.group(1)}:{score_match.group(2)}")
                            else:
                                print(f"   ‚ùå –°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                            
                            # –ò—â–µ–º —Å—Å—ã–ª–∫—É –≤ HTML
                            print(f"\nüîó –ü–û–ò–°–ö –°–°–´–õ–ö–ò:")
                            context_start = html_content.lower().find(context[:50].lower())
                            if context_start != -1:
                                search_start = max(0, context_start - 500)
                                search_end = min(len(html_content), context_start + 1000)
                                search_area = html_content[search_start:search_end]
                                
                                # –ò—â–µ–º "–°–¢–†–ê–ù–ò–¶–ê –ò–ì–†–´"
                                page_link_match = re.search(r'–°–¢–†–ê–ù–ò–¶–ê –ò–ì–†–´[^>]*href=["\']([^"\']+)["\']', search_area, re.IGNORECASE)
                                if page_link_match:
                                    print(f"   ‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞–π–¥–µ–Ω–∞: {page_link_match.group(1)}")
                                else:
                                    print(f"   ‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                                    
                                    # –ò—â–µ–º –ª—é–±—ã–µ —Å—Å—ã–ª–∫–∏
                                    all_links = re.findall(r'href=["\']([^"\']+)["\']', search_area)
                                    if all_links:
                                        print(f"   üìã –ù–∞–π–¥–µ–Ω–æ {len(all_links)} —Å—Å—ã–ª–æ–∫ –≤ –æ–±–ª–∞—Å—Ç–∏:")
                                        for link in all_links[:5]:
                                            print(f"      - {link}")
                            else:
                                print(f"   ‚ùå –ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ HTML")
                    
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {response.status}")
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(debug_pullup_context())
