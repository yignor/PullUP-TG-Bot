#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ fbp.ru –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö API –¥–ª—è –±–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import aiohttp
import json
import re
from bs4 import BeautifulSoup

class DetailedFBPChecker:
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ API –Ω–∞ fbp.ru"""
    
    def __init__(self):
        self.base_url = "https://www.fbp.ru"
        self.target_url = "https://www.fbp.ru/turniryi/letnyaya-liga.html"
        self.found_apis = []
    
    async def check_specific_apis(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ API –¥–ª—è –±–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        print("üèÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö API –¥–ª—è –±–∞—Å–∫–µ—Ç–±–æ–ª–∞...")
        
        # –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö API endpoints –¥–ª—è –±–∞—Å–∫–µ—Ç–±–æ–ª–∞
        basketball_apis = [
            '/api/letnyaya-liga',
            '/api/summer-league',
            '/api/tournaments',
            '/api/games',
            '/api/matches',
            '/api/results',
            '/api/schedule',
            '/api/teams',
            '/api/standings',
            '/api/statistics',
            '/data/letnyaya-liga.json',
            '/data/summer-league.json',
            '/data/tournaments.json',
            '/data/games.json',
            '/data/matches.json',
            '/data/results.json',
            '/data/schedule.json',
            '/json/letnyaya-liga',
            '/json/summer-league',
            '/json/tournaments',
            '/json/games',
            '/json/matches',
            '/json/results',
            '/json/schedule',
            '/v1/letnyaya-liga',
            '/v1/summer-league',
            '/v1/tournaments',
            '/v1/games',
            '/v1/matches',
            '/v1/results',
            '/v1/schedule',
        ]
        
        async with aiohttp.ClientSession() as session:
            for api in basketball_apis:
                url = f"{self.base_url}{api}"
                try:
                    async with session.get(url, timeout=5) as response:
                        if response.status == 200:
                            content_type = response.headers.get('content-type', '')
                            content = await response.text()
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ API
                            if self._is_valid_api_response(content, content_type):
                                self.found_apis.append({
                                    'url': url,
                                    'status': response.status,
                                    'content_type': content_type,
                                    'content': content[:200] + '...' if len(content) > 200 else content
                                })
                                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω API: {url}")
                                print(f"      üìä –¢–∏–ø: {content_type}")
                                print(f"      üìÑ –î–∞–Ω–Ω—ã–µ: {content[:100]}...")
                
                except Exception as e:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö endpoints
    
    def _is_valid_api_response(self, content, content_type):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–º API"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º JSON
        if 'json' in content_type:
            try:
                data = json.loads(content)
                return isinstance(data, (dict, list)) and len(str(data)) > 10
            except:
                pass
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º XML
        if 'xml' in content_type:
            return '<' in content and '>' in content
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        basketball_keywords = [
            'game', 'match', 'team', 'score', 'result',
            '–∏–≥—Ä–∞', '–º–∞—Ç—á', '–∫–æ–º–∞–Ω–¥–∞', '—Å—á–µ—Ç', '—Ä–µ–∑—É–ª—å—Ç–∞—Ç',
            'letnyaya', 'liga', 'summer', 'league'
        ]
        
        content_lower = content.lower()
        return any(keyword in content_lower for keyword in basketball_keywords)
    
    async def check_dynamic_content(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        print("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(self.target_url) as response:
                    if response.status == 200:
                        content = await response.text()
                        soup = BeautifulSoup(content, 'html.parser')
                        
                        # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
                        dynamic_elements = soup.find_all(['div', 'table', 'ul'], {
                            'class': re.compile(r'(ajax|dynamic|load|content|data)', re.I)
                        })
                        
                        if dynamic_elements:
                            print(f"   üîÑ –ù–∞–π–¥–µ–Ω–æ {len(dynamic_elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π")
                            for element in dynamic_elements[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                                print(f"      - {element.name}: {element.get('class', [])}")
                        
                        # –ò—â–µ–º data-–∞—Ç—Ä–∏–±—É—Ç—ã
                        data_attrs = soup.find_all(attrs={'data-url': True})
                        if data_attrs:
                            print(f"   üìä –ù–∞–π–¥–µ–Ω–æ {len(data_attrs)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å data-url")
                            for attr in data_attrs[:3]:
                                print(f"      - {attr.name}: {attr.get('data-url')}")
        
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
    
    async def check_network_requests(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã"""
        print("üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ endpoints –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
        possible_endpoints = [
            '/api/tournaments/letnyaya-liga',
            '/api/tournaments/summer-league',
            '/api/competitions/letnyaya-liga',
            '/api/competitions/summer-league',
            '/api/leagues/letnyaya-liga',
            '/api/leagues/summer-league',
            '/api/events/letnyaya-liga',
            '/api/events/summer-league',
            '/api/sports/basketball/letnyaya-liga',
            '/api/sports/basketball/summer-league',
        ]
        
        async with aiohttp.ClientSession() as session:
            for endpoint in possible_endpoints:
                url = f"{self.base_url}{endpoint}"
                try:
                    async with session.get(url, timeout=3) as response:
                        if response.status == 200:
                            content_type = response.headers.get('content-type', '')
                            if 'json' in content_type or 'xml' in content_type:
                                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω endpoint: {url}")
                                print(f"      üìä –¢–∏–ø: {content_type}")
                except:
                    pass
    
    def print_results(self):
        """–í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        print("\n" + "="*60)
        print("üèÄ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ï–¢–ê–õ–¨–ù–û–ô –ü–†–û–í–ï–†–ö–ò FBP.RU")
        print("="*60)
        
        if self.found_apis:
            print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(self.found_apis)} API endpoints:")
            for api in self.found_apis:
                print(f"   üîó {api['url']}")
                print(f"      üìä –°—Ç–∞—Ç—É—Å: {api['status']}")
                print(f"      üìÑ –¢–∏–ø: {api['content_type']}")
                print(f"      üìù –î–∞–Ω–Ω—ã–µ: {api['content']}")
                print()
        else:
            print("\n‚ùå API endpoints –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        if self.found_apis:
            print("   ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ API endpoints")
            print("   üìä –û–Ω–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            print("   üöÄ –≠—Ç–æ –±—É–¥–µ—Ç –Ω–∞–º–Ω–æ–≥–æ –ø—Ä–æ—â–µ, —á–µ–º –ø–∞—Ä—Å–∏–Ω–≥ HTML")
        else:
            print("   ‚ùå API –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ä—Å–∏–Ω–≥ HTML")
            print("   üìù –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Å—Ç–∞—Ç—å—Å—è —Å letobasket.ru")
            print("   üîÑ –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å fbp.ru –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫")

async def main():
    checker = DetailedFBPChecker()
    await checker.check_specific_apis()
    await checker.check_dynamic_content()
    await checker.check_network_requests()
    checker.print_results()

if __name__ == "__main__":
    asyncio.run(main())
