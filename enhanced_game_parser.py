#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –∏–≥—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç —Å API –Ω–∞–ø—Ä—è–º—É—é
"""

import asyncio
import aiohttp
import json
import re
from typing import Dict, List, Optional, Any
from datetime import datetime
from datetime_utils import get_moscow_time

class EnhancedGameParser:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –∏–≥—Ä, —Ä–∞–±–æ—Ç–∞—é—â–∏–π —Å API"""
    
    def __init__(self):
        self.session = None
    
    async def __aenter__(self):
        self.session = aiohttp.ClientSession()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()
    
    def extract_game_id_from_url(self, game_url: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç gameId –∏–∑ URL –∏–≥—Ä—ã"""
        try:
            # –ò—â–µ–º gameId –≤ URL
            match = re.search(r'gameId=(\d+)', game_url)
            if match:
                return match.group(1)
            
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
            match = re.search(r'/(\d+)/?$', game_url)
            if match:
                return match.group(1)
            
            return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è gameId: {e}")
            return None
    
    def extract_api_url_from_url(self, game_url: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç API URL –∏–∑ URL –∏–≥—Ä—ã"""
        try:
            # –ò—â–µ–º apiUrl –≤ URL
            match = re.search(r'apiUrl=([^&]+)', game_url)
            if match:
                return match.group(1)
            
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º reg.infobasket.su
            return "https://reg.infobasket.su"
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è API URL: {e}")
            return "https://reg.infobasket.su"
    
    async def get_game_data_from_api(self, game_id: str, api_url: str = "https://reg.infobasket.su") -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã —á–µ—Ä–µ–∑ API"""
        try:
            if not self.session:
                return None
            
            # URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã
            game_api_url = f"{api_url}/Widget/GamePage/{game_id}"
            online_api_url = f"{api_url}/Widget/GetOnline/{game_id}"
            
            print(f"üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã —á–µ—Ä–µ–∑ API:")
            print(f"   Game API: {game_api_url}")
            print(f"   Online API: {online_api_url}")
            
            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã –∏ –æ–Ω–ª–∞–π–Ω –¥–∞–Ω–Ω—ã–µ
            async with self.session.get(game_api_url, params={'format': 'json', 'lang': 'ru'}) as game_response, \
                     self.session.get(online_api_url, params={'format': 'json', 'lang': 'ru'}) as online_response:
                
                if game_response.status == 200 and online_response.status == 200:
                    game_data = await game_response.json()
                    online_data = await online_response.json()
                    
                    print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
                    print(f"   Game data keys: {list(game_data.keys())}")
                    print(f"   Online data keys: {list(online_data.keys())}")
                    
                    return {
                        'game': game_data,
                        'online': online_data
                    }
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ API: Game={game_response.status}, Online={online_response.status}")
                    return None
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API: {e}")
            return None
    
    def parse_dotnet_date(self, date_str: str) -> Optional[str]:
        """–ü–∞—Ä—Å–∏—Ç .NET DateTime —Ñ–æ—Ä–º–∞—Ç"""
        try:
            if not date_str or not isinstance(date_str, str):
                return None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º timestamp –∏–∑ /Date(timestamp)/
            match = re.search(r'/Date\((\d+)\)/', date_str)
            if match:
                timestamp = int(match.group(1)) / 1000  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–µ–∫—É–Ω–¥—ã
                dt = datetime.fromtimestamp(timestamp)
                return dt.strftime('%d.%m.%Y')
            
            return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã: {e}")
            return None
    
    def parse_dotnet_time(self, time_str: str) -> Optional[str]:
        """–ü–∞—Ä—Å–∏—Ç .NET DateTime —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            if not time_str or not isinstance(time_str, str):
                return None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º timestamp –∏–∑ /Date(timestamp)/
            match = re.search(r'/Date\((\d+)\)/', time_str)
            if match:
                timestamp = int(match.group(1)) / 1000  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–µ–∫—É–Ω–¥—ã
                dt = datetime.fromtimestamp(timestamp)
                return dt.strftime('%H:%M')
            
            return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏: {e}")
            return None

    def parse_game_info(self, api_data: Dict) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ –∏–∑ API –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if not api_data or 'game' not in api_data or 'online' not in api_data:
                return None
            
            game_data = api_data['game']
            online_data = api_data['online']
            
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            parsed_date = self.parse_dotnet_date(game_data.get('GameDate', ''))
            parsed_time = self.parse_dotnet_time(game_data.get('GameTime', ''))
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            game_info = {
                'game_id': game_data.get('GameID'),
                'status': game_data.get('GameStatus', 0),
                'date': parsed_date or game_data.get('GameDate', ''),
                'time': parsed_time or game_data.get('GameTime', ''),
                'venue': game_data.get('Arena', {}).get('ArenaNameRu', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                'region': game_data.get('Region', {}).get('RegionNameRu', ''),
                'competition': game_data.get('CompNameRu', ''),
                'league': game_data.get('LeagueNameRu', ''),
                'is_finished': game_data.get('GameStatus', 0) == 1,  # 1 = –∑–∞–≤–µ—Ä—à–µ–Ω–∞
                'is_online': online_data.get('IsOnline', False),
                'teams': [],
                'score': {},
                'quarters': [],
                'result': None
            }
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–∞—Ö
            teams_data = None
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–º–∞–Ω–¥–∞—Ö
            if 'GameTeams' in online_data and len(online_data['GameTeams']) >= 2:
                teams_data = online_data['GameTeams']
            elif 'GameTeams' in game_data and len(game_data['GameTeams']) >= 2:
                teams_data = game_data['GameTeams']
            
            if teams_data:
                team1 = teams_data[0]
                team2 = teams_data[1]
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
                team1_name = '–ö–æ–º–∞–Ω–¥–∞ 1'
                team2_name = '–ö–æ–º–∞–Ω–¥–∞ 2'
                
                if 'TeamName' in team1:
                    team1_name = team1['TeamName'].get('CompTeamNameRu', team1['TeamName'].get('CompTeamNameEn', '–ö–æ–º–∞–Ω–¥–∞ 1'))
                elif 'CompTeamNameRu' in team1:
                    team1_name = team1['CompTeamNameRu']
                
                if 'TeamName' in team2:
                    team2_name = team2['TeamName'].get('CompTeamNameRu', team2['TeamName'].get('CompTeamNameEn', '–ö–æ–º–∞–Ω–¥–∞ 2'))
                elif 'CompTeamNameRu' in team2:
                    team2_name = team2['CompTeamNameRu']
                
                game_info['teams'] = [
                    {
                        'id': team1.get('TeamID'),
                        'name': team1_name,
                        'short_name': team1.get('TeamName', {}).get('CompTeamShortNameRu', '–ö1'),
                        'score': team1.get('Score', 0)
                    },
                    {
                        'id': team2.get('TeamID'),
                        'name': team2_name,
                        'short_name': team2.get('TeamName', {}).get('CompTeamShortNameRu', '–ö2'),
                        'score': team2.get('Score', 0)
                    }
                ]
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—á–µ—Ç
                game_info['score'] = {
                    'team1': team1.get('Score', 0),
                    'team2': team2.get('Score', 0),
                    'total': f"{team1.get('Score', 0)}:{team2.get('Score', 0)}"
                }
                
                print(f"üèÄ –ö–æ–º–∞–Ω–¥—ã –Ω–∞–π–¥–µ–Ω—ã: {team1_name} vs {team2_name}")
                print(f"üìä –°—á–µ—Ç: {team1.get('Score', 0)}:{team2.get('Score', 0)}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–µ—Ç–≤–µ—Ä—Ç—è—Ö
            quarters = []
            if 'OnlinePeriods' in online_data and online_data['OnlinePeriods']:
                for period in online_data['OnlinePeriods']:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –æ —Å—á–µ—Ç–µ –≤ –ø–µ—Ä–∏–æ–¥–µ
                    score_a = period.get('ScoreA', 0)
                    score_b = period.get('ScoreB', 0)
                    
                    # –ï—Å–ª–∏ —Å—á–µ—Ç –µ—Å—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
                    if score_a > 0 or score_b > 0:
                        quarters.append({
                            'period': period.get('Period'),
                            'score1': score_a,
                            'score2': score_b,
                            'total': f"{score_a}:{score_b}"
                        })
            
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ —á–µ—Ç–≤–µ—Ä—Ç—è—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            if not quarters:
                quarters = ['–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã']
            
            game_info['quarters'] = quarters
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥ Pull Up
            if game_info['teams'] and game_info['is_finished']:
                team1_name = game_info['teams'][0]['name']
                team2_name = game_info['teams'][1]['name']
                
                print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã: '{team1_name}' vs '{team2_name}'")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ Pull Up (–±–æ–ª–µ–µ –≥–∏–±–∫–∏–π –ø–æ–∏—Å–∫)
                pull_up_team = None
                opponent_team = None
                
                team1_lower = team1_name.lower()
                team2_lower = team2_name.lower()
                
                if 'pull' in team1_lower or '—Ñ–∞—Ä–º' in team1_lower:
                    pull_up_team = game_info['teams'][0]
                    opponent_team = game_info['teams'][1]
                    print(f"‚úÖ Pull Up –∫–æ–º–∞–Ω–¥–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ team1: {team1_name}")
                elif 'pull' in team2_lower or '—Ñ–∞—Ä–º' in team2_lower:
                    pull_up_team = game_info['teams'][1]
                    opponent_team = game_info['teams'][0]
                    print(f"‚úÖ Pull Up –∫–æ–º–∞–Ω–¥–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ team2: {team2_name}")
                
                if pull_up_team and opponent_team:
                    if pull_up_team['score'] > opponent_team['score']:
                        game_info['result'] = '–ø–æ–±–µ–¥–∞'
                    elif pull_up_team['score'] < opponent_team['score']:
                        game_info['result'] = '–ø–æ—Ä–∞–∂–µ–Ω–∏–µ'
                    else:
                        game_info['result'] = '–Ω–∏—á—å—è'
                    
                    game_info['our_team'] = pull_up_team['name']
                    game_info['opponent'] = opponent_team['name']
                    game_info['our_score'] = pull_up_team['score']
                    game_info['opponent_score'] = opponent_team['score']
                    
                    print(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω: {game_info['result']}")
                    print(f"üìä –°—á–µ—Ç: {game_info['our_score']}:{game_info['opponent_score']}")
                else:
                    print(f"‚ùå Pull Up –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            return game_info
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã: {e}")
            return None
    
    async def parse_game_from_url(self, game_url: str) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏—Ç –∏–≥—Ä—É –ø–æ URL"""
        try:
            print(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ –∏–≥—Ä—ã –ø–æ URL: {game_url}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º gameId –∏ API URL
            game_id = self.extract_game_id_from_url(game_url)
            api_url = self.extract_api_url_from_url(game_url)
            
            if not game_id:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å gameId –∏–∑ URL")
                return None
            
            print(f"üìä GameId: {game_id}")
            print(f"üåê API URL: {api_url}")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API
            api_data = await self.get_game_data_from_api(game_id, api_url)
            if not api_data:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API")
                return None
            
            # –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ
            game_info = self.parse_game_info(api_data)
            if not game_info:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã")
                return None
            
            print(f"‚úÖ –ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–∞:")
            print(f"   –ö–æ–º–∞–Ω–¥—ã: {game_info.get('our_team', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} vs {game_info.get('opponent', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            print(f"   –°—á–µ—Ç: {game_info.get('our_score', 0)}:{game_info.get('opponent_score', 0)}")
            print(f"   –°—Ç–∞—Ç—É—Å: {'–ó–∞–≤–µ—Ä—à–µ–Ω–∞' if game_info.get('is_finished') else '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'}")
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {game_info.get('result', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            
            return game_info
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–≥—Ä—ã: {e}")
            return None

async def test_parser():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä—Å–µ—Ä –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–π –∏–≥—Ä–µ"""
    test_url = "http://letobasket.ru/game.html?gameId=934356&apiUrl=https://reg.infobasket.su&lang=ru"
    
    async with EnhancedGameParser() as parser:
        result = await parser.parse_game_from_url(test_url)
        
        if result:
            print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–ê–†–°–ò–ù–ì–ê:")
            print(f"   üèÄ –ö–æ–º–∞–Ω–¥—ã: {result.get('our_team', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} vs {result.get('opponent', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            print(f"   üìä –°—á–µ—Ç: {result.get('our_score', 0)}:{result.get('opponent_score', 0)}")
            print(f"   üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result.get('result', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            print(f"   üìà –ß–µ—Ç–≤–µ—Ä—Ç–∏: {[q['total'] for q in result.get('quarters', [])]}")
            print(f"   üìÖ –î–∞—Ç–∞: {result.get('date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            print(f"   üïê –í—Ä–µ–º—è: {result.get('time', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            print(f"   üìç –ú–µ—Å—Ç–æ: {result.get('venue', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            print(f"   üèÜ –°—Ç–∞—Ç—É—Å: {'–ó–∞–≤–µ—Ä—à–µ–Ω–∞' if result.get('is_finished') else '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'}")
        else:
            print(f"‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è")

if __name__ == "__main__":
    asyncio.run(test_parser())
