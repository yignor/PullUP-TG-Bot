#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏–º–µ–Ω –≤ Google Sheets
–†–∞–±–æ—Ç–∞–µ—Ç —Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã
"""

import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def fix_names_structure():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–º–µ–Ω –≤ Google Sheets"""
    print("üîÑ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–¢–†–£–ö–¢–£–†–´ –ò–ú–ï–ù –í GOOGLE SHEETS")
    print("=" * 60)
    
    try:
        import gspread
        from google.oauth2.service_account import Credentials
        import json
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Google Sheets
        creds_dict = json.loads(os.getenv("GOOGLE_SHEETS_CREDENTIALS"))
        creds = Credentials.from_service_account_info(creds_dict, scopes=['https://www.googleapis.com/auth/spreadsheets'])
        gc = gspread.authorize(creds)
        
        spreadsheet = gc.open_by_key(os.getenv("SPREADSHEET_ID"))
        players_sheet = spreadsheet.worksheet("–ò–≥—Ä–æ–∫–∏")
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets —É—Å–ø–µ—à–Ω–æ")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        all_data = players_sheet.get_all_values()
        print(f"üìä –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ: {len(all_data)}")
        
        if len(all_data) < 2:
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ")
            return False
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers = all_data[0]
        print(f"\nüìã –ó–ê–ì–û–õ–û–í–ö–ò –¢–ê–ë–õ–ò–¶–´:")
        for i, header in enumerate(headers):
            print(f"   {i+1}. {header}")
        
        # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å—ã —Å—Ç–æ–ª–±—Ü–æ–≤
        name_col_idx = None
        surname_col_idx = None
        
        for i, header in enumerate(headers):
            if '–∏–º—è' in header.lower():
                name_col_idx = i
            elif '—Ñ–∞–º–∏–ª–∏—è' in header.lower():
                surname_col_idx = i
        
        print(f"\nüîç –ù–ê–ô–î–ï–ù–ù–´–ï –°–¢–û–õ–ë–¶–´:")
        print(f"   –ò–ú–Ø: —Å—Ç–æ–ª–±–µ—Ü {name_col_idx + 1 if name_col_idx is not None else '–Ω–µ –Ω–∞–π–¥–µ–Ω'}")
        print(f"   –§–ê–ú–ò–õ–ò–Ø: —Å—Ç–æ–ª–±–µ—Ü {surname_col_idx + 1 if surname_col_idx is not None else '–Ω–µ –Ω–∞–π–¥–µ–Ω'}")
        
        if name_col_idx is None:
            print("‚ùå –°—Ç–æ–ª–±–µ—Ü '–ò–ú–Ø' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫
        print(f"\nüìã –ü–ï–†–í–´–ï 5 –°–¢–†–û–ö (—Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ):")
        for i, row in enumerate(all_data[1:6], 1):
            name = row[name_col_idx] if name_col_idx < len(row) else ''
            surname = row[surname_col_idx] if surname_col_idx is not None and surname_col_idx < len(row) else ''
            print(f"   {i}. –ò–ú–Ø: '{name}' | –§–ê–ú–ò–õ–ò–Ø: '{surname}'")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏
        print(f"\nüìù –û–ë–†–ê–ë–û–¢–ö–ê –°–¢–†–û–ö:")
        updated_count = 0
        
        for row_idx, row in enumerate(all_data[1:], 2):  # –ù–∞—á–∏–Ω–∞–µ–º —Å–æ 2-–π —Å—Ç—Ä–æ–∫–∏ (–ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
            if len(row) <= name_col_idx:
                continue
                
            current_name = row[name_col_idx]
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∏–º–µ–Ω–∞
            if not current_name or current_name.strip() == '':
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Ä–∞–∑–¥–µ–ª—è—Ç—å
            if ' ' in current_name:
                # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –ø–µ—Ä–≤–æ–º—É –ø—Ä–æ–±–µ–ª—É
                parts = current_name.split(' ', 1)
                surname_part = parts[0].strip()
                first_name_part = parts[1].strip()
                
                print(f"   –°—Ç—Ä–æ–∫–∞ {row_idx}: '{current_name}' ‚Üí –§–∞–º–∏–ª–∏—è: '{surname_part}', –ò–º—è: '{first_name_part}'")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è (—É–±–∏—Ä–∞–µ–º —Ñ–∞–º–∏–ª–∏—é)
                players_sheet.update_cell(row_idx, name_col_idx + 1, first_name_part)
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–æ–ª–±–µ—Ü —Ñ–∞–º–∏–ª–∏–∏, –∑–∞–ø–æ–ª–Ω—è–µ–º –µ–≥–æ
                if surname_col_idx is not None:
                    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω–∞—è
                    while len(row) <= surname_col_idx:
                        row.append('')
                    
                    players_sheet.update_cell(row_idx, surname_col_idx + 1, surname_part)
                
                updated_count += 1
            else:
                print(f"   –°—Ç—Ä–æ–∫–∞ {row_idx}: '{current_name}' ‚Üí –ù–µ–ª—å–∑—è —Ä–∞–∑–¥–µ–ª–∏—Ç—å (–Ω–µ—Ç –ø—Ä–æ–±–µ–ª–∞)")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –û–ë–†–ê–ë–û–¢–ö–ò:")
        print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: {updated_count}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        updated_data = players_sheet.get_all_values()
        print(f"\nüìã –ü–ï–†–í–´–ï 5 –°–¢–†–û–ö (–ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è):")
        for i, row in enumerate(updated_data[1:6], 1):
            name = row[name_col_idx] if name_col_idx < len(row) else ''
            surname = row[surname_col_idx] if surname_col_idx is not None and surname_col_idx < len(row) else ''
            print(f"   {i}. –ò–ú–Ø: '{name}' | –§–ê–ú–ò–õ–ò–Ø: '{surname}'")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        return False

def show_instructions():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ç–∞–±–ª–∏—Ü—ã"""
    print("\nüìã –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –°–¢–†–£–ö–¢–£–†–ï –¢–ê–ë–õ–ò–¶–´")
    print("=" * 60)
    print("–û–∂–∏–¥–∞–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç–æ–ª–±—Ü–æ–≤:")
    print("   A. –ò–ú–Ø (—Ç–æ–ª—å–∫–æ –∏–º—è, –±–µ–∑ —Ñ–∞–º–∏–ª–∏–∏)")
    print("   B. –§–ê–ú–ò–õ–ò–Ø (—Ç–æ–ª—å–∫–æ —Ñ–∞–º–∏–ª–∏—è)")
    print("   C. –ù–∏–∫")
    print("   D. Telegram ID")
    print("   E. –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è")
    print("   F. –°—Ç–∞—Ç—É—Å")
    print("   G. –ö–æ–º–∞–Ω–¥–∞")
    print("   H. –î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
    print("   I. –ü—Ä–∏–º–µ—á–∞–Ω–∏—è")
    print()
    print("üîß –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
    print("   - –ù–∞—Ö–æ–¥–∏—Ç —Å—Ç–æ–ª–±—Ü—ã '–ò–ú–Ø' –∏ '–§–ê–ú–ò–õ–ò–Ø'")
    print("   - –†–∞–∑–¥–µ–ª—è–µ—Ç –ø–æ–ª–Ω—ã–µ –∏–º–µ–Ω–∞ –ø–æ –ø–µ—Ä–≤–æ–º—É –ø—Ä–æ–±–µ–ª—É")
    print("   - –ü–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ ‚Üí –§–ê–ú–ò–õ–ò–Ø")
    print("   - –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ ‚Üí –ò–ú–Ø")
    print("   - –ü—Ä–∏–º–µ—Ä: '–®–∞—Ö–º–∞–Ω–æ–≤ –ú–∞–∫—Å–∏–º' ‚Üí –§–∞–º–∏–ª–∏—è: '–®–∞—Ö–º–∞–Ω–æ–≤', –ò–º—è: '–ú–∞–∫—Å–∏–º'")

if __name__ == "__main__":
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    show_instructions()
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    success = fix_names_structure()
    
    if success:
        print("\nüéâ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–º–µ–Ω –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        print("–¢–µ–ø–µ—Ä—å –∏–º–µ–Ω–∞ –∏ —Ñ–∞–º–∏–ª–∏–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏–º–µ–Ω")
