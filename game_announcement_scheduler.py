#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–æ–Ω—Å–æ–≤ –∏–≥—Ä
- –°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á–∏ –Ω–∞ –∞–Ω–æ–Ω—Å –≤ –¥–µ–Ω—å –∏–≥—Ä—ã
- –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å —Å–∏—Å—Ç–µ–º–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
"""

import os
import asyncio
import datetime
import json
from typing import Dict, List, Optional
from dotenv import load_dotenv
from telegram import Bot

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
GAMES_TOPIC_ID = os.getenv("GAMES_TOPIC_ID", "1282")
ANNOUNCEMENTS_TOPIC_ID = os.getenv("ANNOUNCEMENTS_TOPIC_ID", "26")

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
GAME_ANNOUNCEMENTS_FILE = "game_announcements.json"
GAME_POLLS_HISTORY_FILE = "game_polls_history.json"

def get_moscow_time():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ú–æ—Å–∫–≤—ã"""
    moscow_tz = datetime.timezone(datetime.timedelta(hours=3))
    return datetime.datetime.now(moscow_tz)

def load_game_polls_history() -> Dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤"""
    try:
        if os.path.exists(GAME_POLLS_HISTORY_FILE):
            with open(GAME_POLLS_HISTORY_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø—Ä–æ—Å–æ–≤: {e}")
    return {}

def load_game_announcements() -> Dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–Ω–æ–Ω—Å—ã –∏–≥—Ä"""
    try:
        if os.path.exists(GAME_ANNOUNCEMENTS_FILE):
            with open(GAME_ANNOUNCEMENTS_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–æ–Ω—Å–æ–≤ –∏–≥—Ä: {e}")
    return {}

def save_game_announcements(announcements: Dict):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–Ω–æ–Ω—Å—ã –∏–≥—Ä"""
    try:
        with open(GAME_ANNOUNCEMENTS_FILE, 'w', encoding='utf-8') as f:
            json.dump(announcements, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–æ–Ω—Å–æ–≤ –∏–≥—Ä: {e}")

def create_announcement_key(game_info: Dict) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∞–Ω–æ–Ω—Å–∞ –∏–≥—Ä—ã"""
    return f"{game_info['date']}_{game_info['team1']}_{game_info['team2']}"

class GameAnnouncementScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–Ω–æ–Ω—Å–æ–≤ –∏–≥—Ä"""
    
    def __init__(self):
        self.bot = None
        self.game_polls = load_game_polls_history()
        self.announcements = load_game_announcements()
        self._init_bot()
    
    def _init_bot(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        if BOT_TOKEN:
            self.bot = Bot(token=BOT_TOKEN)
            print("‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        else:
            print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    def should_create_announcement_task(self, game_info: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –Ω–∞ –∞–Ω–æ–Ω—Å"""
        announcement_key = create_announcement_key(game_info)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ –∑–∞–¥–∞—á—É –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã
        if announcement_key in self.announcements:
            print(f"‚è≠Ô∏è –ó–∞–¥–∞—á–∞ –Ω–∞ –∞–Ω–æ–Ω—Å –¥–ª—è –∏–≥—Ä—ã {announcement_key} —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –∏–≥—Ä—ã
        try:
            game_date = datetime.datetime.strptime(game_info['date'], '%d.%m.%Y').date()
            now = get_moscow_time().date()
            days_until_game = (game_date - now).days
            
            if days_until_game < 0:
                print(f"‚è∞ –ò–≥—Ä–∞ {game_info['date']} —É–∂–µ –ø—Ä–æ—à–ª–∞")
                return False
            elif days_until_game > 30:
                print(f"‚è∞ –ò–≥—Ä–∞ {game_info['date']} —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ (—á–µ—Ä–µ–∑ {days_until_game} –¥–Ω–µ–π)")
                return False
            
            print(f"‚úÖ –ò–≥—Ä–∞ {game_info['date']} –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –Ω–∞ –∞–Ω–æ–Ω—Å (—á–µ—Ä–µ–∑ {days_until_game} –¥–Ω–µ–π)")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—Ç—ã –∏–≥—Ä—ã: {e}")
            return False
    
    async def create_announcement_task(self, game_info: Dict) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á—É –Ω–∞ –∞–Ω–æ–Ω—Å –∏–≥—Ä—ã"""
        if not self.bot or not CHAT_ID:
            print("‚ùå –ë–æ—Ç –∏–ª–∏ CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return False
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—à—É –∫–æ–º–∞–Ω–¥—É –∏ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
            team1 = game_info.get('team1', '')
            team2 = game_info.get('team2', '')
            
            if "pull" in team1.lower() and "up" in team1.lower():
                our_team = team1
                opponent = team2
            elif "pull" in team2.lower() and "up" in team2.lower():
                our_team = team2
                opponent = team1
            else:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ PullUP –≤ –∏–≥—Ä–µ")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
            game_date = datetime.datetime.strptime(game_info['date'], '%d.%m.%Y')
            days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
            day_of_week = days[game_date.weekday()]
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-–∑–∞–¥–∞—á—É
            task_message = f"""üèÄ –ó–ê–î–ê–ß–ê –ù–ê –ê–ù–û–ù–° –ò–ì–†–´

üìÖ –î–∞—Ç–∞: {game_info['date']} ({day_of_week})
üïê –í—Ä–µ–º—è: {game_info['time'].split()[1]}
üìç –ú–µ—Å—Ç–æ: {game_info['venue']}
üë• –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞: {our_team}
‚öîÔ∏è –°–æ–ø–µ—Ä–Ω–∏–∫: {opponent}

ÔøΩÔøΩ –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:
1. –°–æ–∑–¥–∞—Ç—å –∞–Ω–æ–Ω—Å –∏–≥—Ä—ã –≤ —Ç–æ–ø–∏–∫–µ –∞–Ω–æ–Ω—Å–æ–≤
2. –£–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –∏ –º–µ—Å—Ç–æ —Å–±–æ—Ä–∞
3. –ù–∞–ø–æ–º–Ω–∏—Ç—å –æ —Ñ–æ—Ä–º–µ –∏ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–µ
4. –î–æ–±–∞–≤–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

‚è∞ –ó–∞–¥–∞—á–∞ –Ω–∞: {game_info['date']} –≤ 09:00 –ú–°–ö"""
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ —Ç–æ–ø–∏–∫ –∞–Ω–æ–Ω—Å–æ–≤
            message_thread_id = int(ANNOUNCEMENTS_TOPIC_ID) if ANNOUNCEMENTS_TOPIC_ID else None
            
            sent_message = await self.bot.send_message(
                chat_id=int(CHAT_ID),
                text=task_message,
                message_thread_id=message_thread_id
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
            announcement_info = {
                'message_id': sent_message.message_id,
                'game_info': game_info,
                'our_team': our_team,
                'opponent': opponent,
                'day_of_week': day_of_week,
                'task_date': game_info['date'],
                'created_date': get_moscow_time().isoformat(),
                'chat_id': CHAT_ID,
                'topic_id': ANNOUNCEMENTS_TOPIC_ID,
                'status': 'scheduled'
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            announcement_key = create_announcement_key(game_info)
            self.announcements[announcement_key] = announcement_info
            save_game_announcements(self.announcements)
            
            print(f"‚úÖ –ó–∞–¥–∞—á–∞ –Ω–∞ –∞–Ω–æ–Ω—Å –∏–≥—Ä—ã —Å–æ–∑–¥–∞–Ω–∞")
            print(f"üìä ID —Å–æ–æ–±—â–µ–Ω–∏—è: {announcement_info['message_id']}")
            print(f"üèÄ –ò–≥—Ä–∞: {our_team} vs {opponent}")
            print(f"üìÖ –î–∞—Ç–∞: {game_info['date']}")
            print(f"üïê –í—Ä–µ–º—è: {game_info['time'].split()[1]}")
            print(f"ÔøΩÔøΩ –ú–µ—Å—Ç–æ: {game_info['venue']}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –Ω–∞ –∞–Ω–æ–Ω—Å: {e}")
            return False
    
    def process_new_games(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –∏–≥—Ä—ã –∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á–∏ –Ω–∞ –∞–Ω–æ–Ω—Å"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∏–≥—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á –Ω–∞ –∞–Ω–æ–Ω—Å...")
        
        created_tasks = 0
        
        for game_key, poll_info in self.game_polls.items():
            game_info = poll_info.get('game_info', {})
            
            if not game_info:
                continue
            
            print(f"\nüèÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–≥—Ä—ã: {game_info.get('team1', '')} vs {game_info.get('team2', '')}")
            
            if self.should_create_announcement_task(game_info):
                print(f"üìã –°–æ–∑–¥–∞—é –∑–∞–¥–∞—á—É –Ω–∞ –∞–Ω–æ–Ω—Å –¥–ª—è –∏–≥—Ä—ã...")
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                asyncio.create_task(self.create_announcement_task(game_info))
                created_tasks += 1
        
        print(f"\nüìä –ò–¢–û–ì–û: –°–æ–∑–¥–∞–Ω–æ {created_tasks} –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á –Ω–∞ –∞–Ω–æ–Ω—Å")
        return created_tasks
    
    def should_send_reminder(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –∞–Ω–æ–Ω—Å–∞—Ö"""
        now = get_moscow_time()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:00 –ú–°–ö
        if now.hour == 9 and now.minute == 0:
            return True
        
        return False
    
    async def send_announcement_reminders(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –∞–Ω–æ–Ω—Å–∞—Ö –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
        if not self.bot or not CHAT_ID:
            return
        
        try:
            today = get_moscow_time().date()
            today_str = today.strftime('%d.%m.%Y')
            
            # –ò—â–µ–º –∏–≥—Ä—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            today_games = []
            for announcement_key, announcement_info in self.announcements.items():
                if announcement_info.get('task_date') == today_str:
                    today_games.append(announcement_info)
            
            if today_games:
                reminder_message = f"üîî –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï: –ê–ù–û–ù–°–´ –ò–ì–† –ù–ê –°–ï–ì–û–î–ù–Ø ({today_str})\n\n"
                
                for i, game in enumerate(today_games, 1):
                    game_info = game.get('game_info', {})
                    reminder_message += f"{i}. üèÄ {game.get('our_team', '')} vs {game.get('opponent', '')}\n"
                    reminder_message += f"   üïê {game_info.get('time', '').split()[1]}\n"
                    reminder_message += f"   üìç {game_info.get('venue', '')}\n\n"
                
                reminder_message += "üìã –ù–µ –∑–∞–±—É–¥—å—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∞–Ω–æ–Ω—Å—ã –≤ —Ç–æ–ø–∏–∫–µ –∞–Ω–æ–Ω—Å–æ–≤!"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —Ç–æ–ø–∏–∫ –∞–Ω–æ–Ω—Å–æ–≤
                message_thread_id = int(ANNOUNCEMENTS_TOPIC_ID) if ANNOUNCEMENTS_TOPIC_ID else None
                
                await self.bot.send_message(
                    chat_id=int(CHAT_ID),
                    text=reminder_message,
                    message_thread_id=message_thread_id
                )
                
                print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± {len(today_games)} –∞–Ω–æ–Ω—Å–∞—Ö –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
announcement_scheduler = GameAnnouncementScheduler()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üèÄ –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –ê–ù–û–ù–°–û–í –ò–ì–†")
    print("=" * 60)
    
    moscow_tz = datetime.timezone(datetime.timedelta(hours=3))
    now = datetime.datetime.now(moscow_tz)
    print(f"üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (–ú–æ—Å–∫–≤–∞): {now.strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üìÖ –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'][now.weekday()]}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    bot_token = os.getenv("BOT_TOKEN")
    chat_id = os.getenv("CHAT_ID")
    
    print("üîß –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø:")
    print(f"BOT_TOKEN: {'‚úÖ' if bot_token else '‚ùå'}")
    print(f"CHAT_ID: {'‚úÖ' if chat_id else '‚ùå'}")
    print(f"GAMES_TOPIC_ID: {GAMES_TOPIC_ID}")
    print(f"ANNOUNCEMENTS_TOPIC_ID: {ANNOUNCEMENTS_TOPIC_ID}")
    
    if not all([bot_token, chat_id]):
        print("‚ùå –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return
    
    print(f"‚úÖ CHAT_ID: {chat_id}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   üìã –°–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤: {len(announcement_scheduler.game_polls)}")
    print(f"   üìù –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–Ω–æ–Ω—Å–æ–≤: {len(announcement_scheduler.announcements)}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–Ω–æ–Ω—Å—ã
    if announcement_scheduler.announcements:
        print(f"\nüìã –ó–ê–ü–õ–ê–ù–ò–†–û–í–ê–ù–ù–´–ï –ê–ù–û–ù–°–´:")
        for announcement_key, announcement_info in announcement_scheduler.announcements.items():
            print(f"   üèÄ {announcement_key}")
            print(f"      üìÖ –î–∞—Ç–∞: {announcement_info.get('task_date', 'N/A')}")
            print(f"      üë• –ò–≥—Ä–∞: {announcement_info.get('our_team', 'N/A')} vs {announcement_info.get('opponent', 'N/A')}")
            print(f"      üìä –°—Ç–∞—Ç—É—Å: {announcement_info.get('status', 'N/A')}")
    else:
        print("   üìù –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–Ω–æ–Ω—Å–æ–≤ –Ω–µ—Ç")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –∏–≥—Ä—ã
    print("\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –∏–≥—Ä...")
    announcement_scheduler.process_new_games()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    if announcement_scheduler.should_send_reminder():
        print("\nüîî –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± –∞–Ω–æ–Ω—Å–∞—Ö...")
        await announcement_scheduler.send_announcement_reminders()
    else:
        print("\n‚è∞ –ù–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
        print("üìÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:00 –ú–°–ö")

if __name__ == "__main__":
    asyncio.run(main())

