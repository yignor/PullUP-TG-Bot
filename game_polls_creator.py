#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π –ø–æ –∏–≥—Ä–∞–º –≤ —Ç–æ–ø–∏–∫–µ 1282
"""

import os
import asyncio
import datetime
import json
import re
from typing import Dict, List, Optional
from dotenv import load_dotenv

load_dotenv()

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
GAMES_TOPIC_ID = os.getenv("GAMES_TOPIC_ID", "1282")  # –¢–æ–ø–∏–∫ –¥–ª—è –æ–ø—Ä–æ—Å–æ–≤ –ø–æ –∏–≥—Ä–∞–º
TARGET_TEAMS = os.getenv("TARGET_TEAMS", "PullUP,Pull Up-–§–∞—Ä–º").split(",")

# –§–∞–π–ª—ã –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
POLLS_HISTORY_FILE = "game_polls_history.json"

def get_moscow_time():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ"""
    moscow_tz = datetime.timezone(datetime.timedelta(hours=3))
    return datetime.datetime.now(moscow_tz)

def load_polls_history() -> Dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤"""
    try:
        if os.path.exists(POLLS_HISTORY_FILE):
            with open(POLLS_HISTORY_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø—Ä–æ—Å–æ–≤: {e}")
    return {}

def save_polls_history(history: Dict):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤"""
    try:
        with open(POLLS_HISTORY_FILE, 'w', encoding='utf-8') as f:
            json.dump(history, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø—Ä–æ—Å–æ–≤: {e}")

def create_game_key(game_info: Dict) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∏–≥—Ä—ã"""
    return f"{game_info['date']}_{game_info['team1']}_{game_info['team2']}"

def get_day_of_week(date_str: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ"""
    try:
        date_obj = datetime.datetime.strptime(date_str, '%d.%m.%Y')
        days = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
        return days[date_obj.weekday()]
    except:
        return ""

def get_team_category(team_name: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–æ–º–∞–Ω–¥—ã"""
    if "–§–∞—Ä–º" in team_name:
        return "–§–∞—Ä–º"
    else:
        return "–ü–µ—Ä–≤—ã–π"

class GamePollsCreator:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π –ø–æ –∏–≥—Ä–∞–º"""
    
    def __init__(self):
        self.bot = None
        self.polls_history = load_polls_history()
        
        if BOT_TOKEN:
            from telegram import Bot
            self.bot = Bot(token=BOT_TOKEN)
    
    def find_target_teams_in_text(self, text: str) -> List[str]:
        """–ù–∞—Ö–æ–¥–∏—Ç —Ü–µ–ª–µ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ —Ç–µ–∫—Å—Ç–µ"""
        found_teams = []
        for team in TARGET_TEAMS:
            if team.strip() in text:
                found_teams.append(team.strip())
        return found_teams
    
    def parse_schedule_text(self, text: str) -> List[Dict]:
        """–ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–∞—Ö"""
        games = []
        
        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
        lines = text.strip().split('\n')
        
        for line in lines:
            line = line.strip()
            if not line:
                continue
            
            # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–≥—Ä
            # –ü–∞—Ç—Ç–µ—Ä–Ω 1: "–î–∞—Ç–∞ –í—Ä–µ–º—è –ö–æ–º–∞–Ω–¥–∞1 vs –ö–æ–º–∞–Ω–¥–∞2 –ú–µ—Å—Ç–æ"
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –∏–≥—Ä —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
            pattern1 = r'(\d{2}\.\d{2}\.\d{4})\s+(\d{2}:\d{2})\s+(.+?)\s+vs\s+(.+?)\s+(.+)'
            match1 = re.search(pattern1, line)
            
            if match1:
                date, time, team1, team2, venue = match1.groups()
                games.append({
                    'date': date,
                    'time': time,
                    'team1': team1.strip(),
                    'team2': team2.strip(),
                    'venue': venue.strip(),
                    'full_text': line
                })
                continue
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –∏–≥—Ä –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ (–∏–∑ —Ç–∞–±–ª–æ)
            pattern2 = r'(.+?)\s+vs\s+(.+)'
            match2 = re.search(pattern2, line)
            
            if match2:
                team1, team2 = match2.groups()
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞—à–∏ –∫–æ–º–∞–Ω–¥—ã
                game_text = f"{team1} {team2}"
                if self.find_target_teams_in_text(game_text):
                    games.append({
                        'date': get_moscow_time().strftime('%d.%m.%Y'),
                        'time': '20:30',  # –í—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        'team1': team1.strip(),
                        'team2': team2.strip(),
                        'venue': '–í–û –°–®–û–† –ú–∞–ª—ã–π 66',  # –ú–µ—Å—Ç–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        'full_text': line
                    })
        
        return games
    
    async def fetch_letobasket_schedule(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä —Å —Å–∞–π—Ç–∞ letobasket.ru"""
        try:
            import aiohttp
            from bs4 import BeautifulSoup
            
            url = "http://letobasket.ru/"
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as response:
                    if response.status == 200:
                        content = await response.text()
                        soup = BeautifulSoup(content, 'html.parser')
                        
                        # –ò—â–µ–º –±–ª–æ–∫ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
                        schedule_text = ""
                        
                        # –ò—â–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –±–ª–æ–∫–∞—Ö
                        schedule_blocks = soup.find_all(['div', 'p', 'span'], string=re.compile(r'PullUP|–§–∞—Ä–º|vs'))
                        
                        for block in schedule_blocks:
                            if block.get_text():
                                schedule_text += block.get_text() + "\n"
                        
                        if schedule_text:
                            return self.parse_schedule_text(schedule_text)
                        else:
                            print("‚ö†Ô∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
                            return []
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {response.status}")
                        return []
                        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
            return []
    
    def should_create_poll(self, game_info: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å –¥–ª—è –∏–≥—Ä—ã"""
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∏–≥—Ä—ã
        game_key = create_game_key(game_info)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ –æ–ø—Ä–æ—Å –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã
        if game_key in self.polls_history:
            print(f"‚è≠Ô∏è –û–ø—Ä–æ—Å –¥–ª—è –∏–≥—Ä—ã {game_key} —É–∂–µ —Å–æ–∑–¥–∞–Ω")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞—à–∏ –∫–æ–º–∞–Ω–¥—ã –≤ –∏–≥—Ä–µ
        game_text = f"{game_info.get('team1', '')} {game_info.get('team2', '')}"
        target_teams = self.find_target_teams_in_text(game_text)
        
        if not target_teams:
            print(f"‚ÑπÔ∏è –ò–≥—Ä–∞ –±–µ–∑ –Ω–∞—à–∏—Ö –∫–æ–º–∞–Ω–¥: {game_info.get('team1', '')} vs {game_info.get('team2', '')}")
            return False
        
        print(f"‚úÖ –ò–≥—Ä–∞ {game_info['date']} –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞")
        return True
    
    async def create_game_poll(self, game_info: Dict) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç –æ–ø—Ä–æ—Å –¥–ª—è –∏–≥—Ä—ã –≤ —Ç–æ–ø–∏–∫–µ 1282"""
        if not self.bot or not CHAT_ID:
            print("‚ùå –ë–æ—Ç –∏–ª–∏ CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return False
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—à—É –∫–æ–º–∞–Ω–¥—É –∏ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
            team1 = game_info.get('team1', '')
            team2 = game_info.get('team2', '')
            
            # –ù–∞—Ö–æ–¥–∏–º –Ω–∞—à—É –∫–æ–º–∞–Ω–¥—É
            our_team = None
            opponent = None
            
            for team in TARGET_TEAMS:
                if team.strip() in team1:
                    our_team = team1
                    opponent = team2
                    break
                elif team.strip() in team2:
                    our_team = team2
                    opponent = team1
                    break
            
            if not our_team:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞—à—É –∫–æ–º–∞–Ω–¥—É –≤ –∏–≥—Ä–µ")
                return False
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–æ–º–∞–Ω–¥—ã
            team_category = get_team_category(our_team)
            day_of_week = get_day_of_week(game_info['date'])
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            question = f"–õ–µ—Ç–Ω—è—è –ª–∏–≥–∞, {team_category}, {opponent}: {day_of_week} ({game_info['date']}) {game_info['time']}, {game_info['venue']}"
            
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
            options = [
                "‚úÖ –ì–æ—Ç–æ–≤",
                "‚ùå –ù–µ—Ç", 
                "üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä"
            ]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø—Ä–æ—Å –≤ —Ç–æ–ø–∏–∫ –¥–ª—è –∏–≥—Ä (1282)
            message_thread_id = int(GAMES_TOPIC_ID) if GAMES_TOPIC_ID else None
            poll_message = await self.bot.send_poll(
                chat_id=int(CHAT_ID),
                question=question,
                options=options,
                is_anonymous=False,
                allows_multiple_answers=False,
                message_thread_id=message_thread_id
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø—Ä–æ—Å–µ
            poll_info = {
                'message_id': poll_message.message_id,
                'poll_id': poll_message.poll.id,
                'question': question,
                'options': options,
                'game_info': game_info,
                'our_team': our_team,
                'opponent': opponent,
                'team_category': team_category,
                'day_of_week': day_of_week,
                'date': get_moscow_time().isoformat(),
                'chat_id': CHAT_ID,
                'topic_id': GAMES_TOPIC_ID
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            game_key = create_game_key(game_info)
            self.polls_history[game_key] = poll_info
            save_polls_history(self.polls_history)
            
            print(f"‚úÖ –û–ø—Ä–æ—Å –¥–ª—è –∏–≥—Ä—ã —Å–æ–∑–¥–∞–Ω –≤ —Ç–æ–ø–∏–∫–µ {GAMES_TOPIC_ID}")
            print(f"üìä ID –æ–ø—Ä–æ—Å–∞: {poll_info['poll_id']}")
            print(f"üèÄ –§–æ—Ä–º–∞—Ç: {question}")
            print(f"üìÖ –î–∞—Ç–∞: {game_info['date']}")
            print(f"üïê –í—Ä–µ–º—è: {game_info['time']}")
            print(f"üìç –ú–µ—Å—Ç–æ: {game_info['venue']}")
            print(f"üë• –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {team_category}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞ –¥–ª—è –∏–≥—Ä—ã: {e}")
            return False
    
    async def check_and_create_game_polls(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–µ—Ç –æ–ø—Ä–æ—Å—ã –¥–ª—è –∏–≥—Ä –Ω–∞—à–∏—Ö –∫–æ–º–∞–Ω–¥"""
        try:
            print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–≥—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–æ–≤...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            games = await self.fetch_letobasket_schedule()
            
            if not games:
                print("‚ö†Ô∏è –ò–≥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã
            print(f"\nüìä –ù–ê–ô–î–ï–ù–ù–´–ï –ò–ì–†–´:")
            for i, game in enumerate(games, 1):
                print(f"   {i}. {game['full_text']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∏–≥—Ä—É
            created_polls = 0
            for game in games:
                print(f"\nüèÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–≥—Ä—ã: {game.get('team1', '')} vs {game.get('team2', '')}")
                
                if self.should_create_poll(game):
                    print(f"üìä –°–æ–∑–¥–∞—é –æ–ø—Ä–æ—Å –¥–ª—è –∏–≥—Ä—ã...")
                    if await self.create_game_poll(game):
                        created_polls += 1
            
            print(f"\nüìä –ò–¢–û–ì–û: –°–æ–∑–¥–∞–Ω–æ {created_polls} –æ–ø—Ä–æ—Å–æ–≤")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–≥—Ä: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
game_polls_creator = GamePollsCreator()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üìä –°–û–ó–î–ê–¢–ï–õ–¨ –û–ü–†–û–°–û–í –ü–û –ò–ì–†–ê–ú")
    print("=" * 60)
    
    moscow_tz = datetime.timezone(datetime.timedelta(hours=3))
    now = datetime.datetime.now(moscow_tz)
    print(f"üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (–ú–æ—Å–∫–≤–∞): {now.strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üìÖ –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'][now.weekday()]}")
    
    print(f"\nüîß –ù–ê–°–¢–†–û–ô–ö–ò:")
    print(f"   CHAT_ID: {CHAT_ID}")
    print(f"   GAMES_TOPIC_ID: {GAMES_TOPIC_ID}")
    print(f"   TARGET_TEAMS: {TARGET_TEAMS}")
    print(f"   –ò—Å—Ç–æ—Ä–∏—è –æ–ø—Ä–æ—Å–æ–≤: {len(game_polls_creator.polls_history)} –∑–∞–ø–∏—Å–µ–π")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–æ–≤
    await game_polls_creator.check_and_create_game_polls()
    
    print(f"\nüìä –ò–°–¢–û–†–ò–Ø –û–ü–†–û–°–û–í:")
    for key, poll_info in game_polls_creator.polls_history.items():
        print(f"   {key}: {poll_info.get('question', 'N/A')}")

if __name__ == "__main__":
    asyncio.run(main())
