#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä
"""

import asyncio
import json
import os
from datetime import datetime, timezone, timedelta
from typing import Dict, Optional, List
import aiohttp
from bs4 import BeautifulSoup
import re

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
from datetime_utils import get_moscow_time, is_today

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
BOT_TOKEN = os.getenv('BOT_TOKEN')
CHAT_ID = os.getenv('CHAT_ID')
GAME_MONITOR_HISTORY_FILE = 'game_monitor_history.json'

def load_game_monitor_history() -> Dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–≥—Ä"""
    try:
        if os.path.exists(GAME_MONITOR_HISTORY_FILE):
            with open(GAME_MONITOR_HISTORY_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
    return {}

def save_game_monitor_history(history: Dict):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–≥—Ä"""
    try:
        with open(GAME_MONITOR_HISTORY_FILE, 'w', encoding='utf-8') as f:
            json.dump(history, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")

def create_game_monitor_key(game_info: Dict) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–≥—Ä—ã"""
    return f"{game_info['date']}_{game_info['time']}_{game_info['team1']}_{game_info['team2']}"

class GameResultsMonitor:
    """–ö–ª–∞—Å—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä"""
    
    def __init__(self):
        self.bot = None
        self.monitor_history = load_game_monitor_history()
        
        if BOT_TOKEN:
            from telegram import Bot
            self.bot = Bot(token=BOT_TOKEN)
    
    def should_monitor_game(self, game_info: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –∏–≥—Ä—É"""
        print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –ò–ì–†–´ –î–õ–Ø –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê:")
        print(f"   üèÄ {game_info.get('team1', '')} vs {game_info.get('team2', '')}")
        print(f"   üìÖ –î–∞—Ç–∞: {game_info.get('date', '')}")
        print(f"   üïê –í—Ä–µ–º—è: {game_info.get('time', '')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–∞ —Å–µ–≥–æ–¥–Ω—è
        if not is_today(game_info['date']):
            print(f"   ‚ùå –ò–≥—Ä–∞ {game_info['date']} –Ω–µ —Å–µ–≥–æ–¥–Ω—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
            return False
        
        print(f"   ‚úÖ –ò–≥—Ä–∞ —Å–µ–≥–æ–¥–Ω—è")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –±–ª–∏–∑–∫–æ –∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–≥—Ä—ã
        try:
            time_str = game_info['time'].replace('.', ':')
            game_time = datetime.strptime(f"{game_info['date']} {time_str}", '%d.%m.%Y %H:%M')
            game_time = game_time.replace(tzinfo=timezone(timedelta(hours=3)))  # –ú–°–ö
            
            now = get_moscow_time()
            
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –∑–∞ 15 –º–∏–Ω—É—Ç –¥–æ –∏–≥—Ä—ã
            monitoring_start = game_time - timedelta(minutes=15)
            
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ 3 —á–∞—Å–∞ –ø–æ—Å–ª–µ –∏–≥—Ä—ã
            monitoring_end = game_time + timedelta(hours=3)
            
            print(f"   üïê –í—Ä–µ–º—è –∏–≥—Ä—ã: {game_time.strftime('%H:%M')}")
            print(f"   üöÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å: {monitoring_start.strftime('%H:%M')}")
            print(f"   üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ: {monitoring_end.strftime('%H:%M')}")
            print(f"   ‚è∞ –°–µ–π—á–∞—Å: {now.strftime('%H:%M')}")
            
            if now < monitoring_start:
                time_diff = (monitoring_start - now).total_seconds() / 60
                print(f"   ‚ùå –°–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞. –ù–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ {time_diff:.1f} –º–∏–Ω—É—Ç")
                return False
            
            if now > monitoring_end:
                time_diff = (now - monitoring_end).total_seconds() / 60
                print(f"   ‚ùå –°–ª–∏—à–∫–æ–º –ø–æ–∑–¥–Ω–æ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞. –ó–∞–∫–æ–Ω—á–∏–ª—Å—è {time_diff:.1f} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥")
                return False
            
            time_diff = (game_time - now).total_seconds() / 60
            print(f"   ‚úÖ –í—Ä–µ–º—è –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞. –î–æ –∏–≥—Ä—ã: {time_diff:.1f} –º–∏–Ω—É—Ç")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –∏–≥—Ä—ã: {e}")
            return False
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∏–≥—Ä—ã
        game_key = create_game_monitor_key(game_info)
        print(f"   üîë –ö–ª—é—á –∏–≥—Ä—ã: {game_key}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–º –ª–∏ –º—ã —É–∂–µ —ç—Ç—É –∏–≥—Ä—É
        if game_key in self.monitor_history:
            monitor_info = self.monitor_history[game_key]
            status = monitor_info.get('status', 'unknown')
            start_time = monitor_info.get('start_time', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            
            print(f"   üìã –ù–∞–π–¥–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:")
            print(f"      –°—Ç–∞—Ç—É—Å: {status}")
            print(f"      –ù–∞—á–∞–ª–æ: {start_time}")
            
            if status == 'completed':
                end_time = monitor_info.get('end_time', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                print(f"   ‚úÖ –ò–≥—Ä–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ {end_time}")
                return False
            elif status == 'timeout':
                end_time = monitor_info.get('end_time', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                print(f"   ‚è∞ –ò–≥—Ä–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ —Ç–∞–π–º–∞—É—Ç—É –≤ {end_time}")
                return False
            elif status == 'monitoring':
                print(f"   ‚è≠Ô∏è –ò–≥—Ä–∞ —É–∂–µ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ")
                return False
            else:
                print(f"   ‚ö†Ô∏è –ò–≥—Ä–∞ –∏–º–µ–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {status}")
                return False
        else:
            print(f"   üìã –ù–æ–≤–∞—è –∏–≥—Ä–∞, –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞—à–∏ –∫–æ–º–∞–Ω–¥—ã –≤ –∏–≥—Ä–µ
        game_text = f"{game_info.get('team1', '')} {game_info.get('team2', '')}"
        found_teams = self.find_target_teams_in_text(game_text)
        
        if not found_teams:
            print(f"   ‚ùå –ò–≥—Ä–∞ –±–µ–∑ –Ω–∞—à–∏—Ö –∫–æ–º–∞–Ω–¥: {game_info.get('team1', '')} vs {game_info.get('team2', '')}")
            return False
        
        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω—ã –Ω–∞—à–∏ –∫–æ–º–∞–Ω–¥—ã: {', '.join(found_teams)}")
        print(f"   ‚úÖ –ò–≥—Ä–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        return True
    
    def find_target_teams_in_text(self, text: str) -> List[str]:
        """–ù–∞—Ö–æ–¥–∏—Ç —Ü–µ–ª–µ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ —Ç–µ–∫—Å—Ç–µ"""
        found_teams = []
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞)
        search_teams = [
            'Pull Up-–§–∞—Ä–º',  # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            'Pull Up –§–∞—Ä–º',  # –ë–µ–∑ –¥–µ—Ñ–∏—Å–∞
            'Pull Up',       # –û–±—ã—á–Ω—ã–π Pull Up
            'PullUP'         # –ë–µ–∑ –ø—Ä–æ–±–µ–ª–∞
        ]
        
        for team in search_teams:
            if team in text:
                found_teams.append(team)
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {team}")
        
        return found_teams
    
    async def parse_game_scoreboard(self, game_link: str) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏—Ç —Ç–∞–±–ª–æ –∏–≥—Ä—ã –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL
            if game_link.startswith('game.html?'):
                full_url = f"http://letobasket.ru/{game_link}"
            else:
                full_url = game_link
            
            print(f"üîç –ü–∞—Ä—Å–∏–º —Ç–∞–±–ª–æ: {full_url}")
            
            async with aiohttp.ClientSession() as session:
                async with session.get(full_url) as response:
                    if response.status == 200:
                        content = await response.text()
                        soup = BeautifulSoup(content, 'html.parser')
                        
                        # –ò—â–µ–º iframe —Å –∏–≥—Ä–æ–π
                        iframe = soup.find('iframe', src=True)
                        if not iframe:
                            print("   ‚ùå iframe –Ω–µ –Ω–∞–π–¥–µ–Ω")
                            return None
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ iframe
                        iframe_src = iframe['src']
                        if not iframe_src.startswith('http'):
                            iframe_src = f"http://ig.russiabasket.ru{iframe_src}"
                        
                        print(f"   üîó iframe URL: {iframe_src}")
                        
                        async with session.get(iframe_src) as iframe_response:
                            if iframe_response.status == 200:
                                iframe_content = await iframe_response.text()
                                
                                # –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ iframe
                                return self.parse_iframe_content(iframe_content)
                            else:
                                print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ iframe: {iframe_response.status}")
                                return None
                    else:
                        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {response.status}")
                        return None
                        
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–∞–±–ª–æ: {e}")
            return None
    
    def parse_iframe_content(self, iframe_content: str) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ iframe –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–≥—Ä–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        try:
            soup = BeautifulSoup(iframe_content, 'html.parser')
            
            # –ò—â–µ–º –ø–µ—Ä–∏–æ–¥ –∏ –≤—Ä–µ–º—è
            period_span = soup.find('span', id='js-period')
            timer_span = soup.find('span', id='js-timer')
            
            period = period_span.get_text().strip() if period_span else None
            timer = timer_span.get_text().strip() if timer_span else None
            
            print(f"   üìä –ü–µ—Ä–∏–æ–¥: {period}, –í—Ä–µ–º—è: {timer}")
            
            # –ò—â–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ —Å—á–µ—Ç
            team1_span = soup.find('span', id='js-score-team1')
            team2_span = soup.find('span', id='js-score-team2')
            
            score1 = team1_span.get_text().strip() if team1_span else None
            score2 = team2_span.get_text().strip() if team2_span else None
            
            print(f"   üèÄ –°—á–µ—Ç: {score1} : {score2}")
            
            # –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
            team_names = self.extract_team_names(iframe_content)
            
            return {
                'period': period,
                'timer': timer,
                'score1': score1,
                'score2': score2,
                'team1_name': team_names.get('team1'),
                'team2_name': team_names.get('team2'),
                'is_game_finished': period == '4' and timer == '0:00'
            }
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ iframe: {e}")
            return None
    
    def extract_team_names(self, iframe_content: str) -> Dict[str, str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –∏–∑ iframe"""
        try:
            # –ò—â–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
            soup = BeautifulSoup(iframe_content, 'html.parser')
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
            title = soup.find('title')
            if title:
                title_text = title.get_text()
                # –ü–∞—Ç—Ç–µ—Ä–Ω: "–ö–û–ú–ê–ù–î–ê1 - –ö–û–ú–ê–ù–î–ê2"
                match = re.search(r'([^-]+)\s*-\s*([^-]+)', title_text)
                if match:
                    return {
                        'team1': match.group(1).strip(),
                        'team2': match.group(2).strip()
                    }
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ, –∏—â–µ–º –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥
            
            return {'team1': '–ö–æ–º–∞–Ω–¥–∞ 1', 'team2': '–ö–æ–º–∞–Ω–¥–∞ 2'}
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–º–∞–Ω–¥: {e}")
            return {'team1': '–ö–æ–º–∞–Ω–¥–∞ 1', 'team2': '–ö–æ–º–∞–Ω–¥–∞ 2'}
    
    def determine_winner(self, score1: str, score2: str, team1_name: str, team2_name: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏–≥—Ä—ã"""
        try:
            score1_int = int(score1) if score1 and score1.isdigit() else 0
            score2_int = int(score2) if score2 and score2.isdigit() else 0
            
            if score1_int > score2_int:
                return f"–ø–æ–±–µ–¥–∏–ª–∏ {team1_name}"
            elif score2_int > score1_int:
                return f"–ø–æ–±–µ–¥–∏–ª–∏ {team2_name}"
            else:
                return "–Ω–∏—á—å—è"
        except:
            return "—Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
    
    async def send_game_result_notification(self, game_info: Dict, scoreboard_info: Dict, game_link: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∏–≥—Ä—ã"""
        if not self.bot or not CHAT_ID:
            print("‚ùå –ë–æ—Ç –∏–ª–∏ CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return False
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
            team1 = game_info.get('team1', '')
            team2 = game_info.get('team2', '')
            
            # –ù–∞—Ö–æ–¥–∏–º –Ω–∞—à—É –∫–æ–º–∞–Ω–¥—É –∏ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
            opponent = None
            team_type = "–ø–µ—Ä–≤–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–æ–º–∞–Ω–¥, —á—Ç–æ –∏ –≤ find_target_teams_in_text
            target_teams = ['Pull Up-–§–∞—Ä–º', 'Pull Up –§–∞—Ä–º', 'Pull Up', 'PullUP']
            
            if any(target_team in team1 for target_team in target_teams):
                opponent = team2
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã
                if any(farm_team in team1 for farm_team in ['Pull Up-–§–∞—Ä–º', 'Pull Up –§–∞—Ä–º']):
                    team_type = "—Å–æ—Å—Ç–∞–≤–∞ —Ä–∞–∑–≤–∏—Ç–∏—è"
            elif any(target_team in team2 for target_team in target_teams):
                opponent = team1
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã
                if any(farm_team in team2 for farm_team in ['Pull Up-–§–∞—Ä–º', 'Pull Up –§–∞—Ä–º']):
                    team_type = "—Å–æ—Å—Ç–∞–≤–∞ —Ä–∞–∑–≤–∏—Ç–∏—è"
            
            if not opponent:
                opponent = "—Å–æ–ø–µ—Ä–Ω–∏–∫"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤—Ä–µ–º—è (–∑–∞–º–µ–Ω—è–µ–º —Ç–æ—á–∫—É –Ω–∞ –¥–≤–æ–µ—Ç–æ—á–∏–µ –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏)
            normalized_time = game_info['time'].replace('.', ':')
            message = f"üèÄ –ò–≥—Ä–∞ {team_type} –ø—Ä–æ—Ç–∏–≤ {opponent} –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å\n"
            message += f"üèÜ –°—á–µ—Ç: {scoreboard_info['team1_name']} {scoreboard_info['score1']} : {scoreboard_info['score2']} {scoreboard_info['team2_name']}\n"
            
            # –£–±–∏—Ä–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è - —ç—Ç–æ –ø–æ–Ω—è—Ç–Ω–æ –∏–∑ —Å—á–µ—Ç–∞
            # result = self.determine_winner(...)
            # message += f"üìä {result}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª
            if game_link.startswith('game.html?'):
                full_url = f"http://letobasket.ru/{game_link}"
            else:
                full_url = game_link
            message += f"üìä –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª: <a href=\"{full_url}\">—Ç—É—Ç</a>"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.bot.send_message(
                chat_id=int(CHAT_ID),
                text=message,
                parse_mode='HTML'
            )
            
            print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    async def monitor_game(self, game_info: Dict, game_link: str):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –∏–≥—Ä—É –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–æ–¥–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –∑–∞–ø—É—Å–∫)"""
        game_key = create_game_monitor_key(game_info)
        
        print(f"\nüéÆ –ú–û–ù–ò–¢–û–†–ò–ù–ì –ò–ì–†–´:")
        print(f"   üèÄ {game_info.get('team1', '')} vs {game_info.get('team2', '')}")
        print(f"   üîë –ö–ª—é—á: {game_key}")
        print(f"   üîó –°—Å—ã–ª–∫–∞: {game_link}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –∏–≥—Ä—ã
        time_str = game_info['time'].replace('.', ':')
        game_time = datetime.strptime(f"{game_info['date']} {time_str}", '%d.%m.%Y %H:%M')
        game_time = game_time.replace(tzinfo=timezone(timedelta(hours=3)))  # –ú–°–ö
        
        now = get_moscow_time()
        end_monitoring = game_time + timedelta(hours=3)
        
        print(f"   üïê –í—Ä–µ–º—è –∏–≥—Ä—ã: {game_time.strftime('%H:%M')}")
        print(f"   üõë –ö–æ–Ω–µ—Ü –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {end_monitoring.strftime('%H:%M')}")
        print(f"   ‚è∞ –°–µ–π—á–∞—Å: {now.strftime('%H:%M')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        if now > end_monitoring:
            time_diff = (now - end_monitoring).total_seconds() / 60
            print(f"   ‚ùå –í—Ä–µ–º—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏—Å—Ç–µ–∫–ª–æ {time_diff:.1f} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∏—Å—Ç–æ—Ä–∏–∏
            if game_key in self.monitor_history:
                self.monitor_history[game_key]['status'] = 'timeout'
                self.monitor_history[game_key]['end_time'] = now.isoformat()
                save_game_monitor_history(self.monitor_history)
                print(f"   üìã –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ 'timeout'")
            
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        print(f"   üîç –ü–∞—Ä—Å–∏–º —Ç–∞–±–ª–æ –∏–≥—Ä—ã...")
        
        scoreboard_info = await self.parse_game_scoreboard(game_link)
        
        if scoreboard_info:
            print(f"   üìä –¢–∞–±–ª–æ –ø–æ–ª—É—á–µ–Ω–æ:")
            print(f"      –ü–µ—Ä–∏–æ–¥: {scoreboard_info.get('period', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            print(f"      –í—Ä–µ–º—è: {scoreboard_info.get('timer', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            print(f"      –°—á–µ—Ç: {scoreboard_info.get('score1', '?')} : {scoreboard_info.get('score2', '?')}")
            print(f"      –ó–∞–≤–µ—Ä—à–µ–Ω–∞: {'–î–∞' if scoreboard_info.get('is_game_finished') else '–ù–µ—Ç'}")
            
            if scoreboard_info['is_game_finished']:
                print(f"   üèÅ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                success = await self.send_game_result_notification(game_info, scoreboard_info, game_link)
                
                if success:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∏—Å—Ç–æ—Ä–∏–∏
                    if game_key in self.monitor_history:
                        self.monitor_history[game_key]['status'] = 'completed'
                        self.monitor_history[game_key]['end_time'] = now.isoformat()
                    else:
                        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ—ë
                        self.monitor_history[game_key] = {
                            'game_info': game_info,
                            'game_link': game_link,
                            'start_time': now.isoformat(),
                            'status': 'completed',
                            'end_time': now.isoformat()
                        }
                    
                    save_game_monitor_history(self.monitor_history)
                    print(f"   üìã –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ 'completed'")
                    return True
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                    return False
            
            else:
                print(f"   ‚è≥ –ò–≥—Ä–∞ –µ—â–µ –∏–¥–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏
                if game_key not in self.monitor_history:
                    self.monitor_history[game_key] = {
                        'game_info': game_info,
                        'game_link': game_link,
                        'start_time': now.isoformat(),
                        'status': 'monitoring'
                    }
                    save_game_monitor_history(self.monitor_history)
                    print(f"   üìã –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'monitoring'")
                else:
                    print(f"   üìã –ó–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏–∏")
                
                return False
        else:
            print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–æ")
            return False
    
    async def start_monitoring_for_game(self, game_info: Dict, game_link: str):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–≥—Ä—ã"""
        if not self.should_monitor_game(game_info):
            return False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞–ø—Ä—è–º—É—é
        return await self.monitor_game(game_info, game_link)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
async def start_game_monitoring(game_info: Dict, game_link: str):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–≥—Ä—ã"""
    monitor = GameResultsMonitor()
    return await monitor.start_monitoring_for_game(game_info, game_link)
