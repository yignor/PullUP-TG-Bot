#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä
Production –≤–µ—Ä—Å–∏—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
"""

import asyncio
import os
import json
import re
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from dotenv import load_dotenv
from telegram import Bot
from datetime_utils import get_moscow_time
from game_system_manager import GameSystemManager
from enhanced_duplicate_protection import duplicate_protection, TEST_MODE

# –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
def load_environment():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        load_dotenv()
        print("‚úÖ .env —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env —Ñ–∞–π–ª–∞: {e}")
        print("üìã –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_environment()

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
ANNOUNCEMENTS_TOPIC_ID = os.getenv("ANNOUNCEMENTS_TOPIC_ID")

print(f"üîß –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø:")
print(f"   BOT_TOKEN: {'‚úÖ' if BOT_TOKEN else '‚ùå'}")
print(f"   CHAT_ID: {'‚úÖ' if CHAT_ID else '‚ùå'}")
print(f"   ANNOUNCEMENTS_TOPIC_ID: {'‚úÖ' if ANNOUNCEMENTS_TOPIC_ID else '‚ùå'}")

class GameResultsMonitorFinal:
    """–§–∏–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä"""
    
    def __init__(self):
        self.bot = None
        if BOT_TOKEN:
            self.bot = Bot(token=BOT_TOKEN)
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–≥—Ä
        self.game_manager = GameSystemManager()
        
        # –§–∞–π–ª –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.results_history_file = "game_results_history.json"
        self.results_history = self.load_results_history()
        
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ —Å –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        if not os.path.exists(self.results_history_file):
            print(f"üìÅ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏: {self.results_history_file}")
            self.save_results_history()
    
    def load_results_history(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        try:
            if os.path.exists(self.results_history_file):
                with open(self.results_history_file, 'r', encoding='utf-8') as f:
                    history = json.load(f)
                    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(history)} –∑–∞–ø–∏—Å–µ–π")
                    return history
            else:
                print(f"üìÅ –§–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.results_history_file}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        print(f"üìã –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –∏—Å—Ç–æ—Ä–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        return {}
    
    def save_results_history(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        try:
            with open(self.results_history_file, 'w', encoding='utf-8') as f:
                json.dump(self.results_history, f, ensure_ascii=False, indent=2)
            print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(self.results_history)} –∑–∞–ø–∏—Å–µ–π –≤ {self.results_history_file}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
    
    def create_result_key(self, game_info: Dict) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã"""
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        team1 = game_info['team1'].strip().replace(' ', '_')
        team2 = game_info['team2'].strip().replace(' ', '_')
        date = game_info['date']
        
        key = f"result_{date}_{team1}_{team2}"
        print(f"üîë –°–æ–∑–¥–∞–Ω –∫–ª—é—á —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {key}")
        return key
    
    def was_result_sent(self, game_info: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–π –∏–≥—Ä—ã"""
        result_key = self.create_result_key(game_info)
        was_sent = result_key in self.results_history
        
        if was_sent:
            print(f"‚è≠Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–∞–Ω–µ–µ: {result_key}")
            if result_key in self.results_history:
                sent_time = self.results_history[result_key].get('date', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                print(f"   üìÖ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {sent_time}")
        else:
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª—Å—è: {result_key}")
        
        return was_sent
    
    def should_check_results(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –Ω–æ–≤–æ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
        now = get_moscow_time()
        current_hour = now.hour
        current_minute = now.minute
        weekday = now.weekday()  # 0=–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 6=–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∏–Ω—É—Ç—ã –∫—Ä–∞—Ç–Ω—ã 15 (0, 15, 30, 45)
        if current_minute % 15 != 0:
            return False
        
        # –ë—É–¥–Ω–∏ (–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–ü—è—Ç–Ω–∏—Ü–∞, 0-4)
        if weekday <= 4:  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–ü—è—Ç–Ω–∏—Ü–∞
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å 19:30 –¥–æ 00:30 (—Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å)
            if current_hour == 19 and current_minute >= 30:  # 19:30-19:59
                return True
            elif current_hour == 0 and current_minute <= 30:  # 00:00-00:30
                return True
            elif current_hour >= 20:  # 20:00-23:59
                return True
            return False
        
        # –í—ã—Ö–æ–¥–Ω—ã–µ (–°—É–±–±–æ—Ç–∞-–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 5-6)
        else:  # –°—É–±–±–æ—Ç–∞-–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å 11:30 –¥–æ 00:30 (—Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å)
            if current_hour == 11 and current_minute >= 30:  # 11:30-11:59
                return True
            elif current_hour == 0 and current_minute <= 30:  # 00:00-00:30
                return True
            elif current_hour >= 12:  # 12:00-23:59
                return True
            return False
    
    async def fetch_game_results(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä —Å —Å–∞–π—Ç–∞ letobasket.ru"""
        try:
            import aiohttp
            from bs4 import BeautifulSoup
            
            url = "http://letobasket.ru/"
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as response:
                    if response.status == 200:
                        content = await response.text()
                        soup = BeautifulSoup(content, 'html.parser')
                        
                        # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                        full_text = soup.get_text()
                        
                        # –ò—â–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã —Å –Ω–∞—à–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
                        games = []
                        
                        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä –Ω–∞ —Å–∞–π—Ç–µ
                        # –§–æ—Ä–º–∞—Ç: –¥–∞—Ç–∞ - –∫–æ–º–∞–Ω–¥–∞1 - –∫–æ–º–∞–Ω–¥–∞2 —Å—á–µ—Ç (—á–µ—Ç–≤–µ—Ä—Ç–∏)
                        # –ü—Ä–∏–º–µ—Ä: 23.08.2025- Quasar - Pull Up-–§–∞—Ä–º 37:58 (0:12 11:10 15:10 11:26)
                        game_pattern = r'(\d{2}\.\d{2}\.\d{4})-\s*([^-]+)-\s*([^-]+)\s+(\d+):(\d+)\s+\(([^)]+)\)'
                        matches = re.findall(game_pattern, full_text)
                        
                        print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(matches)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∏–≥—Ä –≤ —Ç–µ–∫—Å—Ç–µ")
                        
                        for match in matches:
                            date, team1, team2, score1, score2, quarters = match
                            game_text = f"{team1.strip()} {team2.strip()}"
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞—à–∏ –∫–æ–º–∞–Ω–¥—ã
                            if self.game_manager.find_target_teams_in_text(game_text):
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è
                                if self.game_manager.is_game_today({'date': date}):
                                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—à—É –∫–æ–º–∞–Ω–¥—É –∏ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
                                    our_team = None
                                    opponent = None
                                    team_type = None
                                    
                                    if any(target_team in team1 for target_team in ['Pull Up', 'PullUP']):
                                        our_team = team1.strip()
                                        opponent = team2.strip()
                                    elif any(target_team in team2 for target_team in ['Pull Up', 'PullUP']):
                                        our_team = team2.strip()
                                        opponent = team1.strip()
                                    
                                    if our_team:
                                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã
                                        if '—Ñ–∞—Ä–º' in our_team.lower():
                                            team_type = '—Å–æ—Å—Ç–∞–≤ —Ä–∞–∑–≤–∏—Ç–∏—è'
                                        else:
                                            team_type = '–ø–µ—Ä–≤—ã–π —Å–æ—Å—Ç–∞–≤'
                                        
                                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                                        our_score = int(score1) if our_team == team1.strip() else int(score2)
                                        opponent_score = int(score2) if our_team == team1.strip() else int(score1)
                                        result = "–ø–æ–±–µ–¥–∞" if our_score > opponent_score else "–ø–æ—Ä–∞–∂–µ–Ω–∏–µ" if our_score < opponent_score else "–Ω–∏—á—å—è"
                                        
                                        game_info = {
                                            'date': date,
                                            'team1': team1.strip(),
                                            'team2': team2.strip(),
                                            'score1': int(score1),
                                            'score2': int(score2),
                                            'quarters': quarters,
                                            'our_team': our_team,
                                            'opponent': opponent,
                                            'team_type': team_type,
                                            'our_score': our_score,
                                            'opponent_score': opponent_score,
                                            'result': result,
                                            'is_finished': True
                                        }
                                        
                                        games.append(game_info)
                                        print(f"üèÄ –ù–∞–π–¥–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –∏–≥—Ä–∞: {team1.strip()} vs {team2.strip()} ({score1}:{score2})")
                                        print(f"   –î–∞—Ç–∞: {date}, –¢–∏–ø: {team_type}, –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
                                        print(f"   –ß–µ—Ç–≤–µ—Ä—Ç–∏: {quarters}")
                                else:
                                    print(f"‚è≠Ô∏è –ò–≥—Ä–∞ {team1.strip()} vs {team2.strip()} –Ω–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è ({date}), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                        
                        return games
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {response.status}")
                        return []
                        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
            return []
    
    async def find_game_link(self, team1: str, team2: str) -> Optional[str]:
        """–ò—â–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∏–≥—Ä—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–æ–≥–∏–∫—É –∏–∑ game_system_manager)"""
        try:
            result = await self.game_manager.find_game_link(team1, team2)
            if result:
                game_link, found_team = result
                return game_link
            return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–≥—Ä—É: {e}")
            return None
    
    async def send_game_result(self, game_info: Dict) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã –≤ Telegram"""
        if not self.bot or not CHAT_ID:
            print("‚ùå –ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∏–≥—Ä—ã: {game_info['team1']} vs {game_info['team2']}")
            if self.was_result_sent(game_info):
                print(f"‚è≠Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∏–≥—Ä—ã {game_info['team1']} vs {game_info['team2']} —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                return False
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
            result_emoji = "üèÜ" if game_info['result'] == "–ø–æ–±–µ–¥–∞" else "üòî" if game_info['result'] == "–ø–æ—Ä–∞–∂–µ–Ω–∏–µ" else "ü§ù"
            
            message = f"{result_emoji} <b>–†–ï–ó–£–õ–¨–¢–ê–¢ –ò–ì–†–´</b>\n\n"
            message += f"üèÄ <b>{game_info['team_type'].title()}</b>\n"
            message += f"üìÖ {game_info['date']}\n"
            message += f"‚öîÔ∏è {game_info['our_team']} vs {game_info['opponent']}\n"
            message += f"üìä –°—á–µ—Ç: <b>{game_info['our_score']}:{game_info['opponent_score']}</b>\n"
            message += f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: <b>{game_info['result'].upper()}</b>\n"
            message += f"üìà –ß–µ—Ç–≤–µ—Ä—Ç–∏: {game_info['quarters']}"
            
            # –ò—â–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–≥—Ä—É
            game_link = await self.find_game_link(game_info['team1'], game_info['team2'])
            if game_link:
                message += f"\n\nüîó <a href='{game_link}'>–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–≥—Ä—ã</a>"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                if ANNOUNCEMENTS_TOPIC_ID:
                    message_thread_id = int(ANNOUNCEMENTS_TOPIC_ID)
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —è–≤–Ω—ã–π –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞
                    bot_instance = self.bot
                    sent_message = await bot_instance.send_message(
                        chat_id=int(CHAT_ID),
                        text=message,
                        parse_mode='HTML',
                        message_thread_id=message_thread_id
                    )
                else:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —è–≤–Ω—ã–π –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞
                    bot_instance = self.bot
                    sent_message = await bot_instance.send_message(
                        chat_id=int(CHAT_ID),
                        text=message,
                        parse_mode='HTML'
                    )
            except Exception as topic_error:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å topic ID: {topic_error}")
                # –ü—Ä–æ–±—É–µ–º –±–µ–∑ topic ID
                bot_instance = self.bot
                sent_message = await bot_instance.send_message(
                    chat_id=int(CHAT_ID),
                    text=message,
                    parse_mode='HTML'
                )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            result_key = self.create_result_key(game_info)
            self.results_history[result_key] = {
                'date': get_moscow_time().isoformat(),
                'game_info': game_info,
                'message': message
            }
            self.save_results_history()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Å–µ—Ä–≤–∏—Å–Ω—ã–π –ª–∏—Å—Ç –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            additional_info = f"{game_info['date']} {game_info['our_team']} vs {game_info['opponent']} ({game_info['our_score']}:{game_info['opponent_score']}) - {game_info['result']}"
            duplicate_protection.add_record(
                "–†–ï–ó–£–õ–¨–¢–ê–¢_–ò–ì–†–ê",
                result_key,
                "–û–ë–†–ê–ë–û–¢–ê–ù",
                additional_info
            )
            
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {game_info['our_team']} vs {game_info['opponent']}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
            return False
    
    async def run_game_results_monitor(self, force_run: bool = False):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        print("üèÄ –ó–ê–ü–£–°–ö –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ò–ì–†")
        print("=" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        print("üîß –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø:")
        print(f"BOT_TOKEN: {'‚úÖ' if BOT_TOKEN else '‚ùå'}")
        print(f"CHAT_ID: {'‚úÖ' if CHAT_ID else '‚ùå'}")
        print(f"ANNOUNCEMENTS_TOPIC_ID: {'‚úÖ' if ANNOUNCEMENTS_TOPIC_ID else '‚ùå'}")
        print(f"–¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: {'‚úÖ –í–ö–õ–Æ–ß–ï–ù' if TEST_MODE else '‚ùå –í–´–ö–õ–Æ–ß–ï–ù'}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏—Å—Ç–æ—Ä–∏–∏
        print(f"üìã –ò—Å—Ç–æ—Ä–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(self.results_history)} –∑–∞–ø–∏—Å–µ–π")
        if self.results_history:
            print("   –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:")
            for i, (key, value) in enumerate(list(self.results_history.items())[-3:], 1):
                sent_time = value.get('date', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                print(f"   {i}. {key} - {sent_time}")
        
        if not BOT_TOKEN or not CHAT_ID:
            print("‚ùå –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–¥–ª—è production, –Ω–æ –Ω–µ –ø—Ä–∏ —Ä—É—á–Ω–æ–º –∑–∞–ø—É—Å–∫–µ)
        if not force_run and not self.should_check_results():
            now = get_moscow_time()
            print(f"‚è∞ –ù–µ –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {now.strftime('%H:%M')} MSK")
            print("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:")
            print("   –ë—É–¥–Ω–∏: 19:30-00:30 (–∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç)")
            print("   –í—ã—Ö–æ–¥–Ω—ã–µ: 11:30-00:30 (–∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç)")
            print("üí° –î–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ force_run=True")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä
        print("\nüîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä...")
        games = await self.fetch_game_results()
        
        if not games:
            print("‚ö†Ô∏è –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∏–≥—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ {len(games)} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∏–≥—Ä:")
        for i, game in enumerate(games, 1):
            print(f"   {i}. {game['our_team']} vs {game['opponent']} ({game['our_score']}:{game['opponent_score']}) - {game['result']}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
        sent_count = 0
        
        for i, game in enumerate(games, 1):
            print(f"\nüéÆ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ {i}/{len(games)}...")
            success = await self.send_game_result(game)
            
            if success:
                sent_count += 1
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
            await asyncio.sleep(2)
        
        print(f"\nüìä –ò–¢–û–ì–ò:")
        print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {sent_count}")
        print(f"üìã –í—Å–µ–≥–æ –∏–≥—Ä: {len(games)}")
        
        if sent_count > 0:
            print("\n‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("\n‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ä–∞–Ω–µ–µ)")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    monitor = GameResultsMonitorFinal()
    await monitor.run_game_results_monitor()

if __name__ == "__main__":
    asyncio.run(main())
