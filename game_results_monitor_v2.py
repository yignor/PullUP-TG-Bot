#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä (–≤–µ—Ä—Å–∏—è 2)
–ü—Ä—è–º–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–æ –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç GameSystemManager
"""

import asyncio
import json
import os
from datetime import datetime, timezone, timedelta
from typing import Dict, Optional, List
import aiohttp
from bs4 import BeautifulSoup
import re

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv
load_dotenv()

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
from datetime_utils import get_moscow_time, is_today

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
BOT_TOKEN = os.getenv('BOT_TOKEN')
CHAT_ID = os.getenv('CHAT_ID')
GAME_MONITOR_HISTORY_FILE = 'game_monitor_history.json'
DAILY_CHECK_FILE = 'daily_games_check.json'

def load_game_monitor_history() -> Dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–≥—Ä"""
    try:
        if os.path.exists(GAME_MONITOR_HISTORY_FILE):
            with open(GAME_MONITOR_HISTORY_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
    return {}

def save_game_monitor_history(history: Dict):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–≥—Ä"""
    try:
        with open(GAME_MONITOR_HISTORY_FILE, 'w', encoding='utf-8') as f:
            json.dump(history, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")

def load_daily_check() -> Dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ"""
    try:
        if os.path.exists(DAILY_CHECK_FILE):
            with open(DAILY_CHECK_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
    return {}

def save_daily_check(check_info: Dict):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ"""
    try:
        with open(DAILY_CHECK_FILE, 'w', encoding='utf-8') as f:
            json.dump(check_info, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")

def create_game_monitor_key(game_info: Dict) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–≥—Ä—ã"""
    return f"{game_info['date']}_{game_info['time']}_{game_info['team1']}_{game_info['team2']}"

class GameResultsMonitorV2:
    """–ö–ª–∞—Å—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä (–≤–µ—Ä—Å–∏—è 2)"""
    
    def __init__(self):
        self.bot = None
        self.monitor_history = load_game_monitor_history()
        self.daily_check = load_daily_check()
        
        if BOT_TOKEN:
            from telegram import Bot
            self.bot = Bot(token=BOT_TOKEN)
    
    def should_continue_today(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ–≥–æ–¥–Ω—è"""
        today = get_moscow_time().strftime('%Y-%m-%d')
        
        if today in self.daily_check:
            check_info = self.daily_check[today]
            if check_info.get('no_games_found', False):
                print(f"üìÖ –°–µ–≥–æ–¥–Ω—è ({today}) —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ - –∏–≥—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è")
                return False
        
        return True
    
    def mark_no_games_today(self):
        """–û—Ç–º–µ—á–∞–µ—Ç, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –∏–≥—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"""
        today = get_moscow_time().strftime('%Y-%m-%d')
        self.daily_check[today] = {
            'no_games_found': True,
            'check_time': get_moscow_time().isoformat()
        }
        save_daily_check(self.daily_check)
        print(f"üìÖ –û—Ç–º–µ—á–µ–Ω–æ: —Å–µ–≥–æ–¥–Ω—è ({today}) –∏–≥—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    def find_target_teams_in_text(self, text: str) -> List[str]:
        """–ù–∞—Ö–æ–¥–∏—Ç —Ü–µ–ª–µ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ —Ç–µ–∫—Å—Ç–µ"""
        found_teams = []
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞)
        search_teams = [
            'Pull Up-–§–∞—Ä–º',  # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            'Pull Up –§–∞—Ä–º',  # –ë–µ–∑ –¥–µ—Ñ–∏—Å–∞
            'Pull Up',       # –û–±—ã—á–Ω—ã–π Pull Up
            'PullUP',        # –ë–µ–∑ –ø—Ä–æ–±–µ–ª–∞
            'PULL UP –§–ê–†–ú'   # –í–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
        ]
        
        for team in search_teams:
            if team.upper() in text.upper():
                found_teams.append(team)
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {team}")
        
        return found_teams
    
    def generate_game_link(self, team1: str, team2: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∏–≥—Ä—É"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–≥—Ä—É
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π URL –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥
            base_url = "http://letobasket.ru/game.html"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∞—è –∏–∑ –∫–æ–º–∞–Ω–¥ –Ω–∞—à–∞
            our_team = None
            opponent = None
            
            target_teams = ['Pull Up-–§–∞—Ä–º', 'Pull Up –§–∞—Ä–º', 'Pull Up', 'PullUP', 'PULL UP –§–ê–†–ú']
            
            if any(team.upper() in team1.upper() for team in target_teams):
                our_team = team1
                opponent = team2
            elif any(team.upper() in team2.upper() for team in target_teams):
                our_team = team2
                opponent = team1
            else:
                return ""
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
            game_link = f"{base_url}?team1={our_team}&team2={opponent}"
            return game_link
            
        except Exception as e:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏: {e}")
            return ""
    
    def extract_scoreboard_section(self, soup) -> tuple:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–∞–∑–¥–µ–ª '–¢–ê–ë–õ–û –ò–ì–†' –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–≥—Ä—ã"""
        try:
            # –ò—â–µ–º —Ä–∞–∑–¥–µ–ª "–¢–ê–ë–õ–û –ò–ì–†"
            scoreboard_text = ""
            game_links = []
            
            # –ò—â–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É "–¢–ê–ë–õ–û –ò–ì–†"
            for element in soup.find_all(text=True):
                if "–¢–ê–ë–õ–û –ò–ì–†" in element:
                    print(f"   üéØ –ù–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç '–¢–ê–ë–õ–û –ò–ì–†'")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    full_text = soup.get_text()
                    
                    # –ò—â–µ–º –ø–æ–∑–∏—Ü–∏—é "–¢–ê–ë–õ–û –ò–ì–†"
                    start_pos = full_text.find("–¢–ê–ë–õ–û –ò–ì–†")
                    if start_pos != -1:
                        # –ò—â–µ–º –∫–æ–Ω–µ—Ü —Ä–∞–∑–¥–µ–ª–∞ (–Ω–∞—á–∞–ª–æ "–ü–û–°–õ–ï–î–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
                        end_pos = full_text.find("–ü–û–°–õ–ï–î–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´", start_pos)
                        
                        if end_pos != -1:
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –º–µ–∂–¥—É "–¢–ê–ë–õ–û –ò–ì–†" –∏ "–ü–û–°–õ–ï–î–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´"
                            scoreboard_text = full_text[start_pos:end_pos]
                        else:
                            # –ï—Å–ª–∏ "–ü–û–°–õ–ï–î–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –±–µ—Ä–µ–º –¥–æ –∫–æ–Ω—Ü–∞
                            scoreboard_text = full_text[start_pos:]
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫–∏ "–°–¢–†–ê–ù–ò–¶–ê –ò–ì–†–´" –∏–∑ –≤—Å–µ–≥–æ HTML (–∫–∞–∫ –≤ Game System Manager)
                        game_links = self.extract_game_links(soup)
                        
                        print(f"   üìã –ò–∑–≤–ª–µ—á–µ–Ω —Ä–∞–∑–¥–µ–ª —Ç–∞–±–ª–æ (–¥–ª–∏–Ω–∞: {len(scoreboard_text)} —Å–∏–º–≤–æ–ª–æ–≤)")
                        print(f"   üîó –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∏–≥—Ä—ã: {len(game_links)}")
                        
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏—â–µ–º –∏–≥—Ä—ã –≤ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
                        html_games = self.extract_games_from_html(soup)
                        if html_games:
                            print(f"   üéÆ –ù–∞–π–¥–µ–Ω–æ –∏–≥—Ä –≤ HTML: {len(html_games)}")
                            return scoreboard_text, game_links, html_games
                        
                        return scoreboard_text, game_links, []
            
            print(f"   ‚ùå –†–∞–∑–¥–µ–ª '–¢–ê–ë–õ–û –ò–ì–†' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return "", [], []
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–∞–±–ª–æ: {e}")
            return "", [], []
    
    def extract_game_links(self, soup) -> list:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Å—ã–ª–∫–∏ '–°–¢–†–ê–ù–ò–¶–ê –ò–ì–†–´' –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ —Ç–∞–±–ª–æ (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ Game System Manager)"""
        try:
            game_links = []
            
            # –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º "–°–¢–†–ê–ù–ò–¶–ê –ò–ì–†–´" (–∫–∞–∫ –≤ Game System Manager)
            for link in soup.find_all('a', href=True):
                if "–°–¢–†–ê–ù–ò–¶–ê –ò–ì–†–´" in link.get_text():
                    href = link.get('href')
                    if href:
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É
                        if href.startswith('game.html'):
                            full_link = f"http://letobasket.ru/{href}"
                        elif href.startswith('/'):
                            full_link = f"http://letobasket.ru{href}"
                        else:
                            full_link = href
                        game_links.append(full_link)
                        print(f"   üîó –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ '–°–¢–†–ê–ù–ò–¶–ê –ò–ì–†–´': {full_link}")
            
            print(f"   üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ '–°–¢–†–ê–ù–ò–¶–ê –ò–ì–†–´': {len(game_links)}")
            return game_links
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫: {e}")
            return []
    
    def extract_recent_results(self, soup) -> List[Dict]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ '–ü–û–°–õ–ï–î–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´'"""
        try:
            games = []
            full_text = soup.get_text()
            
            # –ò—â–µ–º —Ä–∞–∑–¥–µ–ª "–ü–û–°–õ–ï–î–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´"
            if "–ü–û–°–õ–ï–î–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´" in full_text:
                start_pos = full_text.find("–ü–û–°–õ–ï–î–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
                end_pos = full_text.find("–¢–ê–ë–õ–û –ò–ì–†", start_pos)
                
                if end_pos == -1:
                    results_text = full_text[start_pos:]
                else:
                    results_text = full_text[start_pos:end_pos]
                
                print(f"   üìã –ò–∑–≤–ª–µ—á–µ–Ω —Ä–∞–∑–¥–µ–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–¥–ª–∏–Ω–∞: {len(results_text)} —Å–∏–º–≤–æ–ª–æ–≤)")
                
                # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∏–≥—Ä
                # –§–æ—Ä–º–∞—Ç: –î–∞—Ç–∞ - –ö–æ–º–∞–Ω–¥–∞1 - –ö–æ–º–∞–Ω–¥–∞2 –°—á–µ—Ç1:–°—á–µ—Ç2 (–ø–µ—Ä–∏–æ–¥—ã)
                result_pattern = r'(\d{2}\.\d{2}\.\d{4})-\s*([^-]+)-\s*([^-]+)\s+(\d+):(\d+)\s*\([^)]+\)'
                result_matches = re.findall(result_pattern, results_text)
                
                for match in result_matches:
                    date, team1, team2, score1, score2 = match
                    game_text = f"{team1.strip()} {team2.strip()}"
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞—à–∏ –∫–æ–º–∞–Ω–¥—ã –≤ —ç—Ç–æ–π –∏–≥—Ä–µ
                    if self.find_target_teams_in_text(game_text):
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—à—É –∫–æ–º–∞–Ω–¥—É –∏ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
                        our_team = None
                        opponent = None
                        team_type = None
                        
                        if any(target_team in team1 for target_team in ['Pull Up', 'PullUP']):
                            our_team = team1.strip()
                            opponent = team2.strip()
                        elif any(target_team in team2 for target_team in ['Pull Up', 'PullUP']):
                            our_team = team2.strip()
                            opponent = team1.strip()
                        
                        if our_team:
                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã
                            if '—Ñ–∞—Ä–º' in our_team.lower():
                                team_type = '—Å–æ—Å—Ç–∞–≤–∞ —Ä–∞–∑–≤–∏—Ç–∏—è'
                            else:
                                team_type = '–ø–µ—Ä–≤–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞'
                            
                            games.append({
                                'team1': team1.strip(),
                                'team2': team2.strip(),
                                'score1': score1,
                                'score2': score2,
                                'period': '4',  # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã
                                'time': '0:00',  # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã
                                'is_finished': True,
                                'date': date,
                                'current_time': get_moscow_time().strftime('%H:%M'),
                                'game_link': '',  # –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∏–≥—Ä —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞
                                'our_team': our_team,
                                'team_type': team_type
                            })
                            print(f"   üèÄ –ù–∞–π–¥–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –∏–≥—Ä–∞: {team1.strip()} vs {team2.strip()} ({score1}:{score2})")
                            print(f"      –î–∞—Ç–∞: {date}, –¢–∏–ø –∫–æ–º–∞–Ω–¥—ã: {team_type}")
            
            return games
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
            return []
    
    def extract_games_from_html(self, soup) -> List[Dict]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–≥—Ä—ã –∏–∑ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–æ"""
        try:
            games = []
            
            # –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º –∫–æ–º–∞–Ω–¥
            target_teams = ['QUASAR', 'PULL UP', 'HSE', 'TAURUS', 'IT BASKET', '–ö–£–î–†–û–í–û']
            
            for element in soup.find_all(text=True):
                text = element.strip()
                if any(team in text for team in target_teams):
                    parent = element.parent
                    if parent:
                        # –ò—â–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ —Å—á–µ—Ç–æ–º –∏ —Å—Ç–∞—Ç—É—Å–æ–º
                        container = parent.parent
                        if container:
                            # –ò—â–µ–º —Å—á–µ—Ç –∏ —Å—Ç–∞—Ç—É—Å –≤ —Å–æ—Å–µ–¥–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
                            score_elements = container.find_all(text=True)
                            score_text = ' '.join([el.strip() for el in score_elements if el.strip()])
                            
                            # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –∏–≥—Ä—ã: –ö–æ–º–∞–Ω–¥–∞1 –°—á–µ—Ç1 –°—á–µ—Ç2 –ö–æ–º–∞–Ω–¥–∞2 –ü–µ—Ä–∏–æ–¥ –í—Ä–µ–º—è
                            game_pattern = r'([A-Z–ê-–Ø\s]+)\s+(\d+)\s+(\d+)\s+([A-Z–ê-–Ø\s]+)\s+(\d+)\s+(\d+:\d+)'
                            matches = re.findall(game_pattern, score_text)
                            
                            for match in matches:
                                team1, score1, score2, team2, period, time = match
                                game_text = f"{team1.strip()} {team2.strip()}"
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞—à–∏ –∫–æ–º–∞–Ω–¥—ã –≤ —ç—Ç–æ–π –∏–≥—Ä–µ
                                if self.find_target_teams_in_text(game_text):
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ –∏–≥—Ä–∞ (–ø–µ—Ä–∏–æ–¥ 4 –∏ –≤—Ä–µ–º—è 0:00)
                                    is_finished = period == '4' and time == '0:00'
                                    
                                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—à—É –∫–æ–º–∞–Ω–¥—É –∏ —Ç–∏–ø
                                    our_team = None
                                    opponent = None
                                    team_type = None
                                    
                                    if any(target_team in team1 for target_team in ['Pull Up', 'PullUP']):
                                        our_team = team1.strip()
                                        opponent = team2.strip()
                                    elif any(target_team in team2 for target_team in ['Pull Up', 'PullUP']):
                                        our_team = team2.strip()
                                        opponent = team1.strip()
                                    
                                    if our_team:
                                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã
                                        if '—Ñ–∞—Ä–º' in our_team.lower():
                                            team_type = '—Å–æ—Å—Ç–∞–≤–∞ —Ä–∞–∑–≤–∏—Ç–∏—è'
                                        else:
                                            team_type = '–ø–µ—Ä–≤–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞'
                                        
                                        games.append({
                                            'team1': team1.strip(),
                                            'team2': team2.strip(),
                                            'score1': score1,
                                            'score2': score2,
                                            'period': period,
                                            'time': time,
                                            'is_finished': is_finished,
                                            'date': get_moscow_time().strftime('%d.%m.%Y'),
                                            'current_time': get_moscow_time().strftime('%H:%M'),
                                            'game_link': '',  # –ë—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ
                                            'our_team': our_team,
                                            'team_type': team_type
                                        })
                                        print(f"   üèÄ –ù–∞–π–¥–µ–Ω–∞ –∏–≥—Ä–∞ –≤ HTML: {team1.strip()} vs {team2.strip()} ({score1}:{score2})")
                                        print(f"      –ü–µ—Ä–∏–æ–¥: {period}, –í—Ä–µ–º—è: {time}, –ó–∞–≤–µ—Ä—à–µ–Ω–∞: {is_finished}")
            
            return games
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–≥—Ä –∏–∑ HTML: {e}")
            return []
    
    async def scan_scoreboard(self) -> List[Dict]:
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç —Ç–∞–±–ª–æ –∏ –Ω–∞—Ö–æ–¥–∏—Ç –∏–≥—Ä—ã —Å –Ω–∞—à–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ (–≤–∫–ª—é—á–∞—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ)"""
        try:
            print("üîç –°–∫–∞–Ω–∏—Ä—É–µ–º —Ç–∞–±–ª–æ letobasket.ru...")
            
            url = "http://letobasket.ru/"
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as response:
                    if response.status == 200:
                        content = await response.text()
                        soup = BeautifulSoup(content, 'html.parser')
                        
                        # –ò—â–µ–º —Ç–∞–±–ª–æ –∏–≥—Ä
                        games = []
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞–∑–¥–µ–ª "–¢–ê–ë–õ–û –ò–ì–†" –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–≥—Ä—ã
                        scoreboard_text, game_links, html_games = self.extract_scoreboard_section(soup)
                        
                        # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–¥–µ–ª "–ü–û–°–õ–ï–î–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´"
                        recent_results = self.extract_recent_results(soup)
                        
                        if scoreboard_text:
                            print("   ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–æ –∏–≥—Ä")
                            
                            # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –≤ —Ç–µ–∫—Å—Ç–µ
                            all_teams = []
                            
                            # –ò—â–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º (–±–µ–∑ —É—á–µ—Ç–∞ —Å—á–µ—Ç–∞)
                            for team in ['Pull Up-–§–∞—Ä–º', 'Pull Up –§–∞—Ä–º', 'Pull Up', 'PullUP', 'PULL UP –§–ê–†–ú']:
                                if team.upper() in scoreboard_text.upper():
                                    all_teams.append(team)
                                    print(f"   üéØ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –≤ —Ç–∞–±–ª–æ: {team}")
                            
                            if all_teams:
                                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(all_teams)} –Ω–∞—à–∏—Ö –∫–æ–º–∞–Ω–¥ –≤ —Ç–∞–±–ª–æ")
                                
                                # –¢–µ–ø–µ—Ä—å –∏—â–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–µ –∏–≥—Ä—ã –≤ —Ç–∞–±–ª–æ
                                games_found = []
                                
                                # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Ç–µ–∫—É—â–∏—Ö –∏–≥—Ä (–¢–ê–ë–õ–û –ò–ì–†)
                                # –§–æ—Ä–º–∞—Ç: –ö–æ–º–∞–Ω–¥–∞1 –°—á–µ—Ç1 –°—á–µ—Ç2 –ö–æ–º–∞–Ω–¥–∞2 –ü–µ—Ä–∏–æ–¥ –í—Ä–µ–º—è
                                live_pattern = r'(.+?)\s+(\d+)\s+(\d+)\s+(.+?)\s+(\d+)\s+(\d+:\d+)'
                                live_matches = re.findall(live_pattern, scoreboard_text)
                                
                                for i, match in enumerate(live_matches):
                                    team1, score1, score2, team2, period, time = match
                                    game_text = f"{team1.strip()} {team2.strip()}"
                                    
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞—à–∏ –∫–æ–º–∞–Ω–¥—ã –≤ —ç—Ç–æ–π –∏–≥—Ä–µ
                                    if self.find_target_teams_in_text(game_text):
                                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ –∏–≥—Ä–∞ (–ø–µ—Ä–∏–æ–¥ 4 –∏ –≤—Ä–µ–º—è 0:00)
                                        is_finished = period == '4' and time == '0:00'
                                        
                                        # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–≥—Ä—É –ø–æ –ø–æ—Ä—è–¥–∫–æ–≤–æ–º—É –Ω–æ–º–µ—Ä—É
                                        game_link = ""
                                        if i < len(game_links):
                                            game_link = game_links[i]
                                            print(f"   üîó –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Å—ã–ª–∫—É #{i+1}: {game_link}")
                                        else:
                                            print(f"   ‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –¥–ª—è –∏–≥—Ä—ã #{i+1} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                                        
                                        games_found.append({
                                            'team1': team1.strip(),
                                            'team2': team2.strip(),
                                            'score1': score1,
                                            'score2': score2,
                                            'period': period,
                                            'time': time,
                                            'is_finished': is_finished,
                                            'date': get_moscow_time().strftime('%d.%m.%Y'),
                                            'current_time': get_moscow_time().strftime('%H:%M'),
                                            'game_link': game_link
                                        })
                                        print(f"   üèÄ –ù–∞–π–¥–µ–Ω–∞ –∏–≥—Ä–∞ (—Ç–∞–±–ª–æ): {team1.strip()} vs {team2.strip()} ({score1}:{score2})")
                                        print(f"      –ü–µ—Ä–∏–æ–¥: {period}, –í—Ä–µ–º—è: {time}, –ó–∞–≤–µ—Ä—à–µ–Ω–∞: {is_finished}")
                                        if game_link:
                                            print(f"      üîó –°—Å—ã–ª–∫–∞: {game_link}")
                                
                                games.extend(games_found)
                            else:
                                print(f"   ‚ÑπÔ∏è –ù–∞—à–∏—Ö –∫–æ–º–∞–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–∞–±–ª–æ")
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä—ã –∏–∑ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                        if html_games:
                            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(html_games)} –∏–≥—Ä –≤ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä–µ")
                            games.extend(html_games)
                        else:
                            print(f"   ‚ÑπÔ∏è –ò–≥—Ä –≤ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
                        if recent_results:
                            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(recent_results)} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∏–≥—Ä —Å –Ω–∞—à–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏")
                            games.extend(recent_results)
                        else:
                            print(f"   ‚ÑπÔ∏è –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∏–≥—Ä —Å –Ω–∞—à–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                        
                        if games:
                            print(f"   ‚úÖ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {len(games)} –∏–≥—Ä —Å –Ω–∞—à–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏")
                        else:
                            print(f"   ‚ÑπÔ∏è –ò–≥—Ä —Å –Ω–∞—à–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                        
                        return games
                    else:
                        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {response.status}")
                        return []
                        
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–æ: {e}")
            return []
    
    async def parse_game_scoreboard(self, game_link: str) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏—Ç —Ç–∞–±–ª–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–≥—Ä—ã –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL
            if game_link.startswith('game.html?'):
                full_url = f"http://letobasket.ru/{game_link}"
            else:
                full_url = game_link
            
            print(f"üîç –ü–∞—Ä—Å–∏–º —Ç–∞–±–ª–æ: {full_url}")
            
            async with aiohttp.ClientSession() as session:
                async with session.get(full_url) as response:
                    if response.status == 200:
                        content = await response.text()
                        soup = BeautifulSoup(content, 'html.parser')
                        
                        # –ò—â–µ–º iframe —Å –∏–≥—Ä–æ–π
                        iframe = soup.find('iframe', src=True)
                        if not iframe:
                            print("   ‚ùå iframe –Ω–µ –Ω–∞–π–¥–µ–Ω")
                            return None
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ iframe
                        iframe_src = iframe['src']
                        if not iframe_src.startswith('http'):
                            iframe_src = f"http://ig.russiabasket.ru{iframe_src}"
                        
                        print(f"   üîó iframe URL: {iframe_src}")
                        
                        async with session.get(iframe_src) as iframe_response:
                            if iframe_response.status == 200:
                                iframe_content = await iframe_response.text()
                                
                                # –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ iframe
                                return self.parse_iframe_content(iframe_content)
                            else:
                                print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ iframe: {iframe_response.status}")
                                return None
                    else:
                        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {response.status}")
                        return None
                        
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–∞–±–ª–æ: {e}")
            return None
    
    def parse_iframe_content(self, iframe_content: str) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ iframe –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–≥—Ä–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        try:
            soup = BeautifulSoup(iframe_content, 'html.parser')
            
            # –ò—â–µ–º –ø–µ—Ä–∏–æ–¥ –∏ –≤—Ä–µ–º—è
            period_span = soup.find('span', id='js-period')
            timer_span = soup.find('span', id='js-timer')
            
            period = period_span.get_text().strip() if period_span else None
            timer = timer_span.get_text().strip() if timer_span else None
            
            print(f"   üìä –ü–µ—Ä–∏–æ–¥: {period}, –í—Ä–µ–º—è: {timer}")
            
            # –ò—â–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ —Å—á–µ—Ç
            team1_span = soup.find('span', id='js-score-team1')
            team2_span = soup.find('span', id='js-score-team2')
            
            score1 = team1_span.get_text().strip() if team1_span else None
            score2 = team2_span.get_text().strip() if team2_span else None
            
            print(f"   üèÄ –°—á–µ—Ç: {score1} : {score2}")
            
            # –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
            team_names = self.extract_team_names(iframe_content)
            
            return {
                'period': period,
                'timer': timer,
                'score1': score1,
                'score2': score2,
                'team1_name': team_names.get('team1'),
                'team2_name': team_names.get('team2'),
                'is_game_finished': period == '4' and timer == '0:00'
            }
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ iframe: {e}")
            return None
    
    def extract_team_names(self, iframe_content: str) -> Dict[str, str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –∏–∑ iframe"""
        try:
            # –ò—â–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
            soup = BeautifulSoup(iframe_content, 'html.parser')
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
            title = soup.find('title')
            if title:
                title_text = title.get_text()
                # –ü–∞—Ç—Ç–µ—Ä–Ω: "–ö–û–ú–ê–ù–î–ê1 - –ö–û–ú–ê–ù–î–ê2"
                match = re.search(r'([^-]+)\s*-\s*([^-]+)', title_text)
                if match:
                    return {
                        'team1': match.group(1).strip(),
                        'team2': match.group(2).strip()
                    }
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ, –∏—â–µ–º –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥
            
            return {'team1': '–ö–æ–º–∞–Ω–¥–∞ 1', 'team2': '–ö–æ–º–∞–Ω–¥–∞ 2'}
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–º–∞–Ω–¥: {e}")
            return {'team1': '–ö–æ–º–∞–Ω–¥–∞ 1', 'team2': '–ö–æ–º–∞–Ω–¥–∞ 2'}
    
    async def send_game_result_notification(self, game_info: Dict, scoreboard_info: Dict, game_link: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∏–≥—Ä—ã"""
        if not self.bot or not CHAT_ID:
            print("‚ùå –ë–æ—Ç –∏–ª–∏ CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return False
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
            team1 = game_info.get('team1', '')
            team2 = game_info.get('team2', '')
            
            # –ù–∞—Ö–æ–¥–∏–º –Ω–∞—à—É –∫–æ–º–∞–Ω–¥—É –∏ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
            opponent = None
            team_type = "–ø–µ—Ä–≤–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–æ–º–∞–Ω–¥, —á—Ç–æ –∏ –≤ find_target_teams_in_text
            target_teams = ['Pull Up-–§–∞—Ä–º', 'Pull Up –§–∞—Ä–º', 'Pull Up', 'PullUP']
            
            if any(target_team in team1 for target_team in target_teams):
                opponent = team2
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã
                if any(farm_team in team1 for farm_team in ['Pull Up-–§–∞—Ä–º', 'Pull Up –§–∞—Ä–º']):
                    team_type = "—Å–æ—Å—Ç–∞–≤–∞ —Ä–∞–∑–≤–∏—Ç–∏—è"
            elif any(target_team in team2 for target_team in target_teams):
                opponent = team1
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã
                if any(farm_team in team2 for farm_team in ['Pull Up-–§–∞—Ä–º', 'Pull Up –§–∞—Ä–º']):
                    team_type = "—Å–æ—Å—Ç–∞–≤–∞ —Ä–∞–∑–≤–∏—Ç–∏—è"
            
            if not opponent:
                opponent = "—Å–æ–ø–µ—Ä–Ω–∏–∫"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = f"üèÄ –ò–≥—Ä–∞ {team_type} –ø—Ä–æ—Ç–∏–≤ {opponent} –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å\n"
            message += f"üèÜ –°—á–µ—Ç: {scoreboard_info['team1_name']} {scoreboard_info['score1']} : {scoreboard_info['score2']} {scoreboard_info['team2_name']}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª
            if game_link.startswith('game.html?'):
                full_url = f"http://letobasket.ru/{game_link}"
            else:
                full_url = game_link
            message += f"üìä –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª: <a href=\"{full_url}\">—Ç—É—Ç</a>"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.bot.send_message(
                chat_id=int(CHAT_ID),
                text=message,
                parse_mode='HTML'
            )
            
            print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    async def monitor_games(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–≥—Ä"""
        print("üéÆ –ó–ê–ü–£–°–ö –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ò–ì–† (–≤–µ—Ä—Å–∏—è 2)")
        print("=" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è
        if not self.should_continue_today():
            return
        
        # –°–∫–∞–Ω–∏—Ä—É–µ–º —Ç–∞–±–ª–æ
        active_games = await self.scan_scoreboard()
        
        if not active_games:
            print("üìÖ –ò–≥—Ä —Å –Ω–∞—à–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            self.mark_no_games_today()
            return
        
        print(f"üèÄ –ù–∞–π–¥–µ–Ω–æ {len(active_games)} –∏–≥—Ä —Å –Ω–∞—à–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∏–≥—Ä—É
        for i, game in enumerate(active_games, 1):
            print(f"\nüéÆ –ò–ì–†–ê {i}/{len(active_games)}: {game['team1']} vs {game['team2']}")
            print(f"   üìä –°—á–µ—Ç: {game['score1']} : {game['score2']}")
            print(f"   üìÖ –ü–µ—Ä–∏–æ–¥: {game['period']}, –í—Ä–µ–º—è: {game['time']}")
            
            # –°–æ–∑–¥–∞–µ–º game_info –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
            game_info = {
                'team1': game['team1'],
                'team2': game['team2'],
                'date': game['date'],
                'time': game['current_time']
            }
            game_key = create_game_monitor_key(game_info)
            
            if game['is_finished']:
                print(f"   üèÅ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã
                if game_key in self.monitor_history:
                    existing_status = self.monitor_history[game_key].get('status', '')
                    if existing_status == 'completed':
                        print(f"   üìã –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                        continue
                    else:
                        print(f"   üìã –ù–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {existing_status}")
                else:
                    print(f"   üìã –ó–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
                
                print(f"   üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ...")
                
                # –°–æ–∑–¥–∞–µ–º scoreboard_info –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                scoreboard_info = {
                    'team1_name': game['team1'],
                    'team2_name': game['team2'],
                    'score1': game['score1'],
                    'score2': game['score2']
                }
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –∏–≥—Ä—É
                game_link = game.get('game_link', '')
                await self.send_game_result_notification(game_info, scoreboard_info, game_link)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
                self.monitor_history[game_key] = {
                    'game_info': game_info,
                    'status': 'completed',
                    'end_time': get_moscow_time().isoformat()
                }
                save_game_monitor_history(self.monitor_history)
                print(f"   üìã –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ 'completed'")
                
            else:
                print(f"   ‚è≥ –ò–≥—Ä–∞ –µ—â–µ –∏–¥–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏
                if game_key not in self.monitor_history:
                    self.monitor_history[game_key] = {
                        'game_info': game_info,
                        'status': 'monitoring',
                        'start_time': get_moscow_time().isoformat()
                    }
                    save_game_monitor_history(self.monitor_history)
                    print(f"   üìã –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'monitoring'")
                else:
                    print(f"   üìã –ó–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏–∏")
        
        print(f"\n‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
async def run_game_results_monitor_v2():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä (–≤–µ—Ä—Å–∏—è 2)"""
    monitor = GameResultsMonitorV2()
    await monitor.monitor_games()

if __name__ == "__main__":
    asyncio.run(run_game_results_monitor_v2())
