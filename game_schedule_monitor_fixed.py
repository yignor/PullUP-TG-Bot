#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–≥—Ä
"""

import os
import asyncio
import datetime
import json
import aiohttp
import re
from typing import Dict, List, Optional, Any
from dotenv import load_dotenv
from telegram import Bot
from bs4 import BeautifulSoup

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
ANNOUNCEMENTS_TOPIC_ID = os.getenv("ANNOUNCEMENTS_TOPIC_ID", "1282")
TARGET_TEAMS = os.getenv("TARGET_TEAMS", "PullUP,Pull Up-–§–∞—Ä–º")

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤
POLLS_HISTORY_FILE = "game_polls_history.json"

def get_moscow_time():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ú–æ—Å–∫–≤—ã"""
    moscow_tz = datetime.timezone(datetime.timedelta(hours=3))
    return datetime.datetime.now(moscow_tz)

def get_day_of_week(date_str: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏–∑ –¥–∞—Ç—ã"""
    try:
        date_obj = datetime.datetime.strptime(date_str, '%d.%m.%Y')
        days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
        return days[date_obj.weekday()]
    except:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

def get_team_category(team_name: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–æ–º–∞–Ω–¥—ã"""
    if "—Ñ–∞—Ä–º" in team_name.lower():
        return "—Ä–∞–∑–≤–∏—Ç–∏–µ"
    else:
        return "–ø–µ—Ä–≤—ã–π —Å–æ—Å—Ç–∞–≤"

def load_polls_history() -> Dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤"""
    try:
        if os.path.exists(POLLS_HISTORY_FILE):
            with open(POLLS_HISTORY_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø—Ä–æ—Å–æ–≤: {e}")
    return {}

def save_polls_history(history: Dict):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤"""
    try:
        with open(POLLS_HISTORY_FILE, 'w', encoding='utf-8') as f:
            json.dump(history, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø—Ä–æ—Å–æ–≤: {e}")

def create_game_key(game_info: Dict) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∏–≥—Ä—ã"""
    return f"{game_info['date']}_{game_info['time']}_{game_info['team1']}_{game_info['team2']}"

class GameScheduleMonitorFixed:
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–≥—Ä"""
    
    def __init__(self):
        self.bot = None
        self.polls_history = load_polls_history()
        self._init_bot()
    
    def _init_bot(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        if BOT_TOKEN:
            self.bot = Bot(token=BOT_TOKEN)
            print("‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        else:
            print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    def get_target_team_names(self) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–≤—ã—Ö –∫–æ–º–∞–Ω–¥"""
        return [team.strip() for team in TARGET_TEAMS.split(",") if team.strip()]
    
    def find_target_teams_in_text(self, text_block: str) -> List[str]:
        """–ò—â–µ—Ç —Ü–µ–ª–µ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ —Ç–µ–∫—Å—Ç–µ"""
        found = []
        target_teams = self.get_target_team_names()
        
        for team in target_teams:
            # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è PullUP-–ø–æ–¥–æ–±–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
            if re.match(r"^pull", team, re.IGNORECASE) and "up" in team.lower():
                pattern = r"pull\s*[-\s]*up"
                if re.search(pattern, text_block, re.IGNORECASE):
                    found.append(team)
            else:
                # –û–±—ã—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥
                pattern = re.escape(team)
                if re.search(pattern, text_block, re.IGNORECASE):
                    found.append(team)
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        seen = set()
        unique_found = []
        for team in found:
            if team.lower() not in seen:
                unique_found.append(team)
                seen.add(team.lower())
        
        return unique_found
    
    def parse_schedule_text(self, text: str) -> List[Dict]:
        """–ü–∞—Ä—Å–∏—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        games = []
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–≥—Ä: –¥–∞—Ç–∞ –≤—Ä–µ–º—è (–º–µ—Å—Ç–æ) - –∫–æ–º–∞–Ω–¥–∞1 - –∫–æ–º–∞–Ω–¥–∞2
        # –ü—Ä–∏–º–µ—Ä: 20.08.2025 20.30 (–í–û –°–®–û–† –ú–∞–ª—ã–π 66) - –ö–∏—Ä–ø–∏—á–Ω—ã–π –ó–∞–≤–æ–¥ - Pull Up-–§–∞—Ä–º
        pattern = r'(\d{1,2}\.\d{2}\.\d{4})\s+(\d{1,2}\.\d{2})\s+\(([^)]+)\)\s+-\s+([^-]+)\s+-\s+([^-]+)'
        
        matches = re.findall(pattern, text)
        
        for match in matches:
            date_str, time_str, venue, team1, team2 = match
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –≤—Ä–µ–º—è
            full_time = f"{date_str} {time_str}"
            
            # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
            team1 = team1.strip()
            team2 = team2.strip()
            
            game_info = {
                'date': date_str,
                'time': full_time,
                'venue': venue.strip(),
                'team1': team1,
                'team2': team2,
                'full_text': f"{full_time} ({venue}) - {team1} - {team2}"
            }
            
            games.append(game_info)
        
        return games
    
    async def fetch_letobasket_schedule(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä —Å —Å–∞–π—Ç–∞ letobasket.ru"""
        try:
            url = "http://letobasket.ru"
            
            print(f"üåê –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å {url}...")
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url, timeout=30) as response:
                    if response.status != 200:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {response.status}")
                        return []
                    
                    html = await response.text()
                    print(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª—É—á–µ–Ω–∞, —Ä–∞–∑–º–µ—Ä: {len(html)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü–∞—Ä—Å–∏–º HTML
            soup = BeautifulSoup(html, 'html.parser')
            
            # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
            tables = soup.find_all('table')
            
            all_games = []
            
            for table in tables:
                # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Ç–∞–±–ª–∏—Ü—ã
                table_text = table.get_text()
                
                # –ü–∞—Ä—Å–∏–º –∏–≥—Ä—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Ç–∞–±–ª–∏—Ü—ã
                games = self.parse_schedule_text(table_text)
                
                if games:
                    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(games)} –∏–≥—Ä –≤ —Ç–∞–±–ª–∏—Ü–µ")
                    all_games.extend(games)
            
            # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            unique_games = []
            seen_games = set()
            
            for game in all_games:
                game_key = create_game_key(game)
                if game_key not in seen_games:
                    unique_games.append(game)
                    seen_games.add(game_key)
            
            print(f"üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {len(unique_games)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–≥—Ä")
            return unique_games
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
            return []
    
    def should_create_poll_for_game(self, game_info: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å –¥–ª—è –∏–≥—Ä—ã"""
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∏–≥—Ä—ã
        game_key = create_game_key(game_info)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ –æ–ø—Ä–æ—Å –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã
        if game_key in self.polls_history:
            print(f"‚è≠Ô∏è –û–ø—Ä–æ—Å –¥–ª—è –∏–≥—Ä—ã {game_key} —É–∂–µ —Å–æ–∑–¥–∞–Ω —Ä–∞–Ω–µ–µ")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞—à–∏ –∫–æ–º–∞–Ω–¥—ã –≤ –∏–≥—Ä–µ
        game_text = f"{game_info.get('team1', '')} {game_info.get('team2', '')}"
        target_teams = self.find_target_teams_in_text(game_text)
        
        if not target_teams:
            print(f"‚ÑπÔ∏è –ò–≥—Ä–∞ –±–µ–∑ –Ω–∞—à–∏—Ö –∫–æ–º–∞–Ω–¥: {game_info.get('team1', '')} vs {game_info.get('team2', '')}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –∏–≥—Ä—ã (—Å–æ–∑–¥–∞–µ–º –æ–ø—Ä–æ—Å –¥–ª—è –∏–≥—Ä –≤ –±–ª–∏–∂–∞–π—à–∏–µ 30 –¥–Ω–µ–π)
        try:
            game_date = datetime.datetime.strptime(game_info['date'], '%d.%m.%Y').date()
            now = get_moscow_time().date()
            days_until_game = (game_date - now).days
            
            if days_until_game < 0:
                print(f"‚è∞ –ò–≥—Ä–∞ {game_info['date']} —É–∂–µ –ø—Ä–æ—à–ª–∞")
                return False
            elif days_until_game > 30:
                print(f"‚è∞ –ò–≥—Ä–∞ {game_info['date']} —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ (—á–µ—Ä–µ–∑ {days_until_game} –¥–Ω–µ–π)")
                return False
            
            print(f"‚úÖ –ò–≥—Ä–∞ {game_info['date']} –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞ (—á–µ—Ä–µ–∑ {days_until_game} –¥–Ω–µ–π)")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—Ç—ã –∏–≥—Ä—ã: {e}")
            return False
    
    async def create_game_poll(self, game_info: Dict) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç –æ–ø—Ä–æ—Å –¥–ª—è –∏–≥—Ä—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        if not self.bot or not CHAT_ID:
            print("‚ùå –ë–æ—Ç –∏–ª–∏ CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return False
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—à—É –∫–æ–º–∞–Ω–¥—É –∏ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
            team1 = game_info.get('team1', '')
            team2 = game_info.get('team2', '')
            
            if "pull" in team1.lower() and "up" in team1.lower():
                our_team = team1
                opponent = team2
            elif "pull" in team2.lower() and "up" in team2.lower():
                our_team = team2
                opponent = team1
            else:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ PullUP –≤ –∏–≥—Ä–µ")
                return False
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–æ–º–∞–Ω–¥—ã
            team_category = get_team_category(our_team)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
            day_of_week = get_day_of_week(game_info['date'])
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            question = f"–õ–µ—Ç–Ω—è—è –ª–∏–≥–∞, {team_category}, {opponent}: {day_of_week} ({game_info['date']}) {game_info['time'].split()[1]}, {game_info['venue']}"
            
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
            options = [
                "‚úÖ –ì–æ—Ç–æ–≤",
                "‚ùå –ù–µ—Ç", 
                "üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä"
            ]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø—Ä–æ—Å (–ø–æ–∫–∞ –±–µ–∑ —Ç–æ–ø–∏–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
            poll_message = await self.bot.send_poll(
                chat_id=int(CHAT_ID),
                question=question,
                options=options,
                is_anonymous=False,
                allows_multiple_answers=False
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø—Ä–æ—Å–µ
            poll_info = {
                'message_id': poll_message.message_id,
                'poll_id': poll_message.poll.id,
                'question': question,
                'options': options,
                'game_info': game_info,
                'our_team': our_team,
                'opponent': opponent,
                'team_category': team_category,
                'day_of_week': day_of_week,
                'date': get_moscow_time().isoformat(),
                'chat_id': CHAT_ID
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            game_key = create_game_key(game_info)
            self.polls_history[game_key] = poll_info
            save_polls_history(self.polls_history)
            
            print(f"‚úÖ –û–ø—Ä–æ—Å –¥–ª—è –∏–≥—Ä—ã —Å–æ–∑–¥–∞–Ω")
            print(f"üìä ID –æ–ø—Ä–æ—Å–∞: {poll_info['poll_id']}")
            print(f"üèÄ –§–æ—Ä–º–∞—Ç: {question}")
            print(f"üìÖ –î–∞—Ç–∞: {game_info['date']}")
            print(f"üïê –í—Ä–µ–º—è: {game_info['time'].split()[1]}")
            print(f"üìç –ú–µ—Å—Ç–æ: {game_info['venue']}")
            print(f"üë• –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {team_category}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞ –¥–ª—è –∏–≥—Ä—ã: {e}")
            return False
    
    async def check_and_create_game_polls(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–µ—Ç –æ–ø—Ä–æ—Å—ã –¥–ª—è –∏–≥—Ä"""
        try:
            print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–≥—Ä...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            games = await self.fetch_letobasket_schedule()
            
            if not games:
                print("‚ö†Ô∏è –ò–≥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã
            print(f"\nüìä –ù–ê–ô–î–ï–ù–ù–´–ï –ò–ì–†–´:")
            for i, game in enumerate(games, 1):
                print(f"   {i}. {game['full_text']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∏–≥—Ä—É
            created_polls = 0
            for game in games:
                print(f"\nüèÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–≥—Ä—ã: {game.get('team1', '')} vs {game.get('team2', '')}")
                
                if self.should_create_poll_for_game(game):
                    print(f"üìä –°–æ–∑–¥–∞—é –æ–ø—Ä–æ—Å –¥–ª—è –∏–≥—Ä—ã...")
                    if await self.create_game_poll(game):
                        created_polls += 1
            
            print(f"\nüìä –ò–¢–û–ì–û: –°–æ–∑–¥–∞–Ω–æ {created_polls} –Ω–æ–≤—ã—Ö –æ–ø—Ä–æ—Å–æ–≤")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–≥—Ä: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
game_monitor = GameScheduleMonitorFixed()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üèÄ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì –†–ê–°–ü–ò–°–ê–ù–ò–Ø –ò–ì–†")
    print("=" * 60)
    
    moscow_tz = datetime.timezone(datetime.timedelta(hours=3))
    now = datetime.datetime.now(moscow_tz)
    print(f"üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (–ú–æ—Å–∫–≤–∞): {now.strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üìÖ –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'][now.weekday()]}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    bot_token = os.getenv("BOT_TOKEN")
    chat_id = os.getenv("CHAT_ID")
    
    print("üîß –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø:")
    print(f"BOT_TOKEN: {'‚úÖ' if bot_token else '‚ùå'}")
    print(f"CHAT_ID: {'‚úÖ' if chat_id else '‚ùå'}")
    print(f"ANNOUNCEMENTS_TOPIC_ID: {ANNOUNCEMENTS_TOPIC_ID}")
    print(f"TARGET_TEAMS: {TARGET_TEAMS}")
    
    if not all([bot_token, chat_id]):
        print("‚ùå –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return
    
    print(f"‚úÖ CHAT_ID: {chat_id}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ–ø—Ä–æ—Å–æ–≤
    print(f"\nüìã –ò–°–¢–û–†–ò–Ø –°–û–ó–î–ê–ù–ù–´–• –û–ü–†–û–°–û–í:")
    if game_monitor.polls_history:
        for game_key, poll_info in game_monitor.polls_history.items():
            print(f"   üèÄ {game_key}")
            print(f"      üìä ID: {poll_info.get('poll_id', 'N/A')}")
            print(f"      üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {poll_info.get('date', 'N/A')}")
    else:
        print("   üìù –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
    print("\nüîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–≥—Ä...")
    await game_monitor.check_and_create_game_polls()

if __name__ == "__main__":
    asyncio.run(main())
