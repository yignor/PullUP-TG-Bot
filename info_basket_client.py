#!/usr/bin/env python3
"""
–ö–ª–∏–µ–Ω—Ç –¥–ª—è API Infobasket (asb/reg/org.infobasket.su)
–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ/–º–∞—Ç—á–∏ –ø–æ competition-id –∏–ª–∏ competition-tag
–∏ –∏–∑–≤–ª–µ–∫–∞—Ç—å –∏–≥—Ä—ã —Å —É—á–∞—Å—Ç–∏–µ–º —Ü–µ–ª–µ–≤—ã—Ö –∫–æ–º–∞–Ω–¥.
"""

import os
import asyncio
from typing import Any, Dict, List, Optional

import aiohttp
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

INFOBASKET_API_BASE = os.getenv("INFOBASKET_API_BASE", "https://asb.infobasket.su").rstrip("/")
INFOBASKET_COMPETITION_ID = os.getenv("INFOBASKET_COMPETITION_ID")
INFOBASKET_COMPETITION_TAG = os.getenv("INFOBASKET_COMPETITION_TAG")


class InfoBasketClient:
    """–õ–µ–≥–∫–∏–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Infobasket Widget/Comp API."""

    def __init__(self, base_url: Optional[str] = None) -> None:
        self.base_url = (base_url or INFOBASKET_API_BASE).rstrip("/")

    async def _get_json(self, url: str) -> Optional[Dict[str, Any]]:
        try:
            timeout = aiohttp.ClientTimeout(total=20)
            async with aiohttp.ClientSession(timeout=timeout) as session:
                async with session.get(url) as resp:
                    if resp.status == 200:
                        return await resp.json(content_type=None)
                    return None
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Åa {url}: {e}")
            return None

    async def get_issue_by_id(self, issue_id: str) -> Optional[Dict[str, Any]]:
        url = f"{self.base_url}/Widget/CompIssue/{issue_id}?format=json"
        return await self._get_json(url)

    async def get_latest_issue_by_tag(self, tag: str) -> Optional[str]:
        url = f"{self.base_url.replace('asb.', 'org.').replace('reg.', 'org.')}/Comp/GetSeasonsForTag?tag={tag}"
        data = await self._get_json(url)
        # –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è; –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π issueId
        if not data:
            return None
        # –ò—â–µ–º –ø–æ–ª—è, –ø–æ—Ö–æ–∂–∏–µ –Ω–∞ —Å–µ–∑–æ–Ω—ã/–≤—ã–ø—É—Å–∫–∏ —Å id
        candidates: List[str] = []
        def walk(obj: Any) -> None:
            if isinstance(obj, dict):
                if "issueId" in obj and isinstance(obj["issueId"], (str, int)):
                    candidates.append(str(obj["issueId"]))
                for v in obj.values():
                    walk(v)
            elif isinstance(obj, list):
                for v in obj:
                    walk(v)
        walk(data)
        if candidates:
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ —Å–ø–∏—Å–∫—É
            return candidates[-1]
        return None

    @staticmethod
    def _collect_games_from_issue(issue_json: Dict[str, Any]) -> List[Dict[str, Any]]:
        games: List[Dict[str, Any]] = []

        def walk(obj: Any) -> None:
            if isinstance(obj, dict):
                # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, –ø–æ—Ö–æ–∂–∏–µ –Ω–∞ –º–∞—Ç—á
                if any(k in obj for k in ("GameID", "GameId", "gameId")) and (
                    "Team1" in obj or "TeamA" in obj or "Team1Name" in obj or "TeamAName" in obj
                ):
                    games.append(obj)
                # –¢–∞–∫–∂–µ –∏—â–µ–º –≤ –ø–æ–ª—è—Ö Games, Matches, Schedule
                for key in ["Games", "Matches", "Schedule", "Calendar"]:
                    if key in obj and isinstance(obj[key], list):
                        for item in obj[key]:
                            if isinstance(item, dict) and any(k in item for k in ("GameID", "GameId", "gameId")):
                                games.append(item)
                for v in obj.values():
                    walk(v)
            elif isinstance(obj, list):
                for v in obj:
                    walk(v)

        walk(issue_json)
        return games

    @staticmethod
    def _normalize_game(obj: Dict[str, Any]) -> Dict[str, Any]:
        # –ü—Ä–æ–±—É–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—è
        game_id = obj.get("GameID") or obj.get("GameId") or obj.get("gameId")
        team1 = obj.get("Team1Name") or obj.get("TeamAName") or obj.get("Team1") or obj.get("TeamA") or ""
        team2 = obj.get("Team2Name") or obj.get("TeamBName") or obj.get("Team2") or obj.get("TeamB") or ""
        date = obj.get("GameDate") or obj.get("Date") or obj.get("date") or ""
        time = obj.get("GameTime") or obj.get("Time") or obj.get("time") or ""
        venue = obj.get("GymName") or obj.get("Place") or obj.get("Gym") or obj.get("venue") or ""
        status = obj.get("State") or obj.get("Status") or obj.get("state") or ""

        return {
            "game_id": str(game_id) if game_id is not None else "",
            "team1": str(team1).strip(),
            "team2": str(team2).strip(),
            "date": str(date).strip(),
            "time": str(time).strip(),
            "venue": str(venue).strip(),
            "status": str(status).strip(),
        }

    @staticmethod
    def create_game_link(game_id: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∏–≥—Ä—É –ø–æ game_id"""
        if not game_id:
            return ""
        return f"http://letobasket.ru/game.html?gameId={game_id}&apiUrl=https://reg.infobasket.su&lang=ru"

    async def check_game_result(self, game_id: str) -> Optional[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã –ø–æ game_id"""
        if not game_id:
            return None
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ API
            game_data = await self.get_issue_by_id(str(game_id))
            if not game_data:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã {game_id}")
                return None
            
            # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –≤ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã
            result_info = self._extract_game_result(game_data)
            if result_info:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã {game_id}: {result_info}")
                return result_info
            else:
                print(f"‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã {game_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏–≥—Ä–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã {game_id}: {e}")
            return None

    @staticmethod
    def _extract_game_result(game_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∏–≥—Ä—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö API"""
        try:
            # –ò—â–µ–º –ø–æ–ª—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
            result_fields = ['Score', 'Result', 'FinalScore', 'GameResult']
            score_info = None
            
            for field in result_fields:
                if field in game_data:
                    score_info = game_data[field]
                    break
            
            if not score_info:
                # –ò—â–µ–º –≤ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ö
                def find_score(obj):
                    if isinstance(obj, dict):
                        for key, value in obj.items():
                            if any(score_field in key.lower() for score_field in ['score', 'result', 'final']):
                                return value
                            if isinstance(value, (dict, list)):
                                result = find_score(value)
                                if result:
                                    return result
                    elif isinstance(obj, list):
                        for item in obj:
                            result = find_score(item)
                            if result:
                                return result
                    return None
                
                score_info = find_score(game_data)
            
            if score_info:
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Å—á–µ—Ç
                if isinstance(score_info, str):
                    # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É —Å—á–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "85:78")
                    import re
                    score_match = re.search(r'(\d+):(\d+)', score_info)
                    if score_match:
                        team1_score = int(score_match.group(1))
                        team2_score = int(score_match.group(2))
                        return {
                            'team1_score': team1_score,
                            'team2_score': team2_score,
                            'is_finished': True,
                            'raw_score': score_info
                        }
                elif isinstance(score_info, dict):
                    # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    return {
                        'team1_score': score_info.get('Team1Score', 0),
                        'team2_score': score_info.get('Team2Score', 0),
                        'is_finished': score_info.get('IsFinished', False),
                        'raw_score': str(score_info)
                    }
            
            return None
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
            return None

    async def get_schedule(self, issue_id: Optional[str] = None) -> List[Dict[str, Any]]:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º issue_id
        iid = issue_id or INFOBASKET_COMPETITION_ID
        if not iid and INFOBASKET_COMPETITION_TAG:
            iid = await self.get_latest_issue_by_tag(INFOBASKET_COMPETITION_TAG)
        if not iid:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å issue_id –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è Infobasket")
            return []

        print(f"üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è issue_id: {iid}")
        data = await self.get_issue_by_id(str(iid))
        if not data:
            print("‚ùå API –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ")
            return []

        print(f"üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ, –∫–ª—é—á–∏: {list(data.keys())}")
        print(f"üìä –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")
        
        # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏—Ö –¥–∞–Ω–Ω—ã–µ
        all_games = []
        if "Comps" in data:
            for comp in data["Comps"]:
                comp_id = comp.get("CompID")
                if comp_id:
                    print(f"üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è CompID: {comp_id}")
                    comp_data = await self.get_issue_by_id(str(comp_id))
                    if comp_data:
                        print(f"üìä –î–∞–Ω–Ω—ã–µ CompID {comp_id}: {comp_data}")
                        comp_games = self._collect_games_from_issue(comp_data)
                        all_games.extend(comp_games)
                        print(f"üéÆ –ù–∞–π–¥–µ–Ω–æ –∏–≥—Ä –≤ CompID {comp_id}: {len(comp_games)}")
                        
                        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥-—Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö —Ç–æ–∂–µ
                        if "Comps" in comp_data and comp_data["Comps"]:
                            print(f"üîç –ù–∞–π–¥–µ–Ω—ã –ø–æ–¥-—Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è –≤ CompID {comp_id}")
                            for sub_comp in comp_data["Comps"]:
                                sub_comp_id = sub_comp.get("CompID")
                                if sub_comp_id:
                                    print(f"üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥-CompID: {sub_comp_id}")
                                    sub_comp_data = await self.get_issue_by_id(str(sub_comp_id))
                                    if sub_comp_data:
                                        print(f"üìä –î–∞–Ω–Ω—ã–µ –ø–æ–¥-CompID {sub_comp_id}: {sub_comp_data}")
                                        sub_comp_games = self._collect_games_from_issue(sub_comp_data)
                                        all_games.extend(sub_comp_games)
                                        print(f"üéÆ –ù–∞–π–¥–µ–Ω–æ –∏–≥—Ä –≤ –ø–æ–¥-CompID {sub_comp_id}: {len(sub_comp_games)}")
        
        print(f"üéÆ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Å—ã—Ä—ã—Ö –∏–≥—Ä: {len(all_games)}")
        
        if all_games:
            print(f"üìù –ü–µ—Ä–≤–∞—è –∏–≥—Ä–∞: {all_games[0]}")
        
        normalized = [self._normalize_game(g) for g in all_games]
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ game_id
        seen = set()
        deduped: List[Dict[str, Any]] = []
        for g in normalized:
            if g["game_id"] and g["game_id"] not in seen:
                seen.add(g["game_id"])
                deduped.append(g)
        return deduped


# –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç
if __name__ == "__main__":
    async def _main():
        client = InfoBasketClient()
        games = await client.get_schedule()
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∏–≥—Ä: {len(games)}")
        for g in games[:5]:
            print(f" - {g['date']} {g['time']}: {g['team1']} vs {g['team2']} @ {g['venue']} (id={g['game_id']})")
    asyncio.run(_main())


