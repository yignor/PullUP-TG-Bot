#!/usr/bin/env python3
"""
–£–º–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è Infobasket API —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –¥–∞—Ç
–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–∞—Ç—ã –∏–≥—Ä —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π –ø–æ –ú–æ—Å–∫–≤–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±—É–¥—É—â–∏—Ö/–ø—Ä–æ—à–µ–¥—à–∏—Ö –∏–≥—Ä
"""

import asyncio
import aiohttp
import json
from datetime import datetime, timedelta
from typing import List, Dict, Optional
import pytz

class InfobasketSmartParser:
    def __init__(self):
        self.org_api_url = "https://org.infobasket.su"
        self.reg_api_url = "https://reg.infobasket.su"
        self.target_teams = ["PULL UP", "PULLUP", "–ê—Ç–ª–∞–Ω—Ç", "–ê–¢–õ–ê–ù–¢", "–ê—Ç–ª–∞–Ω—Ç 40"]
        
        # –¢–µ–≥–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–æ—Å—Ç–∞–≤–æ–≤
        self.tags = {
            'first_team': 'reg-78-ll-pl',
            'farm_team': 'reg-78-ll-lr'
        }
        
        # –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
        self.moscow_tz = pytz.timezone('Europe/Moscow')
        
    def get_moscow_date(self) -> datetime:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –ø–æ –ú–æ—Å–∫–≤–µ"""
        return datetime.now(self.moscow_tz)
    
    def parse_game_date(self, date_str: str) -> datetime:
        """–ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –∏–≥—Ä—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ DD.MM.YYYY"""
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY
            game_date = datetime.strptime(date_str, '%d.%m.%Y')
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ—Å–∫–æ–≤—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
            game_date = self.moscow_tz.localize(game_date)
            return game_date
        except ValueError:
            return None
    
    def is_future_game(self, game_date: datetime) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–≥—Ä–∞ –±—É–¥—É—â–µ–π"""
        today = self.get_moscow_date().date()
        return game_date.date() > today
    
    def is_today_game(self, game_date: datetime) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–≥—Ä–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π"""
        today = self.get_moscow_date().date()
        return game_date.date() == today
    
    def is_past_game(self, game_date: datetime) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–≥—Ä–∞ –ø—Ä–æ—à–µ–¥—à–µ–π"""
        today = self.get_moscow_date().date()
        return game_date.date() < today
    
    async def get_seasons_for_tag(self, tag: str) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–µ–∑–æ–Ω—ã –ø–æ —Ç–µ–≥—É"""
        url = f"{self.org_api_url}/Comp/GetSeasonsForTag?tag={tag}"
        
        async with aiohttp.ClientSession() as session:
            try:
                async with session.get(url) as response:
                    if response.status == 200:
                        data = await response.json()
                        return data
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–∑–æ–Ω–æ–≤: {response.status}")
                        return []
            except Exception as e:
                print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ–∑–æ–Ω–æ–≤: {e}")
                return []
    
    def get_active_season(self, seasons: List[Dict]) -> Optional[Dict]:
        """–ù–∞—Ö–æ–¥–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ–∑–æ–Ω (—Å–∞–º—ã–π –Ω–æ–≤—ã–π)"""
        if not seasons:
            return None
            
        sorted_seasons = sorted(seasons, key=lambda x: x.get('SeasonYear', 0), reverse=True)
        return sorted_seasons[0]
    
    async def get_calendar_for_comp(self, comp_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∏–≥—Ä –¥–ª—è —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è"""
        url = f"{self.reg_api_url}/Comp/GetCalendar/?comps={comp_id}&format=json"
        
        async with aiohttp.ClientSession() as session:
            try:
                async with session.get(url) as response:
                    if response.status == 200:
                        data = await response.json()
                        return data
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {response.status}")
                        return []
            except Exception as e:
                print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
                return []
    
    def filter_games_by_teams(self, games: List[Dict]) -> List[Dict]:
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç –∏–≥—Ä—ã –ø–æ –Ω–∞—à–∏–º –∫–æ–º–∞–Ω–¥–∞–º"""
        filtered_games = []
        
        for game in games:
            team_a = game.get('ShortTeamNameAru', '')
            team_b = game.get('ShortTeamNameBru', '')
            team_a_full = game.get('TeamNameAru', '')
            team_b_full = game.get('TeamNameBru', '')
            
            for target_team in self.target_teams:
                if (target_team.upper() in team_a.upper() or 
                    target_team.upper() in team_b.upper() or
                    target_team.upper() in team_a_full.upper() or
                    target_team.upper() in team_b_full.upper()):
                    filtered_games.append(game)
                    break
        
        return filtered_games
    
    def categorize_games(self, games: List[Dict]) -> Dict[str, List[Dict]]:
        """–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ—Ç –∏–≥—Ä—ã –ø–æ –¥–∞—Ç–∞–º"""
        today = self.get_moscow_date()
        
        future_games = []
        today_games = []
        past_games = []
        
        for game in games:
            date_str = game.get('GameDate', '')
            if not date_str:
                continue
                
            game_date = self.parse_game_date(date_str)
            if not game_date:
                continue
            
            if self.is_future_game(game_date):
                future_games.append(game)
                print(f"üîÆ –ë–£–î–£–©–ê–Ø –ò–ì–†–ê: {game.get('ShortTeamNameAru')} vs {game.get('ShortTeamNameBru')} ({date_str})")
            elif self.is_today_game(game_date):
                today_games.append(game)
                print(f"üìÖ –ò–ì–†–ê –°–ï–ì–û–î–ù–Ø: {game.get('ShortTeamNameAru')} vs {game.get('ShortTeamNameBru')} ({date_str})")
            else:
                past_games.append(game)
                print(f"‚úÖ –ü–†–û–®–ï–î–®–ê–Ø –ò–ì–†–ê: {game.get('ShortTeamNameAru')} vs {game.get('ShortTeamNameBru')} ({date_str})")
        
        return {
            'future': future_games,
            'today': today_games,
            'past': past_games
        }
    
    def format_poll_data(self, game: Dict) -> Dict:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞"""
        return {
            'game_id': game.get('GameID'),
            'date': game.get('GameDate'),
            'time': game.get('GameTimeMsk'),
            'team_a': game.get('ShortTeamNameAru'),
            'team_b': game.get('ShortTeamNameBru'),
            'venue': game.get('ArenaRu'),
            'comp_name': game.get('CompNameRu'),
            'game_link': f"http://letobasket.ru/game.html?gameId={game.get('GameID')}&apiUrl=https://reg.infobasket.su&lang=ru"
        }
    
    def format_announcement_data(self, game: Dict) -> Dict:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–æ–Ω—Å–∞"""
        return {
            'game_id': game.get('GameID'),
            'date': game.get('GameDate'),
            'time': game.get('GameTimeMsk'),
            'team_a': game.get('ShortTeamNameAru'),
            'team_b': game.get('ShortTeamNameBru'),
            'venue': game.get('ArenaRu'),
            'comp_name': game.get('CompNameRu'),
            'display_date': game.get('DisplayDateTimeMsk'),
            'game_link': f"http://letobasket.ru/game.html?gameId={game.get('GameID')}&apiUrl=https://reg.infobasket.su&lang=ru"
        }
    
    async def get_team_games(self, team_type: str) -> Dict[str, List[Dict]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–≥—Ä—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–µ–π"""
        if team_type not in self.tags:
            return {'future': [], 'today': [], 'past': []}
            
        tag = self.tags[team_type]
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ–∑–æ–Ω—ã
        seasons = await self.get_seasons_for_tag(tag)
        if not seasons:
            return {'future': [], 'today': [], 'past': []}
        
        # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ–∑–æ–Ω
        active_season = self.get_active_season(seasons)
        if not active_season:
            return {'future': [], 'today': [], 'past': []}
        
        comp_id = active_season.get('CompID')
        if not comp_id:
            return {'future': [], 'today': [], 'past': []}
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∏–≥—Ä
        games = await self.get_calendar_for_comp(comp_id)
        if not games:
            return {'future': [], 'today': [], 'past': []}
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–∞—à–∏–º –∫–æ–º–∞–Ω–¥–∞–º
        filtered_games = self.filter_games_by_teams(games)
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º
        categorized = self.categorize_games(filtered_games)
        
        return categorized
    
    async def get_all_team_games(self) -> Dict[str, Dict[str, List[Dict]]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–≥—Ä—ã –¥–ª—è –≤—Å–µ—Ö —Å–æ—Å—Ç–∞–≤–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–µ–π"""
        all_games = {}
        
        for team_type in self.tags.keys():
            print(f"\\nüîç –ê–Ω–∞–ª–∏–∑ –∏–≥—Ä –¥–ª—è {team_type}...")
            games = await self.get_team_games(team_type)
            all_games[team_type] = games
            
            print(f"‚úÖ {team_type}: {len(games['future'])} –±—É–¥—É—â–∏—Ö, {len(games['today'])} —Å–µ–≥–æ–¥–Ω—è, {len(games['past'])} –ø—Ä–æ—à–µ–¥—à–∏—Ö")
        
        return all_games
    
    def get_polls_to_create(self, all_games: Dict[str, Dict[str, List[Dict]]]) -> List[Dict]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫–∏–µ –æ–ø—Ä–æ—Å—ã –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å"""
        polls_to_create = []
        
        for team_type, games in all_games.items():
            for game in games['future']:
                poll_data = self.format_poll_data(game)
                poll_data['team_type'] = team_type
                polls_to_create.append(poll_data)
        
        return polls_to_create
    
    def get_announcements_to_send(self, all_games: Dict[str, Dict[str, List[Dict]]]) -> List[Dict]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫–∏–µ –∞–Ω–æ–Ω—Å—ã –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å"""
        announcements_to_send = []
        
        for team_type, games in all_games.items():
            for game in games['today']:
                announcement_data = self.format_announcement_data(game)
                announcement_data['team_type'] = team_type
                announcements_to_send.append(announcement_data)
        
        return announcements_to_send

async def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–º–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞"""
    parser = InfobasketSmartParser()
    
    try:
        print("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–≥—Ä –¥–ª—è –≤—Å–µ—Ö —Å–æ—Å—Ç–∞–≤–æ–≤...")
        all_games = await parser.get_all_team_games()
        
        print(f"\\n{'='*60}")
        print("–ê–ù–ê–õ–ò–ó –ò–ì–† –ü–û –î–ê–¢–ê–ú")
        print(f"{'='*60}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø—Ä–æ—Å—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
        polls_to_create = parser.get_polls_to_create(all_games)
        print(f"\\nüìä –û–ü–†–û–°–´ –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø: {len(polls_to_create)}")
        for poll in polls_to_create:
            print(f"  üîÆ {poll['team_type']}: {poll['team_a']} vs {poll['team_b']} ({poll['date']} {poll['time']})")
            print(f"     –°—Å—ã–ª–∫–∞: {poll['game_link']}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–Ω–æ–Ω—Å—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        announcements_to_send = parser.get_announcements_to_send(all_games)
        print(f"\\nüìä –ê–ù–û–ù–°–´ –î–õ–Ø –û–¢–ü–†–ê–í–ö–ò: {len(announcements_to_send)}")
        for announcement in announcements_to_send:
            print(f"  üìÖ {announcement['team_type']}: {announcement['team_a']} vs {announcement['team_b']} ({announcement['date']} {announcement['time']})")
            print(f"     –°—Å—ã–ª–∫–∞: {announcement['game_link']}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print(f"\\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        for team_type, games in all_games.items():
            print(f"  {team_type}: {len(games['future'])} –±—É–¥—É—â–∏—Ö, {len(games['today'])} —Å–µ–≥–æ–¥–Ω—è, {len(games['past'])} –ø—Ä–æ—à–µ–¥—à–∏—Ö")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())
