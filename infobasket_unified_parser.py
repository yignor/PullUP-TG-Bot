#!/usr/bin/env python3
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è Infobasket API - —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –æ–±–æ–∏–º–∏ —Å–æ—Å—Ç–∞–≤–∞–º–∏:
1. –ü–µ—Ä–≤—ã–π —Å–æ—Å—Ç–∞–≤ (reg-78-ll-pl)
2. –§–∞—Ä–º —Å–æ—Å—Ç–∞–≤ (reg-78-ll-lr)
"""

import asyncio
import aiohttp
import json
from datetime import datetime
from typing import List, Dict, Optional

class InfobasketUnifiedParser:
    def __init__(self):
        self.org_api_url = "https://org.infobasket.su"
        self.reg_api_url = "https://reg.infobasket.su"
        self.target_teams = ["PULL UP", "PULLUP", "–ê—Ç–ª–∞–Ω—Ç", "–ê–¢–õ–ê–ù–¢", "–ê—Ç–ª–∞–Ω—Ç 40"]
        
        # –¢–µ–≥–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–æ—Å—Ç–∞–≤–æ–≤
        self.tags = {
            'first_team': 'reg-78-ll-pl',
            'farm_team': 'reg-78-ll-lr'
        }
        
    async def get_seasons_for_tag(self, tag: str) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–µ–∑–æ–Ω—ã –ø–æ —Ç–µ–≥—É"""
        url = f"{self.org_api_url}/Comp/GetSeasonsForTag?tag={tag}"
        
        async with aiohttp.ClientSession() as session:
            try:
                async with session.get(url) as response:
                    if response.status == 200:
                        data = await response.json()
                        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —Å–µ–∑–æ–Ω—ã –¥–ª—è —Ç–µ–≥–∞ {tag}: {len(data)} —Å–µ–∑–æ–Ω–æ–≤")
                        return data
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–∑–æ–Ω–æ–≤: {response.status}")
                        return []
            except Exception as e:
                print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ–∑–æ–Ω–æ–≤: {e}")
                return []
    
    def get_active_season(self, seasons: List[Dict]) -> Optional[Dict]:
        """–ù–∞—Ö–æ–¥–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ–∑–æ–Ω (—Å–∞–º—ã–π –Ω–æ–≤—ã–π)"""
        if not seasons:
            return None
            
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≥–æ–¥—É (—Å–∞–º—ã–π –Ω–æ–≤—ã–π –ø–µ—Ä–≤—ã–π)
        sorted_seasons = sorted(seasons, key=lambda x: x.get('SeasonYear', 0), reverse=True)
        active_season = sorted_seasons[0]
        
        print(f"üéØ –ê–∫—Ç–∏–≤–Ω—ã–π —Å–µ–∑–æ–Ω: {active_season.get('NameRu', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (ID: {active_season.get('CompID', '–ù–µ—Ç ID')}, –ì–æ–¥: {active_season.get('SeasonYear', '–ù–µ—Ç –≥–æ–¥–∞')})")
        return active_season
    
    async def get_calendar_for_comp(self, comp_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∏–≥—Ä –¥–ª—è —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è"""
        url = f"{self.reg_api_url}/Comp/GetCalendar/?comps={comp_id}&format=json"
        
        async with aiohttp.ClientSession() as session:
            try:
                async with session.get(url) as response:
                    if response.status == 200:
                        data = await response.json()
                        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è {comp_id}: {len(data)} –∏–≥—Ä")
                        return data
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {response.status}")
                        return []
            except Exception as e:
                print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
                return []
    
    def filter_games_by_teams(self, games: List[Dict], team_type: str = "first") -> List[Dict]:
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç –∏–≥—Ä—ã –ø–æ –Ω–∞—à–∏–º –∫–æ–º–∞–Ω–¥–∞–º"""
        filtered_games = []
        
        for game in games:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
            team_a = game.get('ShortTeamNameAru', '')
            team_b = game.get('ShortTeamNameBru', '')
            team_a_full = game.get('TeamNameAru', '')
            team_b_full = game.get('TeamNameBru', '')
            
            # –ò—â–µ–º –Ω–∞—à–∏ –∫–æ–º–∞–Ω–¥—ã
            for target_team in self.target_teams:
                if (target_team.upper() in team_a.upper() or 
                    target_team.upper() in team_b.upper() or
                    target_team.upper() in team_a_full.upper() or
                    target_team.upper() in team_b_full.upper()):
                    filtered_games.append(game)
                    print(f"üèÄ –ù–∞–π–¥–µ–Ω–∞ –∏–≥—Ä–∞ {team_type}: {team_a} vs {team_b} ({game.get('GameDate', '–ù–µ—Ç –¥–∞—Ç—ã')})")
                    break
        
        return filtered_games
    
    def normalize_game_data(self, game: Dict, team_type: str = "first") -> Dict:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"""
        return {
            'game_id': game.get('GameID'),
            'date': game.get('GameDate'),
            'time': game.get('GameTime'),
            'time_msk': game.get('GameTimeMsk'),
            'team_a': game.get('ShortTeamNameAru'),
            'team_b': game.get('ShortTeamNameBru'),
            'team_a_full': game.get('TeamNameAru'),
            'team_b_full': game.get('TeamNameBru'),
            'score_a': game.get('ScoreA'),
            'score_b': game.get('ScoreB'),
            'status': game.get('GameStatus'),
            'venue': game.get('ArenaRu'),
            'venue_en': game.get('ArenaEn'),
            'comp_name': game.get('CompNameRu'),
            'league_name': game.get('LeagueNameRu'),
            'display_date': game.get('DisplayDateTimeMsk'),
            'team_type': team_type,
            'game_link': f"http://letobasket.ru/game.html?gameId={game.get('GameID')}&apiUrl=https://reg.infobasket.su&lang=ru"
        }
    
    async def get_schedule_for_team(self, team_type: str) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞"""
        if team_type not in self.tags:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã: {team_type}")
            return []
            
        tag = self.tags[team_type]
        print(f"üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è {team_type} (—Ç–µ–≥: {tag})")
        
        # 1. –ü–æ–ª—É—á–∞–µ–º —Å–µ–∑–æ–Ω—ã
        seasons = await self.get_seasons_for_tag(tag)
        if not seasons:
            print("‚ùå –°–µ–∑–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return []
        
        # 2. –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ–∑–æ–Ω
        active_season = self.get_active_season(seasons)
        if not active_season:
            print("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π —Å–µ–∑–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return []
        
        comp_id = active_season.get('CompID')
        if not comp_id:
            print("‚ùå ID —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return []
        
        # 3. –ü–æ–ª—É—á–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∏–≥—Ä
        games = await self.get_calendar_for_comp(comp_id)
        if not games:
            print("‚ùå –ò–≥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return []
        
        # 4. –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–∞—à–∏–º –∫–æ–º–∞–Ω–¥–∞–º
        filtered_games = self.filter_games_by_teams(games, team_type)
        print(f"üèÄ –ù–∞–π–¥–µ–Ω–æ –∏–≥—Ä {team_type}: {len(filtered_games)}")
        
        # 5. –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
        normalized_games = []
        for game in filtered_games:
            normalized = self.normalize_game_data(game, team_type)
            normalized_games.append(normalized)
        
        return normalized_games
    
    async def get_all_schedules(self) -> Dict[str, List[Dict]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö —Å–æ—Å—Ç–∞–≤–æ–≤"""
        all_schedules = {}
        
        for team_type in self.tags.keys():
            print(f"\\n{'='*50}")
            print(f"–û–ë–†–ê–ë–û–¢–ö–ê {team_type.upper()}")
            print(f"{'='*50}")
            
            schedule = await self.get_schedule_for_team(team_type)
            all_schedules[team_type] = schedule
        
        return all_schedules

async def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞"""
    parser = InfobasketUnifiedParser()
    
    try:
        all_schedules = await parser.get_all_schedules()
        
        print(f"\\n{'='*60}")
        print("–ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
        print(f"{'='*60}")
        
        for team_type, games in all_schedules.items():
            print(f"\\nüéÆ {team_type.upper()}: {len(games)} –∏–≥—Ä")
            
            if games:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∏–≥—Ä—ã
                for i, game in enumerate(games[-3:], 1):
                    print(f"  {i}. {game['date']} {game['time_msk']} - {game['team_a']} vs {game['team_b']} ({game['score_a']}-{game['score_b']})")
                    if game['status'] == 0:
                        print(f"     üîÆ –ë–£–î–£–©–ê–Ø –ò–ì–†–ê: {game['game_link']}")
            else:
                print("  ‚ùå –ò–≥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())
