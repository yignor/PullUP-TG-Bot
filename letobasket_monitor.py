import datetime
import os
import asyncio
import aiohttp
import re
import sys
from bs4 import BeautifulSoup
from typing import Any, Optional
from telegram import Bot
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (—É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ Railway)
BOT_TOKEN: str = os.getenv("BOT_TOKEN") or ""
CHAT_ID: str = os.getenv("CHAT_ID") or ""
DRY_RUN = os.getenv("DRY_RUN", "0") == "1"
USE_BROWSER = os.getenv("USE_BROWSER", "0") == "1"

# –í–∞–ª–∏–¥–∏—Ä—É–µ–º, —á—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω—ã
if not DRY_RUN:
    if not BOT_TOKEN:
        print("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        sys.exit(1)
    if not CHAT_ID:
        print("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        sys.exit(1)

bot: Any = None
if not DRY_RUN:
    try:
        # –ù–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ BOT_TOKEN –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ str, –Ω–µ None
        bot = Bot(token=BOT_TOKEN)
        print(f"‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
        sys.exit(1)

# URL –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
LETOBASKET_URL = "http://letobasket.ru/"

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
sent_notifications = set()

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä (–∞–∫—Ç–∏–≤–Ω—ã–µ/–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ)
game_status = {}  # {game_url: {'status': 'active'|'finished', 'last_check': datetime, 'teams': str}}

def is_game_finished(game_info):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –ª–∏ –∏–≥—Ä–∞ (–ø–æ –≤—Ä–µ–º–µ–Ω–∏)"""
    if not game_info or not game_info.get('time'):
        return False
    
    try:
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∏–≥—Ä—ã
        game_time_str = game_info['time']
        time_formats = [
            '%d.%m.%Y %H:%M',
            '%Y-%m-%d %H:%M',
            '%d/%m/%Y %H:%M',
            '%H:%M'
        ]
        
        game_datetime = None
        for fmt in time_formats:
            try:
                if ':' in game_time_str and len(game_time_str.split(':')) == 2:
                    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è, –¥–æ–±–∞–≤–ª—è–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
                    today = datetime.datetime.now().strftime('%Y-%m-%d')
                    time_str_with_date = f"{today} {game_time_str}"
                    game_datetime = datetime.datetime.strptime(time_str_with_date, '%Y-%m-%d %H:%M')
                else:
                    game_datetime = datetime.datetime.strptime(game_time_str, fmt)
                break
            except ValueError:
                continue
        
        if game_datetime:
            now = datetime.datetime.now()
            # –ò–≥—Ä–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞ –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞
            game_end_time = game_datetime + datetime.timedelta(hours=2)
            return now > game_end_time
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã: {e}")
    
    return False

async def check_game_completion(game_url, game_info):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    try:
        if not game_info:
            return
        
        teams_str = f"{game_info.get('team1', '–ö–æ–º–∞–Ω–¥–∞ 1')} vs {game_info.get('team2', '–ö–æ–º–∞–Ω–¥–∞ 2')}"
        game_id = f"game_completion_{game_url}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —ç—Ç–æ–π –∏–≥—Ä–µ
        if game_id in sent_notifications:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –ª–∏ –∏–≥—Ä–∞
        if is_game_finished(game_info):
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            lines = ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–≥—Ä–µ:"]
            lines.append(f"{teams_str}")
            lines.append("")
            lines.append("üèÄ –°—á–µ—Ç:")
            lines.append(" (–±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ)")
            lines.append("")
            lines.append(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: [–¢—É—Ç]({game_url})")
            
            message = "\n".join(lines)
            
            if DRY_RUN:
                print(f"[DRY_RUN] -> send_message (completion): {message}")
            else:
                await bot.send_message(chat_id=CHAT_ID, text=message, parse_mode='Markdown')
            
            sent_notifications.add(game_id)
            print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∏–≥—Ä–µ: {teams_str}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã: {e}")

def _build_target_team_patterns():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ü–µ–ª–µ–≤—ã—Ö –∫–æ–º–∞–Ω–¥.

    –ú–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TARGET_TEAMS (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é),
    –Ω–∞–ø—Ä–∏–º–µ—Ä: "PullUP,–í–∏–∑–æ—Ç–µ–∫".
    –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è "PullUP" (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞–ø–∏—Å–∞–Ω–∏—è).
    """
    targets_csv = os.getenv("TARGET_TEAMS", "PullUP")
    targets = [t.strip() for t in targets_csv.split(",") if t.strip()]

    patterns = []
    for team in targets:
        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥ —Ç–∏–ø–∞ PullUP
        # –ò—â–µ–º –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å "pull" (—Ä–µ–≥–∏—Å—Ç—Ä –Ω–µ –≤–∞–∂–µ–Ω) –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç "up"
        if re.match(r"^pull", team, re.IGNORECASE) and "up" in team.lower():
            patterns.extend([
                # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω: –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å pull, —Å–æ–¥–µ—Ä–∂–∏—Ç up, –º–æ–∂–µ—Ç –±—ã—Ç—å —Å –ø—Ä–æ–±–µ–ª–∞–º–∏/–¥–µ—Ñ–∏—Å–∞–º–∏
                r"pull\s*[-\s]*up",
                r"pull\s*[-\s]*up\s+\w+",
                r"pull\s*[-\s]*up\s*[-\s]*\w+",
                # –¢–∞–∫–∂–µ –∏—â–µ–º —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
                re.escape(team),
                re.escape(team) + r"\s+\w+",
            ])
        else:
            escaped = re.escape(team)
            patterns.extend([
                escaped,
                fr"{escaped}\s+\w+",
            ])
    return patterns

# –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è TARGET_TEAMS
PULLUP_PATTERNS = _build_target_team_patterns()

def find_pullup_team(text_block):
    """–ò—â–µ—Ç –∫–æ–º–∞–Ω–¥—É PullUP –≤ —Ç–µ–∫—Å—Ç–µ —Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞–ø–∏—Å–∞–Ω–∏—è"""
    for pattern in PULLUP_PATTERNS:
        matches = re.findall(pattern, text_block, re.IGNORECASE)
        if matches:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            return matches[0].strip()
    return None

def find_target_teams_in_text(text_block: str) -> "list[str]":
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–≤—ã—Ö –∫–æ–º–∞–Ω–¥, –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –≤ —Ç–µ–∫—Å—Ç–µ (–ø–æ TARGET_TEAMS)."""
    found = []
    for team in get_target_team_names():
        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è PullUP-–ø–æ–¥–æ–±–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        if re.match(r"^pull", team, re.IGNORECASE) and "up" in team.lower():
            # –ò—â–µ–º –ª—é–±—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é pull + up
            pattern = r"pull\s*[-\s]*up"
            if re.search(pattern, text_block, re.IGNORECASE):
                found.append(team)
        else:
            # –û–±—ã—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥
            pattern = re.escape(team)
            if re.search(pattern, text_block, re.IGNORECASE):
                found.append(team)
    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫
    seen = set()
    unique_found = []
    for t in found:
        if t.lower() not in seen:
            unique_found.append(t)
            seen.add(t.lower())
    return unique_found

def get_target_team_names() -> list:
    targets_csv = os.getenv("TARGET_TEAMS", "PullUP")
    return [t.strip() for t in targets_csv.split(",") if t.strip()]

def _build_full_url(base_url: str, href: str) -> str:
    if href.startswith('http'):
        return href
    return base_url.rstrip('/') + '/' + href.lstrip('/')

def extract_game_links_from_soup(soup: BeautifulSoup, base_url: str, max_links: int = 30) -> list:
    links = []
    for a in soup.find_all('a', href=True):
        href = a['href']
        if not href:
            continue
        href_low = href.lower()
        if any(k in href_low for k in ['game.html', 'gameid=', 'match', 'podrobno', 'protocol', 'game']):
            full_url = _build_full_url(base_url, href)
            if full_url not in links:
                links.append(full_url)
        if len(links) >= max_links:
            break
    return links

def team_matches_targets(team_name: Optional[str], targets: list) -> bool:
    if not team_name:
        return False
    lower_name = team_name.lower()
    for t in targets:
        tl = t.lower()
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ PullUP-–ø–æ–¥–æ–±–Ω—ã—Ö –∫–æ–º–∞–Ω–¥: –¥–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–±–µ–ª—ã/–¥–µ—Ñ–∏—Å—ã –º–µ–∂–¥—É pull –∏ up
        if re.match(r"^pull", tl, re.IGNORECASE) and "up" in tl:
            if re.search(r"pull\s*[-\s]*up", lower_name, re.IGNORECASE):
                return True
        else:
            if tl in lower_name:
                return True
    return False

def should_send_game_notification(game_time_str):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∏–≥—Ä–µ –≤ —Ç–µ–∫—É—â–∏–π –∑–∞–ø—É—Å–∫"""
    if not game_time_str:
        return False
    
    try:
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∏–≥—Ä—ã
        time_formats = [
            '%H:%M',
            '%H:%M:%S',
            '%d.%m.%Y %H:%M',
            '%Y-%m-%d %H:%M',
            '%d/%m/%Y %H:%M'
        ]
        
        game_datetime = None
        for fmt in time_formats:
            try:
                if ':' in game_time_str and len(game_time_str.split(':')) >= 2:
                    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è, –¥–æ–±–∞–≤–ª—è–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
                    if len(game_time_str.split(':')) == 2:
                        today = datetime.datetime.now().strftime('%Y-%m-%d')
                        time_str_with_date = f"{today} {game_time_str}"
                        game_datetime = datetime.datetime.strptime(time_str_with_date, '%Y-%m-%d %H:%M')
                    else:
                        game_datetime = datetime.datetime.strptime(game_time_str, fmt)
                    break
            except ValueError:
                continue
        
        if game_datetime:
            now = datetime.datetime.now()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤ –∫–∞–∫–æ–π 30-–º–∏–Ω—É—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–ø–∞–¥–∞–µ—Ç –≤—Ä–µ–º—è –∏–≥—Ä—ã
            game_hour = game_datetime.hour
            game_minute = game_datetime.minute
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞–ø—É—Å–∫–∞ (0-29 –∏–ª–∏ 30-59)
            if game_minute < 30:
                target_hour = game_hour
                target_minute_range = (0, 29)
            else:
                target_hour = game_hour
                target_minute_range = (30, 59)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ —Ç–µ–∫—É—â–∏–π –∑–∞–ø—É—Å–∫ —Å –Ω—É–∂–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
            current_hour = now.hour
            current_minute = now.minute
            
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è –∏–≥—Ä—ã —Å–µ–≥–æ–¥–Ω—è –∏ –≤ –Ω—É–∂–Ω–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ
            if (game_datetime.date() == now.date() and 
                current_hour == target_hour and 
                target_minute_range[0] <= current_minute <= target_minute_range[1]):
                return True
            
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è –∏–≥—Ä—ã –∑–∞–≤—Ç—Ä–∞ –∏ —Å–µ–π—á–∞—Å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫ –¥–Ω—è (23:30-23:59)
            if (game_datetime.date() == now.date() + datetime.timedelta(days=1) and 
                current_hour == 23 and current_minute >= 30):
                return True
                
        return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return False

async def parse_game_info(game_url):
    """–ü–∞—Ä—Å–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏–≥—Ä–µ —Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–≥—Ä—ã"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(game_url) as response:
                if response.status == 200:
                    html_content = await response.text()
                    
                    # –ü–∞—Ä—Å–∏–º HTML
                    soup = BeautifulSoup(html_content, 'html.parser')
                    
                    # 1) –ü—ã—Ç–∞–µ–º—Å—è –¥–æ—Å—Ç–∞—Ç—å –¥–∞—Ç—É/–≤—Ä–µ–º—è –∏ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –±–ª–æ–∫–∞ el-tournament-head
                    game_time = None
                    team1_name = None
                    team2_name = None

                    head_block = soup.find('div', class_='el-tournament-head')
                    if head_block:
                        head_text = head_block.get_text(separator=' ', strip=True)
                        if DRY_RUN:
                            print(f"[DRY_RUN] el-tournament-head: {head_text}")

                        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä—É—Å—Å–∫–∏—Ö –º–µ—Å—è—Ü–µ–≤
                        month_map = {
                            '—è–Ω–≤–∞—Ä—è': '01', '—Ñ–µ–≤—Ä–∞–ª—è': '02', '–º–∞—Ä—Ç–∞': '03', '–∞–ø—Ä–µ–ª—è': '04', '–º–∞—è': '05',
                            '–∏—é–Ω—è': '06', '–∏—é–ª—è': '07', '–∞–≤–≥—É—Å—Ç–∞': '08', '—Å–µ–Ω—Ç—è–±—Ä—è': '09', '–æ–∫—Ç—è–±—Ä—è': '10',
                            '–Ω–æ—è–±—Ä—è': '11', '–¥–µ–∫–∞–±—Ä—è': '12'
                        }

                        def extract_datetime_from_text(text: str) -> Optional[str]:
                            # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã (–¥–∞—Ç–∞+–≤—Ä–µ–º—è)
                            patterns_combo = [
                                r"(\d{1,2}[./]\d{1,2}[./]\d{2,4})\s+(\d{1,2}[:.]\d{2}(?:[:.]\d{2})?)",
                                r"(\d{1,2})\s+(—è–Ω–≤–∞—Ä—è|—Ñ–µ–≤—Ä–∞–ª—è|–º–∞—Ä—Ç–∞|–∞–ø—Ä–µ–ª—è|–º–∞—è|–∏—é–Ω—è|–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è|–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è|–¥–µ–∫–∞–±—Ä—è)\s*(\d{4})?\s*(?:–≤\s+)?(\d{1,2}[:.]\d{2}(?:[:.]\d{2})?)",
                                r"(\d{1,2}[:.]\d{2}(?:[:.]\d{2})?)\s+(\d{1,2}[./]\d{1,2}[./]\d{2,4})",
                            ]
                            for pat in patterns_combo:
                                m = re.search(pat, text, re.IGNORECASE)
                                if m:
                                    if len(m.groups()) == 2:
                                        # dd.mm.yyyy HH:MM[:SS]  –∏–ª–∏  HH:MM[:SS] dd.mm.yyyy (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ : –∏ .)
                                        if re.match(r"\d{1,2}[./]", m.group(1)):
                                            return f"{m.group(1)} {m.group(2)}".strip().rstrip(',')
                                        return f"{m.group(2)} {m.group(1)}".strip().rstrip(',')
                                    else:
                                        # dd <month> [yyyy] [–≤ ] HH:MM[:SS]
                                        day = int(m.group(1))
                                        month_name = m.group(2).lower()
                                        year = m.group(3) or str(datetime.datetime.now().year)
                                        time_part = m.group(4)
                                        month_num = month_map.get(month_name)
                                        if month_num:
                                            return f"{day:02d}.{month_num}.{year} {time_part}".strip().rstrip(',')
                            # –û—Ç–¥–µ–ª—å–Ω–æ –¥–∞—Ç–∞ –∏ –æ—Ç–¥–µ–ª—å–Ω–æ –≤—Ä–µ–º—è
                            date_numeric = re.search(r"(\d{1,2}[./]\d{1,2}[./]\d{2,4})", text)
                            date_russian = re.search(r"(\d{1,2})\s+(—è–Ω–≤–∞—Ä—è|—Ñ–µ–≤—Ä–∞–ª—è|–º–∞—Ä—Ç–∞|–∞–ø—Ä–µ–ª—è|–º–∞—è|–∏—é–Ω—è|–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è|–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è|–¥–µ–∫–∞–±—Ä—è)\s*(\d{4})?", text, re.IGNORECASE)
                            time_match = re.search(r"\b(\d{1,2}[:.]\d{2}(?:[:.]\d{2})?)\b", text)
                            if time_match:
                                if date_numeric:
                                    return f"{date_numeric.group(1)} {time_match.group(1)}".strip().rstrip(',')
                                if date_russian:
                                    day = int(date_russian.group(1))
                                    month_name = date_russian.group(2).lower()
                                    year = date_russian.group(3) or str(datetime.datetime.now().year)
                                    month_num = month_map.get(month_name)
                                    if month_num:
                                        return f"{day:02d}.{month_num}.{year} {time_match.group(1)}".strip().rstrip(',')
                                # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è ‚Äî –≤–µ—Ä–Ω–µ–º –≤—Ä–µ–º—è
                                return time_match.group(1).strip().rstrip(',')
                            return None

                        extracted_dt = extract_datetime_from_text(head_text)
                        if extracted_dt:
                            game_time = extracted_dt

                        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏: " - ", "‚Äî", "–ø—Ä–æ—Ç–∏–≤", "vs"
                        splits = re.split(r"\s+-\s+|\s+‚Äî\s+|–ø—Ä–æ—Ç–∏–≤|vs|VS|Vs", head_text, maxsplit=1)
                        if len(splits) == 2:
                            team1_name = splits[0].strip()
                            team2_name = splits[1].strip()

                    # 2) –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∫–æ–º–∞–Ω–¥—ã –∏–∑ DOM: left/right -> comman/name
                    if not team1_name or not team2_name:
                        # –í—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –Ω–∞–ø–∏—Å–∞–Ω–∏–µ class="comman"; –¥–æ–±–∞–≤–∏–º —Ä–µ–∑–µ—Ä–≤ –Ω–∞ —Å–ª—É—á–∞–π class="command"
                        left_block = soup.find('div', class_='left')
                        right_block = soup.find('div', class_='right')

                        def get_team_name(root):
                            if not root:
                                return None
                            name_node = None
                            # –°–Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–≥–æ –ø–æ –∏–µ—Ä–∞—Ä—Ö–∏–∏
                            comman = root.find('div', class_='comman') or root.find('div', class_='command')
                            if comman:
                                name_node = comman.find('div', class_='name')
                            # –§–æ–ª–±—ç–∫: –∏—Å–∫–∞—Ç—å name –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –±–ª–æ–∫–∞
                            if not name_node:
                                name_node = root.find('div', class_='name')
                            return name_node.get_text(strip=True) if name_node else None

                        extracted_left = get_team_name(left_block)
                        extracted_right = get_team_name(right_block)
                        team1_name = team1_name or extracted_left
                        team2_name = team2_name or extracted_right

                    # –ï—Å–ª–∏ –≤—Ä–µ–º—è/–∫–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ
                    if USE_BROWSER and (not game_time or not team1_name or not team2_name):
                        try:
                            from pyppeteer import launch
                            browser = await launch(args=['--no-sandbox', '--disable-setuid-sandbox'], headless=True)
                            page = await browser.newPage()
                            await page.setViewport({"width": 1280, "height": 800})
                            await page.goto(game_url, {"waitUntil": "networkidle2", "timeout": 30000})
                            # –ù–µ –≤—Å–µ–≥–¥–∞ head –ø–æ—è–≤–ª—è–µ—Ç—Å—è –±—ã—Å—Ç—Ä–æ ‚Äî –∂–¥—ë–º, –Ω–æ –Ω–µ –ø–∞–¥–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç
                            try:
                                await page.waitForSelector('div.el-tournament-head', {"timeout": 10000})
                            except Exception:
                                pass
                            head_text = await page.evaluate("() => { const el = document.querySelector('div.el-tournament-head'); return el ? el.innerText : ''; }")
                            if DRY_RUN:
                                print(f"[DRY_RUN] el-tournament-head (browser): {head_text}")
                            if head_text:
                                # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                                # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä—É—Å—Å–∫–∏—Ö –º–µ—Å—è—Ü–µ–≤
                                month_map = {
                                    '—è–Ω–≤–∞—Ä—è': '01', '—Ñ–µ–≤—Ä–∞–ª—è': '02', '–º–∞—Ä—Ç–∞': '03', '–∞–ø—Ä–µ–ª—è': '04', '–º–∞—è': '05',
                                    '–∏—é–Ω—è': '06', '–∏—é–ª—è': '07', '–∞–≤–≥—É—Å—Ç–∞': '08', '—Å–µ–Ω—Ç—è–±—Ä—è': '09', '–æ–∫—Ç—è–±—Ä—è': '10',
                                    '–Ω–æ—è–±—Ä—è': '11', '–¥–µ–∫–∞–±—Ä—è': '12'
                                }
                                def extract_dt(text: str):
                                    patterns_combo = [
                                        r"(\d{1,2}[./]\d{1,2}[./]\d{2,4})\s+(\d{1,2}[:.]\d{2}(?:[:.]\d{2})?)",
                                        r"(\d{1,2})\s+(—è–Ω–≤–∞—Ä—è|—Ñ–µ–≤—Ä–∞–ª—è|–º–∞—Ä—Ç–∞|–∞–ø—Ä–µ–ª—è|–º–∞—è|–∏—é–Ω—è|–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è|–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è|–¥–µ–∫–∞–±—Ä—è)\s*(\d{4})?\s*(?:–≤\s+)?(\d{1,2}[:.]\d{2}(?:[:.]\d{2})?)",
                                        r"(\d{1,2}[:.]\d{2}(?:[:.]\d{2})?)\s+(\d{1,2}[./]\d{1,2}[./]\d{2,4})",
                                    ]
                                    for pat in patterns_combo:
                                        m = re.search(pat, text, re.IGNORECASE)
                                        if m:
                                            if len(m.groups()) == 2:
                                                if re.match(r"\d{1,2}[./]", m.group(1)):
                                                    return f"{m.group(1)} {m.group(2)}".strip().rstrip(',')
                                                return f"{m.group(2)} {m.group(1)}".strip().rstrip(',')
                                            else:
                                                day = int(m.group(1))
                                                month_name = m.group(2).lower()
                                                year = m.group(3) or str(datetime.datetime.now().year)
                                                time_part = m.group(4)
                                                month_num = month_map.get(month_name)
                                                if month_num:
                                                    return f"{day:02d}.{month_num}.{year} {time_part}".strip().rstrip(',')
                                    # –û—Ç–¥–µ–ª—å–Ω–æ
                                    date_numeric = re.search(r"(\d{1,2}[./]\d{1,2}[./]\d{2,4})", text)
                                    date_russian = re.search(r"(\d{1,2})\s+(—è–Ω–≤–∞—Ä—è|—Ñ–µ–≤—Ä–∞–ª—è|–º–∞—Ä—Ç–∞|–∞–ø—Ä–µ–ª—è|–º–∞—è|–∏—é–Ω—è|–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è|–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è|–¥–µ–∫–∞–±—Ä—è)\s*(\d{4})?", text, re.IGNORECASE)
                                    time_match = re.search(r"\b(\d{1,2}[:.]\d{2}(?:[:.]\d{2})?)\b", text)
                                    if time_match:
                                        if date_numeric:
                                            return f"{date_numeric.group(1)} {time_match.group(1)}".strip().rstrip(',')
                                        if date_russian:
                                            day = int(date_russian.group(1))
                                            month_name = date_russian.group(2).lower()
                                            year = date_russian.group(3) or str(datetime.datetime.now().year)
                                            month_num = month_map.get(month_name)
                                            if month_num:
                                                return f"{day:02d}.{month_num}.{year} {time_match.group(1)}".strip().rstrip(',')
                                        return time_match.group(1).strip().rstrip(',')
                                    return None
                                dt = extract_dt(head_text)
                                if dt:
                                    game_time = dt
                                # –ö–æ–º–∞–Ω–¥—ã
                                splits = re.split(r"\s+-\s+|\s+‚Äî\s+|–ø—Ä–æ—Ç–∏–≤|vs|VS|Vs", head_text, maxsplit=1)
                                if len(splits) == 2:
                                    team1_name = team1_name or splits[0].strip()
                                    team2_name = team2_name or splits[1].strip()

                                # –ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã—Ç–∞—â–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –ø–æ DOM-—Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –≤—Å–µ—Ö —Ñ—Ä–µ–π–º–æ–≤
                                if not team1_name or not team2_name:
                                    try:
                                        js_fn = "() => {\n  const pick = (root) => {\n    if (!root) return '';\n    const trySelectors = [\n      'div.comman div.name',\n      'div.command div.name',\n      'div.name',\n      'div.comman a',\n      'div.command a',\n      'div.name a',\n      'a.name',\n      'span.name',\n      '.team-name',\n    ];\n    for (const sel of trySelectors) {\n      const el = root.querySelector(sel);\n      if (el && el.textContent) {\n        return el.textContent.trim();\n      }\n    }\n    return (root.innerText || '').trim();\n  };\n  const left = document.querySelector('div.left');\n  const right = document.querySelector('div.right');\n  return { left: pick(left), right: pick(right) };\n}"
                                        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ
                                        names = await page.evaluate(js_fn)
                                        if DRY_RUN:
                                            print(f"[DRY_RUN] browser teams (main): {names}")
                                        if names:
                                            if not team1_name and names.get('left'):
                                                team1_name = names.get('left')
                                            if not team2_name and names.get('right'):
                                                team2_name = names.get('right')
                                        # –ï—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî –ø—Ä–æ–±—É–µ–º –≤–æ –≤—Å–µ—Ö —Ñ—Ä–µ–π–º–∞—Ö
                                        if (not names or (not names.get('left') and not names.get('right'))):
                                            picked = None
                                            for fr in page.frames:
                                                try:
                                                    n = await fr.evaluate(js_fn)
                                                    if n and (n.get('left') or n.get('right')):
                                                        picked = { 'names': n, 'url': fr.url }
                                                        break
                                                except Exception:
                                                    continue
                                            if picked and DRY_RUN:
                                                print(f"[DRY_RUN] browser teams (frame {picked['url']}): {picked['names']}")
                                            if picked:
                                                if not team1_name:
                                                    team1_name = picked['names'].get('left') or team1_name
                                                if not team2_name:
                                                    team2_name = picked['names'].get('right') or team2_name
                                    except Exception as __e:
                                        if DRY_RUN:
                                            print(f"[DRY_RUN] Browser team extraction failed: {__e}")
                            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é
                            await browser.close()
                        except Exception as _e:
                            if DRY_RUN:
                                print(f"[DRY_RUN] Browser fallback failed: {_e}")

                    # –ò—â–µ–º –≤—Ä–µ–º—è –∏–≥—Ä—ã –≤ —ç–ª–µ–º–µ–Ω—Ç–µ —Å –∫–ª–∞—Å—Å–æ–º fa-calendar
                    time_element = soup.find('i', class_='fa fa-calendar')
                    
                    if time_element:
                        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∏–∫–æ–Ω–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
                        time_text = time_element.get_text().strip()
                        if time_text:
                            game_time = time_text
                        else:
                            # –ò—â–µ–º –≤—Ä–µ–º—è –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ
                            parent = time_element.parent
                            if parent:
                                time_text = parent.get_text().strip()
                                game_time = time_text
                    
                    # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å protocol.team1.TeamRegionName –∏ protocol.team2.TeamRegionName
                    page_text = soup.get_text()
                    
                    # –ò—â–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ —Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    team_patterns = [
                        r'protocol\.team1\.TeamRegionName[:\s]*([^\n\r]+)',
                        r'protocol\.team2\.TeamRegionName[:\s]*([^\n\r]+)',
                        r'–ö–æ–º–∞–Ω–¥–∞ 1[:\s]*([^\n\r]+)',
                        r'–ö–æ–º–∞–Ω–¥–∞ 2[:\s]*([^\n\r]+)',
                        r'Team 1[:\s]*([^\n\r]+)',
                        r'Team 2[:\s]*([^\n\r]+)'
                    ]
                    
                    for pattern in team_patterns:
                        matches = re.findall(pattern, page_text, re.IGNORECASE)
                        if matches:
                            if 'team1' in pattern or '–ö–æ–º–∞–Ω–¥–∞ 1' in pattern or 'Team 1' in pattern:
                                team1_name = matches[0].strip()
                            elif 'team2' in pattern or '–ö–æ–º–∞–Ω–¥–∞ 2' in pattern or 'Team 2' in pattern:
                                team2_name = matches[0].strip()
                    
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ—Ç–æ–∫–æ–ª, –∏—â–µ–º –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
                    if not team1_name or not team2_name:
                        # –ò—â–µ–º –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö h1, h2, h3
                        headers = soup.find_all(['h1', 'h2', 'h3'])
                        for header in headers:
                            header_text = header.get_text().strip()
                            if '–ø—Ä–æ—Ç–∏–≤' in header_text.lower() or 'vs' in header_text.lower():
                                # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ "–ø—Ä–æ—Ç–∏–≤" –∏–ª–∏ "vs"
                                if '–ø—Ä–æ—Ç–∏–≤' in header_text.lower():
                                    teams = header_text.split('–ø—Ä–æ—Ç–∏–≤')
                                else:
                                    teams = header_text.split('vs')
                                
                                if len(teams) >= 2:
                                    team1_name = teams[0].strip()
                                    team2_name = teams[1].strip()
                                    break
                    
                    return {
                        'time': game_time,
                        'team1': team1_name,
                        'team2': team2_name
                    }
                else:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–≥—Ä—ã: {response.status}")
                    return None
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∏–≥—Ä–µ: {e}")
        return None

async def check_game_start(game_info, game_url):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã"""
    try:
        if not game_info or not game_info['time']:
            return
        
        if should_send_game_notification(game_info['time']):
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã
            start_notification_id = f"game_start_{game_url}"
            
            if start_notification_id not in sent_notifications:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                team1 = game_info['team1'] or "–ö–æ–º–∞–Ω–¥–∞ 1"
                team2 = game_info['team2'] or "–ö–æ–º–∞–Ω–¥–∞ 2"
                
                message = f"üèÄ –ò–≥—Ä–∞ {team1} –ø—Ä–æ—Ç–∏–≤ {team2} –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤ {game_info['time']}!\n\n–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–≥—Ä—É: {game_url}"
                if DRY_RUN:
                    print(f"[DRY_RUN] -> send_message: {message}")
                else:
                    await bot.send_message(chat_id=CHAT_ID, text=message)
                sent_notifications.add(start_notification_id)
                print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã: {team1} vs {team2} –≤ {game_info['time']}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã: {e}")

async def check_letobasket_site():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∞–π—Ç letobasket.ru –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏–≥—Ä PullUP"""
    try:
        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å–∞–π—Ç {LETOBASKET_URL}...")
        
        async with aiohttp.ClientSession() as session:
            async with session.get(LETOBASKET_URL) as response:
                if response.status == 200:
                    html_content = await response.text()
                    
                    # –ü–∞—Ä—Å–∏–º HTML
                    soup = BeautifulSoup(html_content, 'html.parser')
                    
                    # –ò—â–µ–º –±–ª–æ–∫ –º–µ–∂–¥—É "–¢–∞–±–ª–æ –∏–≥—Ä—ã" –∏ "online –≤–∏–¥–µ–æ—Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –∏–≥—Ä –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"
                    page_text = soup.get_text()
                    
                    # –ò—â–µ–º –Ω–∞—á–∞–ª–æ –±–ª–æ–∫–∞ "–¢–∞–±–ª–æ –∏–≥—Ä—ã"
                    start_marker = "–¢–∞–±–ª–æ –∏–≥—Ä—ã"
                    end_marker = "online –≤–∏–¥–µ–æ—Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –∏–≥—Ä –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"
                    
                    start_index = page_text.find(start_marker)
                    end_index = page_text.find(end_marker)
                    
                    targets = get_target_team_names()
                    found_targets = []
                    if start_index != -1 and end_index != -1 and start_index < end_index:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω—É–∂–Ω—ã–π –±–ª–æ–∫ —Ç–µ–∫—Å—Ç–∞
                        target_block = page_text[start_index:end_index]
                        
                        # –ò—â–µ–º –∫–æ–º–∞–Ω–¥—É PullUP —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∞—Ä–∏–∞—Ü–∏–π
                        pullup_team = find_pullup_team(target_block)
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏—â–µ–º –≤—Å–µ —Ü–µ–ª–µ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ —Å–ø–∏—Å–∫–∞ TARGET_TEAMS
                        for t in targets:
                            if re.search(re.escape(t), target_block, re.IGNORECASE):
                                found_targets.append(t)
                        
                        if pullup_team or found_targets:
                            primary = pullup_team or (found_targets[0] if found_targets else None)
                            print(f"üèÄ –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–ª–µ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞: {primary}")
                            
                            # –ò—â–µ–º —Å—Å—ã–ª–∫—É "–°–¢–†–ê–ù–ò–¶–ê –ò–ì–†–´" –≤ HTML
                            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã-—Å—Å—ã–ª–∫–∏ –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ü–µ–ª–µ–≤—ã–º –∫–æ–º–∞–Ω–¥–∞–º
                            candidate_links = extract_game_links_from_soup(soup, LETOBASKET_URL)
                            matched_games = []
                            for link_url in candidate_links:
                                game_info = await parse_game_info(link_url)
                                if not game_info:
                                    continue
                                t1 = game_info.get('team1')
                                t2 = game_info.get('team2')
                                if team_matches_targets(t1, targets) or team_matches_targets(t2, targets):
                                    matched_games.append((link_url, game_info))

                            if matched_games:
                                lines = ["üèÄ –ò–≥—Ä—ã —Å–µ–≥–æ–¥–Ω—è:"]
                                for link_url, info in matched_games:
                                    n1 = info.get('team1') or '–ö–æ–º–∞–Ω–¥–∞ 1'
                                    n2 = info.get('team2') or '–ö–æ–º–∞–Ω–¥–∞ 2'
                                    lines.append(f" {n1} vs {n2}")
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏ —Å—Å—ã–ª–∫–∏
                                lines.append("")
                                lines.append("üìÖ –î–∞—Ç–∞ –∏ –í—Ä–µ–º—è:")
                                for link_url, info in matched_games:
                                    tm = info.get('time') or '–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ'
                                    lines.append(f" {tm}")
                                
                                lines.append("")
                                lines.append("üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–≥—Ä—É:")
                                for link_url, info in matched_games:
                                    lines.append(f" [–¢—É—Ç]({link_url})")
                                
                                message = "\n".join(lines)
                                id_base = "|".join([u for (u, _) in matched_games])
                                notification_id = f"targets_{hash(id_base)}"
                                if notification_id not in sent_notifications:
                                    if DRY_RUN:
                                        print(f"[DRY_RUN] -> send_message: {message}")
                                    else:
                                        await bot.send_message(chat_id=CHAT_ID, text=message, parse_mode='Markdown')
                                    sent_notifications.add(notification_id)
                                    print("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ü–µ–ª–µ–≤—ã—Ö –∏–≥—Ä–∞—Ö")
                                for link_url, info in matched_games:
                                    await check_game_start(info, link_url)
                                    # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä
                                    await check_game_completion(link_url, info)
                            else:
                                print("üìä –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏–≥—Ä –ø–æ —Ü–µ–ª–µ–≤—ã–º –∫–æ–º–∞–Ω–¥–∞–º —Å—Ä–µ–¥–∏ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                                        
                            
                        else:
                            print("üìä –¶–µ–ª–µ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º –±–ª–æ–∫–µ, —Å–∫–∞–Ω–∏—Ä—É—é –≤—Å—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –≤–∞–ª–∏–¥–∏—Ä—É—é —Å—Å—ã–ª–∫–∏")
                            # –§–æ–ª–±—ç–∫-–∞–≥—Ä–µ–≥–∞—Ü–∏—è: —Å–æ–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫–∏ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ü–µ–ª–µ–≤—ã–º –∫–æ–º–∞–Ω–¥–∞–º
                            candidate_links = extract_game_links_from_soup(soup, LETOBASKET_URL)
                            matched_games = []
                            for link_url in candidate_links:
                                game_info = await parse_game_info(link_url)
                                if not game_info:
                                    continue
                                t1 = game_info.get('team1')
                                t2 = game_info.get('team2')
                                if team_matches_targets(t1, targets) or team_matches_targets(t2, targets):
                                    matched_games.append((link_url, game_info))
                            if matched_games:
                                lines = ["üèÄ –ò–≥—Ä—ã —Å–µ–≥–æ–¥–Ω—è:"]
                                for link_url, info in matched_games:
                                    n1 = info.get('team1') or '–ö–æ–º–∞–Ω–¥–∞ 1'
                                    n2 = info.get('team2') or '–ö–æ–º–∞–Ω–¥–∞ 2'
                                    lines.append(f" {n1} vs {n2}")
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏ —Å—Å—ã–ª–∫–∏
                            lines.append("")
                            lines.append("üìÖ –î–∞—Ç–∞ –∏ –í—Ä–µ–º—è:")
                            for link_url, info in matched_games:
                                tm = info.get('time') or '–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ'
                                lines.append(f" {tm}")
                            
                            lines.append("")
                            lines.append("üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–≥—Ä—É:")
                            for link_url, info in matched_games:
                                lines.append(f" [–¢—É—Ç]({link_url})")
                            
                            message = "\n".join(lines)
                            id_base = "|".join([u for (u, _) in matched_games])
                            notification_id = f"targets_{hash(id_base)}"
                            if notification_id not in sent_notifications:
                                if DRY_RUN:
                                    print(f"[DRY_RUN] -> send_message: {message}")
                                else:
                                    await bot.send_message(chat_id=CHAT_ID, text=message, parse_mode='Markdown')
                                sent_notifications.add(notification_id)
                                print("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ü–µ–ª–µ–≤—ã—Ö –∏–≥—Ä–∞—Ö")
                            for link_url, info in matched_games:
                                await check_game_start(info, link_url)
                                # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä
                                await check_game_completion(link_url, info)
                            else:
                                print("üìä –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏–≥—Ä –ø–æ —Ü–µ–ª–µ–≤—ã–º –∫–æ–º–∞–Ω–¥–∞–º —Å—Ä–µ–¥–∏ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    else:
                        print("‚ÑπÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ–∂–∏–¥–∞–µ–º—ã–µ –º–∞—Ä–∫–µ—Ä—ã, —Å–∫–∞–Ω–∏—Ä—É—é –≤—Å—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –≤–∞–ª–∏–¥–∏—Ä—É—é —Å—Å—ã–ª–∫–∏")
                        candidate_links = extract_game_links_from_soup(soup, LETOBASKET_URL)
                        matched_games = []
                        for link_url in candidate_links:
                            game_info = await parse_game_info(link_url)
                            if not game_info:
                                continue
                            t1 = game_info.get('team1')
                            t2 = game_info.get('team2')
                            if team_matches_targets(t1, targets) or team_matches_targets(t2, targets):
                                matched_games.append((link_url, game_info))
                        if matched_games:
                            lines = ["üèÄ –ù–∞–π–¥–µ–Ω—ã –∏–≥—Ä—ã —Ü–µ–ª–µ–≤—ã—Ö –∫–æ–º–∞–Ω–¥:"]
                            for link_url, info in matched_games:
                                tm = info.get('time') or '–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ'
                                n1 = info.get('team1') or '–ö–æ–º–∞–Ω–¥–∞ 1'
                                n2 = info.get('team2') or '–ö–æ–º–∞–Ω–¥–∞ 2'
                                lines.append(f"- {n1} vs {n2} ‚Äî {tm}\n  üìã {link_url}")
                            message = "\n".join(lines)
                            id_base = "|".join([u for (u, _) in matched_games])
                            notification_id = f"targets_{hash(id_base)}"
                            if notification_id not in sent_notifications:
                                if DRY_RUN:
                                    print(f"[DRY_RUN] -> send_message: {message}")
                                else:
                                    await bot.send_message(chat_id=CHAT_ID, text=message, parse_mode='Markdown')
                                sent_notifications.add(notification_id)
                                print("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ü–µ–ª–µ–≤—ã—Ö –∏–≥—Ä–∞—Ö")
                            for link_url, info in matched_games:
                                await check_game_start(info, link_url)
                                # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä
                                await check_game_completion(link_url, info)
                        else:
                            print("üìä –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏–≥—Ä –ø–æ —Ü–µ–ª–µ–≤—ã–º –∫–æ–º–∞–Ω–¥–∞–º —Å—Ä–µ–¥–∏ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–∞–π—Ç–∞: {response.status}")
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∞–π—Ç–∞: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        now = datetime.datetime.now()
        print(f"ü§ñ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∞–π—Ç–∞ letobasket.ru –≤ {now.strftime('%Y-%m-%d %H:%M')}...")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        await check_letobasket_site()
        
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main(): {e}")

if __name__ == "__main__":
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É (–±–µ–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞)
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        sys.exit(1)
