#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
"""

import os
import asyncio
import datetime
import json
from typing import Dict, List, Optional, Any
from dotenv import load_dotenv
from telegram import Bot
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram import Update

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
ANNOUNCEMENTS_TOPIC_ID = int(os.getenv("ANNOUNCEMENTS_TOPIC_ID", "26"))

class ManualAttendanceCollector:
    """–ö–æ–ª–ª–µ–∫—Ç–æ—Ä –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏"""
    
    def __init__(self):
        self.bot = None
        self.attendance_data = {}
        self._init_bot()
    
    def _init_bot(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        try:
            if not BOT_TOKEN:
                print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return
            
            self.bot = Bot(token=BOT_TOKEN)
            print("‚úÖ Telegram Bot API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
    
    async def send_attendance_request(self, training_day: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏"""
        if not self.bot or not CHAT_ID:
            print("‚ùå –ë–æ—Ç –∏–ª–∏ CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return False
        
        try:
            message_text = f"""
üìä –°–ë–û–† –î–ê–ù–ù–´–• –û –ü–û–°–ï–©–ê–ï–ú–û–°–¢–ò

üèÄ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: {training_day}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ—Ç –æ–ø—Ä–æ—Å, –µ—Å–ª–∏ –≤—ã –±—ã–ª–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ {training_day}:

‚úÖ –ë—ã–ª –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
‚ùå –ù–µ –±—ã–ª –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ

–î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏.
            """.strip()
            
            # –°–æ–∑–¥–∞–µ–º –æ–ø—Ä–æ—Å –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
            poll_question = f"–í—ã –±—ã–ª–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ {training_day}?"
            poll_options = ["‚úÖ –ë—ã–ª –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ", "‚ùå –ù–µ –±—ã–ª –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ"]
            
            await self.bot.send_poll(
                chat_id=int(CHAT_ID),
                question=poll_question,
                options=poll_options,
                is_anonymous=False,  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º–µ–Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                allows_multiple_answers=False,
                explanation="–î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏"
            )
            
            print(f"‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞ {training_day} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return False
    
    async def create_attendance_summary(self, training_day: str, attendees: List[str], absentees: List[str]):
        """–°–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏"""
        if not self.bot or not CHAT_ID:
            print("‚ùå –ë–æ—Ç –∏–ª–∏ CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return False
        
        try:
            message_text = f"""
üìä –°–í–û–î–ö–ê –ü–û–°–ï–©–ê–ï–ú–û–°–¢–ò

üèÄ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: {training_day}
üìÖ –î–∞—Ç–∞: {datetime.datetime.now().strftime('%Y-%m-%d')}

‚úÖ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ ({len(attendees)} —á–µ–ª–æ–≤–µ–∫):
{chr(10).join([f"   ‚Ä¢ {attendee}" for attendee in attendees]) if attendees else "   –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"}

‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ ({len(absentees)} —á–µ–ª–æ–≤–µ–∫):
{chr(10).join([f"   ‚Ä¢ {absentee}" for absentee in absentees]) if absentees else "   –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"}

üìà –û–±—â–∞—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å: {len(attendees)} –∏–∑ {len(attendees) + len(absentees)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            """.strip()
            
            await self.bot.send_message(
                chat_id=int(CHAT_ID),
                text=message_text,
                parse_mode='HTML'
            )
            
            print(f"‚úÖ –°–≤–æ–¥–∫–∞ –ø–æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –∑–∞ {training_day} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏: {e}")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
attendance_collector = ManualAttendanceCollector()

async def test_manual_collection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä—É—á–Ω–æ–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—É—á–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏...")
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –¥–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
        now = datetime.datetime.now()
        weekday = now.weekday()
        
        if weekday == 2:  # –°—Ä–µ–¥–∞
            training_day = "–í—Ç–æ—Ä–Ω–∏–∫"
        elif weekday == 5:  # –°—É–±–±–æ—Ç–∞
            training_day = "–ü—è—Ç–Ω–∏—Ü–∞"
        else:
            print("‚ö†Ô∏è –°–µ–≥–æ–¥–Ω—è –Ω–µ –¥–µ–Ω—å —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö (—Å—Ä–µ–¥–∞ –∏–ª–∏ —Å—É–±–±–æ—Ç–∞)")
            return False
        
        print(f"üìÖ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞ {training_day}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
        success = await attendance_collector.send_attendance_request(training_day)
        
        if success:
            print("‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            print("üìã –¢–µ–ø–µ—Ä—å —É—á–∞—Å—Ç–Ω–∏–∫–∏ –º–æ–≥—É—Ç –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –≤ –æ–ø—Ä–æ—Å–µ")
            print("‚è∞ –ß–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Å–æ–±—Ä–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
        
        return success
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

if __name__ == "__main__":
    asyncio.run(test_manual_collection())
