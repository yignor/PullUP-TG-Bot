#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ Railway
"""

import os
import time
import psutil
import datetime
from typing import Dict, Any

def get_system_usage() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"""
    try:
        # CPU
        cpu_percent = psutil.cpu_percent(interval=1)
        
        # Memory
        memory = psutil.virtual_memory()
        
        # Disk
        disk = psutil.disk_usage('/')
        
        # Network (–±–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
        network = psutil.net_io_counters()
        
        return {
            'timestamp': datetime.datetime.now().isoformat(),
            'cpu_percent': cpu_percent,
            'memory_percent': memory.percent,
            'memory_used_mb': memory.used / (1024 * 1024),
            'memory_available_mb': memory.available / (1024 * 1024),
            'disk_percent': (disk.used / disk.total) * 100,
            'disk_used_gb': disk.used / (1024 * 1024 * 1024),
            'disk_free_gb': disk.free / (1024 * 1024 * 1024),
            'network_bytes_sent': network.bytes_sent,
            'network_bytes_recv': network.bytes_recv
        }
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
        return {}

def analyze_bot_performance():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–æ—Ç–∞"""
    print("üîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞...")
    
    # –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∏–º–ø–æ—Ä—Ç–∞
    start_time = time.time()
    try:
        import aiohttp
        import bs4
        from telegram import Bot
        from dotenv import load_dotenv
        import_time = time.time() - start_time
        print(f"‚úÖ –í—Ä–µ–º—è –∏–º–ø–æ—Ä—Ç–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫: {import_time:.2f} —Å–µ–∫")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return
    
    # –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    operations = {
        'HTTP –∑–∞–ø—Ä–æ—Å': lambda: __import__('aiohttp').ClientSession(),
        '–ü–∞—Ä—Å–∏–Ω–≥ HTML': lambda: __import__('bs4').BeautifulSoup('<html></html>', 'html.parser'),
        'Telegram Bot': lambda: __import__('telegram').Bot(token='test') if os.getenv('BOT_TOKEN') else None
    }
    
    print("\n‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:")
    for name, operation in operations.items():
        try:
            start = time.time()
            result = operation()
            duration = time.time() - start
            print(f"  {name}: {duration:.3f} —Å–µ–∫")
        except Exception as e:
            print(f"  {name}: ‚ùå –û—à–∏–±–∫–∞ - {e}")

def calculate_monthly_usage():
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –º–µ—Å—è—á–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤"""
    print("\nüìä –†–∞—Å—á–µ—Ç –º–µ—Å—è—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
    runs_per_day = 48  # –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    days_per_month = 30
    avg_run_time_seconds = 2.7
    
    # –†–∞—Å—á–µ—Ç—ã
    total_runs = runs_per_day * days_per_month
    total_time_seconds = total_runs * avg_run_time_seconds
    total_time_hours = total_time_seconds / 3600
    
    print(f"  –ó–∞–ø—É—Å–∫–æ–≤ –≤ –¥–µ–Ω—å: {runs_per_day}")
    print(f"  –ó–∞–ø—É—Å–∫–æ–≤ –≤ –º–µ—Å—è—Ü: {total_runs}")
    print(f"  –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {total_time_hours:.2f} —á–∞—Å–æ–≤/–º–µ—Å—è—Ü")
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ª–∏–º–∏—Ç–∞–º–∏ Railway
    railway_limits = {
        'time_hours': 500,
        'ram_mb': 512,
        'storage_gb': 1,
        'traffic_gb': 100
    }
    
    print(f"\nüìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ª–∏–º–∏—Ç–∞–º–∏ Railway:")
    print(f"  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {total_time_hours:.2f}/{railway_limits['time_hours']} —á–∞—Å–æ–≤ ({total_time_hours/railway_limits['time_hours']*100:.1f}%)")
    print(f"  RAM: ~20 MB (–ø–∏–∫) / {railway_limits['ram_mb']} MB ({20/railway_limits['ram_mb']*100:.1f}%)")
    print(f"  –•—Ä–∞–Ω–∏–ª–∏—â–µ: ~100 MB / {railway_limits['storage_gb']*1024} MB ({100/(railway_limits['storage_gb']*1024)*100:.1f}%)")
    print(f"  –¢—Ä–∞—Ñ–∏–∫: ~10 MB / {railway_limits['traffic_gb']*1024} MB ({10/(railway_limits['traffic_gb']*1024)*100:.3f}%)")

def check_railway_environment():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway"""
    print("\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway:")
    
    railway_vars = [
        'RAILWAY_ENVIRONMENT',
        'RAILWAY_PROJECT_ID',
        'RAILWAY_SERVICE_ID',
        'PORT'
    ]
    
    for var in railway_vars:
        value = os.getenv(var)
        if value:
            print(f"  ‚úÖ {var}: {value}")
        else:
            print(f"  ‚ö†Ô∏è {var}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

def generate_usage_report():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤"""
    print("\nüìã –û—Ç—á–µ—Ç –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤")
    print("=" * 50)
    
    # –¢–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
    usage = get_system_usage()
    if usage:
        print(f"üïê –í—Ä–µ–º—è: {usage['timestamp']}")
        print(f"üíª CPU: {usage['cpu_percent']:.1f}%")
        print(f"üß† RAM: {usage['memory_percent']:.1f}% ({usage['memory_used_mb']:.1f} MB)")
        print(f"üíæ –î–∏—Å–∫: {usage['disk_percent']:.1f}% ({usage['disk_used_gb']:.2f} GB)")
        print(f"üåê –°–µ—Ç—å: {usage['network_bytes_sent']/1024:.1f} KB –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, {usage['network_bytes_recv']/1024:.1f} KB –ø–æ–ª—É—á–µ–Ω–æ")
    
    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    analyze_bot_performance()
    
    # –†–∞—Å—á–µ—Ç –º–µ—Å—è—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    calculate_monthly_usage()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    check_railway_environment()
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("  ‚úÖ –ë–æ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ Railway")
    print("  ‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ")
    print("  ‚úÖ Cron-–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞")
    print("  üìä –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ Railway Dashboard")
    print("  üîÑ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ Railway")
    print("=" * 50)
    
    try:
        generate_usage_report()
        
        print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìä –ó–∞–∫–ª—é—á–µ–Ω–∏–µ:")
        print("  –ë–æ—Ç —Å –∑–∞–ø—É—Å–∫–æ–º –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç –ë–ï–ó –ü–†–û–ë–õ–ï–ú –ø–æ–º–µ—â–∞–µ—Ç—Å—è")
        print("  –≤ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ Railway (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç <1% —Ä–µ—Å—É—Ä—Å–æ–≤)")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")

if __name__ == "__main__":
    main()
