#!/usr/bin/env python3
"""
–û–±—â–∏–π –º–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
–£—Å—Ç—Ä–∞–Ω—è–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ –º–æ–¥—É–ª—è–º–∏
"""

import os
import json
import logging
from typing import Dict, List, Optional, Any, Set
from telegram import Bot

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

class NotificationManager:
    """–û–±—â–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self):
        self.bot = None
        self.chat_id = os.getenv('CHAT_ID')
        self.notifications_file = "sent_notifications.json"
        self._init_bot()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞
        self.sent_game_end_notifications: Set[str] = set()
        self.sent_game_start_notifications: Set[str] = set()
        self.sent_game_result_notifications: Set[str] = set()
        self.sent_morning_notifications: Set[str] = set()
        self._load_sent_notifications()
    
    def _init_bot(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        bot_token = os.getenv('BOT_TOKEN')
        if bot_token:
            try:
                self.bot = Bot(token=bot_token)
                logger.info("‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
        else:
            logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    def _load_sent_notifications(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.notifications_file):
                with open(self.notifications_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self.sent_game_end_notifications = set(data.get('game_end', []))
                    self.sent_game_start_notifications = set(data.get('game_start', []))
                    self.sent_game_result_notifications = set(data.get('game_result', []))
                    self.sent_morning_notifications = set(data.get('morning', []))
                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.sent_game_end_notifications) + len(self.sent_game_start_notifications) + len(self.sent_game_result_notifications) + len(self.sent_morning_notifications)} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
    
    def _save_sent_notifications(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ñ–∞–π–ª"""
        try:
            data = {
                'game_end': list(self.sent_game_end_notifications),
                'game_start': list(self.sent_game_start_notifications),
                'game_result': list(self.sent_game_result_notifications),
                'morning': list(self.sent_morning_notifications)
            }
            with open(self.notifications_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
    
    async def send_game_end_notification(self, game_info: Dict[str, Any], game_url: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã"""
        if not self.bot or not self.chat_id:
            logger.error("–ë–æ—Ç –∏–ª–∏ CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notification_id = f"game_end_{game_url}"
        
        if notification_id in self.sent_game_end_notifications:
            logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return
        
        try:
            team1 = game_info.get('team1', '–ö–æ–º–∞–Ω–¥–∞ 1')
            team2 = game_info.get('team2', '–ö–æ–º–∞–Ω–¥–∞ 2')
            score = game_info.get('score', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            
            message = (
                f"üèÅ –ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å!\n\n"
                f"üèÄ {team1} vs {team2}\n"
                f"üìä –°—á–µ—Ç: {score}\n\n"
                f"–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {game_url}"
            )
            
            await self.bot.send_message(chat_id=self.chat_id, text=message)
            self.sent_game_end_notifications.add(notification_id)
            self._save_sent_notifications()
            logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã: {score}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã: {e}")
    
    async def send_game_start_notification(self, game_info: Dict[str, Any], game_url: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã"""
        if not self.bot or not self.chat_id:
            logger.error("–ë–æ—Ç –∏–ª–∏ CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notification_id = f"game_start_{game_url}"
        
        if notification_id in self.sent_game_start_notifications:
            logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return
        
        try:
            team1 = game_info.get('team1', '–ö–æ–º–∞–Ω–¥–∞ 1')
            team2 = game_info.get('team2', '–ö–æ–º–∞–Ω–¥–∞ 2')
            game_time = game_info.get('time', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            
            message = f"üèÄ –ò–≥—Ä–∞ {team1} –ø—Ä–æ—Ç–∏–≤ {team2} –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤ {game_time}!\n\n–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–≥—Ä—É: {game_url}"
            
            await self.bot.send_message(chat_id=self.chat_id, text=message)
            self.sent_game_start_notifications.add(notification_id)
            self._save_sent_notifications()
            logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã: {team1} vs {team2} –≤ {game_time}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã: {e}")
    
    async def send_game_result_notification(self, game_info: Dict[str, Any], poll_results: Optional[Dict[str, Any]] = None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∏–≥—Ä—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        if not self.bot or not self.chat_id:
            logger.error("–ë–æ—Ç –∏–ª–∏ CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notification_id = f"game_result_{game_info.get('team1', '')}_{game_info.get('team2', '')}_{game_info.get('date', '')}"
        
        if notification_id in self.sent_game_result_notifications:
            logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∏–≥—Ä—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return
        
        try:
            team1 = game_info.get('team1', '–ö–æ–º–∞–Ω–¥–∞ 1')
            team2 = game_info.get('team2', '–ö–æ–º–∞–Ω–¥–∞ 2')
            score = game_info.get('score', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            date = game_info.get('date', '')
            
            message = f"üèÄ –ò–≥—Ä–∞ –ø—Ä–æ—Ç–∏–≤ {team2} –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å\n\n"
            message += f"üèÜ –°—á–µ—Ç: {score}\n"
            
            if poll_results:
                votes = poll_results.get('votes', {})
                ready_count = votes.get('ready', 0)
                not_ready_count = votes.get('not_ready', 0)
                coach_count = votes.get('coach', 0)
                total_votes = votes.get('total', 0)
                
                message += f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:\n"
                message += f"‚úÖ –ì–æ—Ç–æ–≤—ã: {ready_count}\n"
                message += f"‚ùå –ù–µ –≥–æ—Ç–æ–≤—ã: {not_ready_count}\n"
                message += f"üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä: {coach_count}\n"
                message += f"üìà –í—Å–µ–≥–æ: {total_votes}\n"
                
                # –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
                if ready_count > 0 and total_votes > 0:
                    attendance_rate = (ready_count / total_votes) * 100
                    if attendance_rate >= 80:
                        message += f"\nüéâ –û—Ç–ª–∏—á–Ω–∞—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å! ({attendance_rate:.1f}%)"
                    elif attendance_rate >= 60:
                        message += f"\nüëç –•–æ—Ä–æ—à–∞—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å ({attendance_rate:.1f}%)"
                    else:
                        message += f"\n‚ö†Ô∏è –ù–∏–∑–∫–∞—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å ({attendance_rate:.1f}%)"
            else:
                message += f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            
            await self.bot.send_message(chat_id=self.chat_id, text=message)
            self.sent_game_result_notifications.add(notification_id)
            self._save_sent_notifications()
            logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∏–≥—Ä—ã: {score}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∏–≥—Ä—ã: {e}")
    
    async def send_morning_notification(self, games: List[Dict[str, Any]], date: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É—Ç—Ä–µ–Ω–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∏–≥—Ä–∞—Ö"""
        if not self.bot or not self.chat_id:
            logger.error("–ë–æ—Ç –∏–ª–∏ CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notification_id = f"morning_{date}"
        
        if notification_id in self.sent_morning_notifications:
            logger.info("–£—Ç—Ä–µ–Ω–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return
        
        try:
            if not games:
                return
            
            message = f"üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –°–µ–≥–æ–¥–Ω—è {date} —É –Ω–∞—Å –∏–≥—Ä—ã:\n\n"
            
            for i, game in enumerate(games, 1):
                team1 = game.get('team1', '–ö–æ–º–∞–Ω–¥–∞ 1')
                team2 = game.get('team2', '–ö–æ–º–∞–Ω–¥–∞ 2')
                game_time = game.get('time', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                game_url = game.get('url', '')
                
                message += f"{i}. üèÄ {team1} vs {team2}\n"
                message += f"   ‚è∞ –í—Ä–µ–º—è: {game_time}\n"
                if game_url:
                    message += f"   üîó –°—Å—ã–ª–∫–∞: {game_url}\n"
                message += "\n"
            
            await self.bot.send_message(chat_id=self.chat_id, text=message)
            self.sent_morning_notifications.add(notification_id)
            self._save_sent_notifications()
            logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Ç—Ä–µ–Ω–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {len(games)} –∏–≥—Ä")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    def clear_notifications(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        self.sent_game_end_notifications.clear()
        self.sent_game_start_notifications.clear()
        self.sent_game_result_notifications.clear()
        self.sent_morning_notifications.clear()
        self._save_sent_notifications()
        logger.info("‚úÖ –í—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã")

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
notification_manager = NotificationManager()
