#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import datetime
from typing import List, Dict, Any, Optional

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤ (–≤–º–µ—Å—Ç–æ Google Sheets)
TEST_PLAYERS = [
    {
        'name': '–®–∞—Ö–º–∞–Ω–æ–≤ –ú–∞–∫—Å–∏–º',
        'nickname': '@max_shah',
        'telegram_id': '123456789',
        'birthday': '2006-08-17',
        'status': '–ê–∫—Ç–∏–≤–Ω—ã–π',
        'team': 'Pull Up',
        'added_date': '2025-08-18',
        'notes': '–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ'
    },
    {
        'name': '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω',
        'nickname': '@ivan_ball',
        'telegram_id': '987654321',
        'birthday': '1995-03-15',
        'status': '–ê–∫—Ç–∏–≤–Ω—ã–π',
        'team': 'Pull Up-–§–∞—Ä–º',
        'added_date': '2025-08-18',
        'notes': '–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ'
    },
    {
        'name': '–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä',
        'nickname': '@petr_hoop',
        'telegram_id': '555666777',
        'birthday': '1998-11-22',
        'status': '–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π',
        'team': 'Pull Up',
        'added_date': '2025-08-18',
        'notes': '–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ'
    }
]

class TestPlayersManager:
    """–¢–µ—Å—Ç–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤"""
    
    def __init__(self):
        self.players = TEST_PLAYERS.copy()
        print("üß™ –¢–µ—Å—Ç–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∏–≥—Ä–æ–∫–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def get_all_players(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤"""
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.players)} –∏–≥—Ä–æ–∫–æ–≤ (—Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)")
        return self.players
    
    def get_active_players(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤"""
        active_players = [p for p in self.players if p.get('status', '').lower() == '–∞–∫—Ç–∏–≤–Ω—ã–π']
        print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: {len(active_players)}")
        return active_players
    
    def get_players_with_birthdays_today(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ —Å –¥–Ω—è–º–∏ —Ä–æ–∂–¥–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è"""
        try:
            active_players = self.get_active_players()
            today = datetime.datetime.now()
            today_str = today.strftime("%m-%d")
            
            birthday_players = []
            for player in active_players:
                birthday = player.get('birthday', '')
                if birthday:
                    try:
                        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
                        if '-' in birthday:
                            # –§–æ—Ä–º–∞—Ç YYYY-MM-DD
                            bd_date = datetime.datetime.strptime(birthday, "%Y-%m-%d")
                        elif '.' in birthday:
                            # –§–æ—Ä–º–∞—Ç DD.MM.YYYY
                            bd_date = datetime.datetime.strptime(birthday, "%d.%m.%Y")
                        else:
                            continue
                        
                        bd_str = bd_date.strftime("%m-%d")
                        if bd_str == today_str:
                            # –í—ã—á–∏—Å–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç
                            age = today.year - bd_date.year
                            if today.month < bd_date.month or (today.month == bd_date.month and today.day < bd_date.day):
                                age -= 1
                            
                            player_copy = player.copy()
                            player_copy['age'] = age
                            birthday_players.append(player_copy)
                            
                    except ValueError:
                        print(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –¥–ª—è {player.get('name')}: {birthday}")
                        continue
            
            print(f"üéÇ –î–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è: {len(birthday_players)}")
            return birthday_players
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è: {e}")
            return []
    
    def add_player(self, name: str, birthday: str, nickname: str = "", 
                   telegram_id: str = "", team: str = "", notes: str = "") -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (—Ç–æ–ª—å–∫–æ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π –ø–∞–º—è—Ç–∏)"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            if not name or not birthday:
                print("‚ùå –ò–º—è –∏ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã")
                return False
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            new_player = {
                'name': name,
                'nickname': nickname,
                'telegram_id': telegram_id,
                'birthday': birthday,
                'status': '–ê–∫—Ç–∏–≤–Ω—ã–π',
                'team': team,
                'added_date': datetime.datetime.now().strftime("%Y-%m-%d"),
                'notes': notes
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
            self.players.append(new_player)
            print(f"‚úÖ –ò–≥—Ä–æ–∫ {name} –¥–æ–±–∞–≤–ª–µ–Ω (—Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞: {e}")
            return False
    
    def get_player_by_telegram_id(self, telegram_id: str) -> Optional[Dict[str, Any]]:
        """–ù–∞—Ö–æ–¥–∏—Ç –∏–≥—Ä–æ–∫–∞ –ø–æ Telegram ID"""
        try:
            for player in self.players:
                if player.get('telegram_id') == telegram_id:
                    return player
            return None
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–∞: {e}")
            return None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
test_players_manager = TestPlayersManager()

def get_years_word(age: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ '–≥–æ–¥'"""
    if age % 10 == 1 and age % 100 != 11:
        return "–≥–æ–¥"
    elif age % 10 in [2, 3, 4] and age % 100 not in [12, 13, 14]:
        return "–≥–æ–¥–∞"
    else:
        return "–ª–µ—Ç"

def run_test():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–≥—Ä–æ–∫–æ–≤"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û –ú–ï–ù–ï–î–ñ–ï–†–ê –ò–ì–†–û–ö–û–í")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
    all_players = test_players_manager.get_all_players()
    print(f"üìä –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {len(all_players)}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    active_players = test_players_manager.get_active_players()
    print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: {len(active_players)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è
    birthday_players = test_players_manager.get_players_with_birthdays_today()
    print(f"üéÇ –î–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è: {len(birthday_players)}")
    
    if birthday_players:
        print("üéâ –ò–º–µ–Ω–∏–Ω–Ω–∏–∫–∏:")
        for player in birthday_players:
            age = player.get('age', 0)
            years_word = get_years_word(age)
            print(f"   - {player['name']} ({age} {years_word})")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
    print(f"\nüìã –°–ü–ò–°–û–ö –í–°–ï–• –ò–ì–†–û–ö–û–í:")
    for i, player in enumerate(all_players, 1):
        status_emoji = "‚úÖ" if player['status'] == '–ê–∫—Ç–∏–≤–Ω—ã–π' else "‚ùå"
        print(f"   {i}. {status_emoji} {player['name']} - {player['birthday']} - {player.get('team', '')}")
    
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    run_test()
