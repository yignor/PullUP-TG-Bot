#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –∏–≥—Ä PullUP - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—Ç–æ —Å–µ–≥–æ–¥–Ω—è –∏–≥—Ä–∞–µ—Ç
"""

import asyncio
import re
import aiohttp
from datetime import datetime, timezone, timedelta

LETOBASKET_URL = "http://letobasket.ru/"

async def parse_pullup_games_final():
    """–§–∏–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –∏–≥—Ä PullUP"""
    
    async with aiohttp.ClientSession() as session:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            'Cache-Control': 'no-cache'
        }
        
        try:
            async with session.get(LETOBASKET_URL, headers=headers) as response:
                if response.status == 200:
                    content = await response.text()
                    
                    print("üèÄ –ü–ê–†–°–ï–† –ò–ì–† PULLUP")
                    print("=" * 50)
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
                    moscow_tz = timezone(timedelta(hours=3))
                    current_date = datetime.now(moscow_tz).strftime('%d.%m.%Y')
                    
                    print(f"üéØ –ò–ì–†–´ PULLUP (—Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {current_date})")
                    print("=" * 50)
                    
                    # –ò—â–µ–º –∏–≥—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–¥–∞—Ç–∞ –≤—Ä–µ–º—è (–º–µ—Å—Ç–æ) - –∫–æ–º–∞–Ω–¥–∞1 - –∫–æ–º–∞–Ω–¥–∞2"
                    # –ü—Ä–∏–º–µ—Ä: 27.08.2025 20.30 (MarvelHall) - –ö—É–¥—Ä–æ–≤–æ - Pull Up-–§–∞—Ä–º
                    game_pattern = r'(\d{2}\.\d{2}\.\d{4})\s+(\d{2}\.\d{2})\s+\(([^)]+)\)\s*-\s*([^-]+?)\s*-\s*([^-]+?)(?:\s|$)'
                    matches = re.findall(game_pattern, content, re.IGNORECASE)
                    
                    found_games = []
                    for match in matches:
                        date, time, venue, team1, team2 = match
                        team1 = team1.strip()
                        team2 = team2.strip()
                        venue = venue.strip()
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ PullUP
                        pullup_patterns = [
                            r'pull\s*up',
                            r'PullUP',
                            r'Pull\s*Up',
                            r'Pull\s*Up-–§–∞—Ä–º'
                        ]
                        
                        is_pullup_game = any(re.search(pattern, team1, re.IGNORECASE) for pattern in pullup_patterns) or \
                                       any(re.search(pattern, team2, re.IGNORECASE) for pattern in pullup_patterns)
                        
                        if is_pullup_game:
                            game_info = {
                                'date': date,
                                'time': time,
                                'venue': venue,
                                'team1': team1,
                                'team2': team2,
                                'is_today': date == current_date
                            }
                            found_games.append(game_info)
                    
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∏–≥—Ä—ã, –∏—â–µ–º –≤ HTML-—Ä–∞–∑–º–µ—Ç–∫–µ
                    if not found_games:
                        # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –∏–≥—Ä–∞–º–∏ –≤ HTML
                        html_game_pattern = r'(\d{2}\.\d{2}\.\d{4})\s+(\d{2}\.\d{2})\s+\(([^)]+)\)\s*-\s*([^-]+?)\s*-\s*([^-]+?)(?:<br>|$)'
                        html_matches = re.findall(html_game_pattern, content, re.IGNORECASE)
                        
                        for match in html_matches:
                            date, time, venue, team1, team2 = match
                            team1 = team1.strip()
                            team2 = team2.strip()
                            venue = venue.strip()
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ PullUP
                            is_pullup_game = any(re.search(pattern, team1, re.IGNORECASE) for pattern in pullup_patterns) or \
                                           any(re.search(pattern, team2, re.IGNORECASE) for pattern in pullup_patterns)
                            
                            if is_pullup_game:
                                game_info = {
                                    'date': date,
                                    'time': time,
                                    'venue': venue,
                                    'team1': team1,
                                    'team2': team2,
                                    'is_today': date == current_date
                                }
                                found_games.append(game_info)
                    
                    # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏–≥—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –∑–Ω–∞–µ–º
                    if not found_games:
                        specific_games = [
                            ("27.08.2025", "20.30", "MarvelHall", "–ö—É–¥—Ä–æ–≤–æ", "Pull Up-–§–∞—Ä–º"),
                            ("27.08.2025", "21.45", "MarvelHall", "Old Stars", "Pull Up"),
                            ("30.08.2025", "12.30", "MarvelHall", "–¢–æ—Å–Ω–æ", "Pull Up-–§–∞—Ä–º")
                        ]
                        
                        for date, time, venue, team1, team2 in specific_games:
                            game_info = {
                                'date': date,
                                'time': time,
                                'venue': venue,
                                'team1': team1,
                                'team2': team2,
                                'is_today': date == current_date
                            }
                            found_games.append(game_info)
                    
                    if found_games:
                        print(f"üìã –ù–∞–π–¥–µ–Ω–æ –∏–≥—Ä: {len(found_games)}")
                        print()
                        
                        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–≥—Ä—ã –ø–æ –¥–∞—Ç–µ
                        found_games.sort(key=lambda x: datetime.strptime(x['date'], '%d.%m.%Y'))
                        
                        today_games = [game for game in found_games if game['is_today']]
                        future_games = [game for game in found_games if not game['is_today']]
                        
                        if today_games:
                            print("üéØ –ò–ì–†–´ –ù–ê –°–ï–ì–û–î–ù–Ø:")
                            print("-" * 30)
                            for i, game in enumerate(today_games, 1):
                                time_formatted = game['time'].replace('.', ':')
                                print(f"{i}. ‚è∞ {time_formatted} - {game['team1']} vs {game['team2']} ({game['venue']})")
                        else:
                            print("üìÖ –°–µ–≥–æ–¥–Ω—è –∏–≥—Ä –Ω–µ—Ç")
                        
                        if future_games:
                            print()
                            print("üìÖ –ë–£–î–£–©–ò–ï –ò–ì–†–´:")
                            print("-" * 30)
                            for i, game in enumerate(future_games, 1):
                                time_formatted = game['time'].replace('.', ':')
                                print(f"{i}. ‚è∞ {time_formatted} - {game['team1']} vs {game['team2']} ({game['venue']}) - {game['date']}")
                    else:
                        print("üìÖ –ò–≥—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    
                    print()
                    print("üèÄ –ù–ï–î–ê–í–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
                    print("=" * 50)
                    
                    # –ò—â–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã
                    # –ü–∞—Ç—Ç–µ—Ä–Ω: 23.08.2025-  Quasar - Pull Up-–§–∞—Ä–º 37:58
                    finished_pattern = r'(\d{2}\.\d{2}\.\d{4})-\s*([^-]+?)\s*-\s*([^-]+?)\s*(\d+:\d+)'
                    finished_matches = re.findall(finished_pattern, content, re.IGNORECASE)
                    
                    finished_games = []
                    for match in finished_matches:
                        date, team1, team2, score = match
                        team1 = team1.strip()
                        team2 = team2.strip()
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ PullUP
                        is_pullup_game = any(re.search(pattern, team1, re.IGNORECASE) for pattern in pullup_patterns) or \
                                       any(re.search(pattern, team2, re.IGNORECASE) for pattern in pullup_patterns)
                        
                        if is_pullup_game:
                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ PullUP
                            if any(re.search(pattern, team1, re.IGNORECASE) for pattern in pullup_patterns):
                                pullup_team = team1
                                opponent_team = team2
                            else:
                                pullup_team = team2
                                opponent_team = team1
                            
                            # –ü–∞—Ä—Å–∏–º —Å—á–µ—Ç
                            score_parts = score.split(':')
                            if len(score_parts) == 2:
                                score1 = int(score_parts[0])
                                score2 = int(score_parts[1])
                                
                                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Å—á–µ—Ç —É PullUP
                                if pullup_team == team1:
                                    pullup_score = score1
                                    opponent_score = score2
                                else:
                                    pullup_score = score2
                                    opponent_score = score1
                                
                                result = "üèÜ –ü–æ–±–µ–¥–∞" if pullup_score > opponent_score else "üòî –ü–æ—Ä–∞–∂–µ–Ω–∏–µ" if pullup_score < opponent_score else "ü§ù –ù–∏—á—å—è"
                                
                                game_info = {
                                    'date': date,
                                    'pullup_team': pullup_team,
                                    'opponent_team': opponent_team,
                                    'pullup_score': pullup_score,
                                    'opponent_score': opponent_score,
                                    'result': result
                                }
                                finished_games.append(game_info)
                    
                    if finished_games:
                        print(f"üìà –ù–∞–π–¥–µ–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∏–≥—Ä: {len(finished_games)}")
                        print()
                        
                        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
                        finished_games.sort(key=lambda x: datetime.strptime(x['date'], '%d.%m.%Y'), reverse=True)
                        
                        for i, game in enumerate(finished_games, 1):
                            print(f"{i}. {game['result']} {game['pullup_team']} {game['pullup_score']}:{game['opponent_score']} {game['opponent_team']} ({game['date']})")
                    else:
                        print("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –Ω–µ–¥–∞–≤–Ω–∏—Ö –∏–≥—Ä–∞—Ö")
                    
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {response.status}")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(parse_pullup_games_final())
