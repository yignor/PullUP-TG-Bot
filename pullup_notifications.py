import asyncio
import aiohttp
import re
import os
from datetime import datetime, time, timezone, timedelta
from bs4 import BeautifulSoup
from telegram import Bot
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
CHAT_ID = os.getenv('CHAT_ID')
LETOBASKET_URL = "http://letobasket.ru/"

# –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
sent_morning_notifications = set()
sent_finish_notifications = set()

def get_moscow_time():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ú–æ—Å–∫–≤—ã"""
    moscow_tz = timezone(timedelta(hours=3))  # UTC+3 –¥–ª—è –ú–æ—Å–∫–≤—ã
    return datetime.now(moscow_tz)

def should_send_morning_notification():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É—Ç—Ä–µ–Ω–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ —É—Ç—Ä–æ–º 9:00-10:00)"""
    moscow_time = get_moscow_time()
    return moscow_time.hour == 9  # –¢–æ–ª—å–∫–æ –≤ 9 —É—Ç—Ä–∞ –ø–æ –ú–æ—Å–∫–≤–µ

class PullUPNotificationManager:
    def __init__(self):
        self.bot = Bot(token=BOT_TOKEN) if BOT_TOKEN else None
        
    async def get_fresh_page_content(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤–µ–∂–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∏–∑–±–µ–≥–∞—è –∫–µ—à–∞"""
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            'Cache-Control': 'no-cache',
            'Pragma': 'no-cache'
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.get(LETOBASKET_URL, headers=headers) as response:
                return await response.text()
    
    def extract_current_date(self, page_text):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        date_pattern = r'(\d{2}\.\d{2}\.\d{4})'
        date_match = re.search(date_pattern, page_text)
        return date_match.group(1) if date_match else None
    
    def find_pullup_games(self, page_text, current_date):
        """–ù–∞—Ö–æ–¥–∏—Ç –∏–≥—Ä—ã PullUP –Ω–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É"""
        pullup_games = []
        
        # –ò—â–µ–º –≤—Å–µ –∏–≥—Ä—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        all_games = re.findall(rf'{current_date}\s+\d{{2}}\.\d{{2}}[^-]*-\s*[^-]+[^-]*-\s*[^-]+', page_text)
        
        # –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏–≥—Ä—ã —Å PullUP
        target_games = [
            {"time": "12.30", "team1": "IT Basket", "team2": "Pull Up"},
            {"time": "14.00", "team1": "–ú–∞–∏–ª–µ –ö–∞—Ä–≥–æ", "team2": "Pull Up"}
        ]
        
        for game in target_games:
            game_pattern = rf'{current_date}\s+{game["time"]}[^-]*-\s*{re.escape(game["team1"])}[^-]*-\s*{re.escape(game["team2"])}'
            text_match = re.search(game_pattern, page_text, re.IGNORECASE)
            
            if text_match:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ —è–≤–ª—è–µ—Ç—Å—è PullUP
                pullup_team = None
                opponent_team = None
                
                if "pull" in game["team1"].lower() and "up" in game["team1"].lower():
                    pullup_team = game["team1"]
                    opponent_team = game["team2"]
                elif "pull" in game["team2"].lower() and "up" in game["team2"].lower():
                    pullup_team = game["team2"]
                    opponent_team = game["team1"]
                
                if pullup_team and opponent_team:
                    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏
                    game_order = None
                    for i, all_game in enumerate(all_games):
                        has_time = game["time"] in all_game
                        has_team1 = game["team1"] in all_game
                        has_team2 = game["team2"] in all_game
                        
                        if has_time and has_team1 and has_team2:
                            game_order = i + 1
                            break
                    
                    pullup_games.append({
                        'team': pullup_team,
                        'opponent': opponent_team,
                        'time': game["time"],
                        'order': game_order
                    })
        
        return pullup_games
    
    def get_game_links(self, html_content):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–≥—Ä—ã"""
        return re.findall(r'href=["\']([^"\']*game\.html\?gameId=\d+[^"\']*)["\']', html_content, re.IGNORECASE)
    
    async def send_morning_notification(self, games, html_content):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É—Ç—Ä–µ–Ω–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∏–≥—Ä–∞—Ö"""
        if not games:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É—Ç—Ä–µ–Ω–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if not should_send_morning_notification():
            logger.info("–ù–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ 9:00-10:00 –ø–æ –ú–æ—Å–∫–≤–µ)")
            return
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        moscow_time = get_moscow_time()
        notification_id = f"morning_{moscow_time.strftime('%Y-%m-%d')}"
        
        if notification_id in sent_morning_notifications:
            logger.info("–£—Ç—Ä–µ–Ω–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è")
            return
        
        lines = []
        game_links = self.get_game_links(html_content)
        
        for game in games:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            lines.append(f"üèÄ –°–µ–≥–æ–¥–Ω—è –∏–≥—Ä–∞ –ø—Ä–æ—Ç–∏–≤ **{game['opponent']}**")
            lines.append(f"‚è∞ –í—Ä–µ–º—è –∏–≥—Ä—ã: **{game['time']}**")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–≥—Ä—É
            game_link = LETOBASKET_URL
            if game['order'] and game['order'] <= len(game_links):
                game_link = game_links[game['order'] - 1]
                if not game_link.startswith('http'):
                    game_link = LETOBASKET_URL.rstrip('/') + '/' + game_link.lstrip('/')
            
            lines.append(f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–≥—Ä—É: [—Ç—É—Ç]({game_link})")
            lines.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –∏–≥—Ä–∞–º–∏
        
        message = "\n".join(lines)
        
        if self.bot and CHAT_ID:
            try:
                await self.bot.send_message(
                    chat_id=CHAT_ID, 
                    text=message, 
                    parse_mode='Markdown'
                )
                sent_morning_notifications.add(notification_id)
                logger.info("–£—Ç—Ä–µ–Ω–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        else:
            logger.info(f"[DRY_RUN] –£—Ç—Ä–µ–Ω–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {message}")
    
    def check_finished_games(self, html_content, current_date):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã PullUP"""
        finished_games = []
        
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å js-period = 4 –∏ js-timer = 0:00
        soup = BeautifulSoup(html_content, 'html.parser')
        
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å PullUP –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º–∏ –∏–≥—Ä–∞–º–∏
        pullup_patterns = [
            r'pull\s*up',
            r'PullUP',
            r'Pull\s*Up'
        ]
        
        # –ò—â–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å –∏–≥—Ä–∞–º–∏
        game_rows = soup.find_all('tr')
        
        for row in game_rows:
            row_text = row.get_text().lower()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ PullUP
            is_pullup_game = any(re.search(pattern, row_text, re.IGNORECASE) for pattern in pullup_patterns)
            
            if is_pullup_game:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ –∏–≥—Ä–∞
                js_period = row.get('js-period')
                js_timer = row.get('js-timer')
                
                # –ë–æ–ª–µ–µ –≥–∏–±–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
                is_finished = False
                if js_period == '4' and js_timer == '0:00':
                    is_finished = True
                elif js_period == '4' and (js_timer == '0:00' or js_timer == '00:00'):
                    is_finished = True
                elif '4—á' in row_text or '4 —á' in row_text:  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                    is_finished = True
                
                if is_finished:
                    # –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    game_info = self.extract_finished_game_info(row, current_date, html_content)
                    if game_info:
                        finished_games.append(game_info)
                        logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –∏–≥—Ä–∞: {game_info['pullup_team']} vs {game_info['opponent_team']}")
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫: –∏—â–µ–º –∏–≥—Ä—ã PullUP —Å –ø–æ–ª–Ω—ã–º —Å—á–µ—Ç–æ–º
        if not finished_games:
            logger.info("–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∏–≥—Ä –ø–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º—É –º–µ—Ç–æ–¥—É...")
            
            # –ò—â–µ–º –≤—Å–µ –∏–≥—Ä—ã –Ω–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É —Å PullUP
            all_games = re.findall(rf'{current_date}\s+\d{{2}}\.\d{{2}}[^-]*-\s*[^-]+[^-]*-\s*[^-]+', html_content)
            
            for game_text in all_games:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∏–≥—Ä–∞ PullUP
                if any(re.search(pattern, game_text, re.IGNORECASE) for pattern in pullup_patterns):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª–Ω—ã–π —Å—á–µ—Ç (–¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –¥–≤–æ–µ—Ç–æ—á–∏–µ)
                    score_match = re.search(r'(\d+)\s*:\s*(\d+)', game_text)
                    if score_match:
                        # –ò–≥—Ä–∞ —Å –ø–æ–ª–Ω—ã–º —Å—á–µ—Ç–æ–º - —Å—á–∏—Ç–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π
                        game_info = self.extract_finished_game_from_text(game_text, current_date, html_content)
                        if game_info:
                            finished_games.append(game_info)
                            logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –∏–≥—Ä–∞ (–ø–æ —Å—á–µ—Ç—É): {game_info['pullup_team']} vs {game_info['opponent_team']}")
        
        logger.info(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∏–≥—Ä PullUP: {len(finished_games)}")
        return finished_games
    
    def find_game_link_for_row(self, row, html_content, current_date):
        """–ù–∞—Ö–æ–¥–∏—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∏–≥—Ä—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
            row_text = row.get_text()
            
            # –ò—â–µ–º –≤—Å–µ –∏–≥—Ä—ã –Ω–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
            all_games = re.findall(rf'{current_date}\s+\d{{2}}\.\d{{2}}[^-]*-\s*[^-]+[^-]*-\s*[^-]+', html_content)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –∏–≥—Ä—ã
            game_order = None
            for i, game_text in enumerate(all_games):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∏–≥—Ä–∞ PullUP
                if any(re.search(pattern, game_text, re.IGNORECASE) for pattern in [r'pull\s*up', r'PullUP', r'Pull\s*Up']):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –≤—Ä–µ–º—è
                    time_match = re.search(r'\d{2}\.\d{2}', row_text)
                    if time_match and time_match.group() in game_text:
                        game_order = i + 1
                        break
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–≥—Ä—ã
            game_links = self.get_game_links(html_content)
            
            if game_order and game_order <= len(game_links):
                game_link = game_links[game_order - 1]
                if not game_link.startswith('http'):
                    game_link = LETOBASKET_URL.rstrip('/') + '/' + game_link.lstrip('/')
                return game_link
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            return LETOBASKET_URL
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–≥—Ä—É: {e}")
            return LETOBASKET_URL
    
    def extract_finished_game_from_text(self, game_text, current_date, html_content):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∏–≥—Ä–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è
            time_match = re.search(r'(\d{2}\.\d{2})', game_text)
            if not time_match:
                return None
            
            game_time = time_match.group(1)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
            teams_match = re.search(r'([^-]+)\s*-\s*([^-]+)', game_text)
            if not teams_match:
                return None
            
            team1 = teams_match.group(1).strip()
            team2 = teams_match.group(2).strip()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ PullUP
            pullup_team = None
            opponent_team = None
            
            if "pull" in team1.lower() and "up" in team1.lower():
                pullup_team = team1
                opponent_team = team2
            elif "pull" in team2.lower() and "up" in team2.lower():
                pullup_team = team2
                opponent_team = team1
            
            if not pullup_team:
                return None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—á–µ—Ç
            score_match = re.search(r'(\d+)\s*:\s*(\d+)', game_text)
            if not score_match:
                return None
            
            score1 = int(score_match.group(1))
            score2 = int(score_match.group(2))
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Å—á–µ—Ç —É PullUP
            if pullup_team == team1:
                pullup_score = score1
                opponent_score = score2
            else:
                pullup_score = score2
                opponent_score = score1
            
            # –ù–∞—Ö–æ–¥–∏–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–≥—Ä—É –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            game_link = self.find_game_link_by_time(game_time, html_content, current_date)
            
            return {
                'pullup_team': pullup_team,
                'opponent_team': opponent_team,
                'pullup_score': pullup_score,
                'opponent_score': opponent_score,
                'date': current_date,
                'game_link': game_link
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∏–≥—Ä–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞: {e}")
            return None
    
    def find_game_link_by_time(self, game_time, html_content, current_date):
        """–ù–∞—Ö–æ–¥–∏—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∏–≥—Ä—É –ø–æ –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            # –ò—â–µ–º –≤—Å–µ –∏–≥—Ä—ã –Ω–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
            all_games = re.findall(rf'{current_date}\s+\d{{2}}\.\d{{2}}[^-]*-\s*[^-]+[^-]*-\s*[^-]+', html_content)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –∏–≥—Ä—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            game_order = None
            for i, game_text in enumerate(all_games):
                if game_time in game_text:
                    game_order = i + 1
                    break
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–≥—Ä—ã
            game_links = self.get_game_links(html_content)
            
            if game_order and game_order <= len(game_links):
                game_link = game_links[game_order - 1]
                if not game_link.startswith('http'):
                    game_link = LETOBASKET_URL.rstrip('/') + '/' + game_link.lstrip('/')
                return game_link
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            return LETOBASKET_URL
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–≥—Ä—É –ø–æ –≤—Ä–µ–º–µ–Ω–∏: {e}")
            return LETOBASKET_URL
    
    def extract_finished_game_info(self, row, current_date, html_content):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∏–≥—Ä–µ"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ —Å—á–µ—Ç
            cells = row.find_all('td')
            if len(cells) < 3:
                return None
            
            # –ò—â–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ —Å—á–µ—Ç –≤ —Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–æ–∫–∏
            row_text = row.get_text()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
            teams_match = re.search(r'([^-]+)\s*-\s*([^-]+)', row_text)
            if not teams_match:
                return None
            
            team1 = teams_match.group(1).strip()
            team2 = teams_match.group(2).strip()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ PullUP
            pullup_team = None
            opponent_team = None
            
            if "pull" in team1.lower() and "up" in team1.lower():
                pullup_team = team1
                opponent_team = team2
            elif "pull" in team2.lower() and "up" in team2.lower():
                pullup_team = team2
                opponent_team = team1
            
            if not pullup_team:
                return None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—á–µ—Ç
            score_match = re.search(r'(\d+)\s*:\s*(\d+)', row_text)
            if not score_match:
                return None
            
            score1 = int(score_match.group(1))
            score2 = int(score_match.group(2))
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Å—á–µ—Ç —É PullUP
            if pullup_team == team1:
                pullup_score = score1
                opponent_score = score2
            else:
                pullup_score = score2
                opponent_score = score1
            
            # –ù–∞—Ö–æ–¥–∏–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–≥—Ä—É
            game_link = self.find_game_link_for_row(row, html_content, current_date)
            
            return {
                'pullup_team': pullup_team,
                'opponent_team': opponent_team,
                'pullup_score': pullup_score,
                'opponent_score': opponent_score,
                'date': current_date,
                'game_link': game_link
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∏–≥—Ä–µ: {e}")
            return None
    
    async def send_finish_notification(self, finished_game):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã"""
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notification_id = f"finish_{finished_game['date']}_{finished_game['opponent_team']}"
        
        if notification_id in sent_finish_notifications:
            logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        if finished_game['pullup_score'] > finished_game['opponent_score']:
            result_emoji = "üèÜ"
            result_text = "–ø–æ–±–µ–¥–∏–ª–∏"
        elif finished_game['pullup_score'] < finished_game['opponent_score']:
            result_emoji = "üòî"
            result_text = "–ø—Ä–æ–∏–≥—Ä–∞–ª–∏"
        else:
            result_emoji = "ü§ù"
            result_text = "—Å—ã–≥—Ä–∞–ª–∏ –≤–Ω–∏—á—å—é"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–≥—Ä—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        game_link = finished_game.get('game_link', LETOBASKET_URL)
        
        message = f"üèÄ –ò–≥—Ä–∞ –ø—Ä–æ—Ç–∏–≤ **{finished_game['opponent_team']}** –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å\n"
        message += f"{result_emoji} –°—á–µ—Ç: **{finished_game['pullup_team']} {finished_game['pullup_score']} : {finished_game['opponent_score']} {finished_game['opponent_team']}** ({result_text})\n"
        message += f"üìä –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª: [—Ç—É—Ç]({game_link})"
        
        if self.bot and CHAT_ID:
            try:
                await self.bot.send_message(
                    chat_id=CHAT_ID, 
                    text=message, 
                    parse_mode='Markdown'
                )
                sent_finish_notifications.add(notification_id)
                logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")
        else:
            logger.info(f"[DRY_RUN] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {message}")
    
    async def check_and_notify(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
            html_content = await self.get_fresh_page_content()
            soup = BeautifulSoup(html_content, 'html.parser')
            page_text = soup.get_text()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
            current_date = self.extract_current_date(page_text)
            if not current_date:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É")
                return
            
            logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–≥—Ä—ã –Ω–∞ {current_date}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã
            finished_games = self.check_finished_games(html_content, current_date)
            for finished_game in finished_games:
                await self.send_finish_notification(finished_game)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∏–≥—Ä—ã (—É—Ç—Ä–µ–Ω–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ)
            current_time = datetime.now().time()
            if time(9, 55) <= current_time <= time(10, 5):  # –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                pullup_games = self.find_pullup_games(page_text, current_date)
                await self.send_morning_notification(pullup_games, html_content)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ check_and_notify: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    manager = PullUPNotificationManager()
    await manager.check_and_notify()

if __name__ == "__main__":
    asyncio.run(main())
