#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä –≤ GitHub Actions
"""

import asyncio
import json
import os
from datetime import datetime, timezone, timedelta
from game_results_monitor import GameResultsMonitor, load_game_monitor_history, save_game_monitor_history
from datetime_utils import get_moscow_time, is_today
from game_system_manager import GameSystemManager

async def check_games_for_monitoring() -> list:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–≥—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –Ω–∞—á–∞—Ç—å—Å—è –≤ –±–ª–∏–∂–∞–π—à–∏–µ 5 –º–∏–Ω—É—Ç"""
    try:
        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–≥—Ä—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä GameSystemManager –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        game_manager = GameSystemManager()
        
        # –ü–∞—Ä—Å–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        schedule = await game_manager.fetch_letobasket_schedule()
        
        if not schedule:
            print("   üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–≥—Ä—ã —Å–µ–≥–æ–¥–Ω—è
        now = get_moscow_time()
        games_to_monitor = []
        
        for game in schedule:
            if not is_today(game['date']):
                continue
                
            try:
                # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∏–≥—Ä—ã
                time_str = game['time'].replace('.', ':')
                game_time = datetime.strptime(f"{game['date']} {time_str}", '%d.%m.%Y %H:%M')
                game_time = game_time.replace(tzinfo=timezone(timedelta(hours=3)))  # –ú–°–ö
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –∏–≥—Ä–∞ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 5 –º–∏–Ω—É—Ç
                time_diff = (game_time - now).total_seconds()
                
                if 0 <= time_diff <= 300:  # –û—Ç 0 –¥–æ 5 –º–∏–Ω—É—Ç (300 —Å–µ–∫—É–Ω–¥)
                    games_to_monitor.append(game)
                    print(f"   üèÄ –ò–≥—Ä–∞ {game['team1']} vs {game['team2']} –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ {time_diff/60:.1f} –º–∏–Ω—É—Ç")
                    
            except Exception as e:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏–≥—Ä—ã: {e}")
                continue
        
        if games_to_monitor:
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(games_to_monitor)} –∏–≥—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        else:
            print(f"   ‚ÑπÔ∏è –ù–µ—Ç –∏–≥—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 5 –º–∏–Ω—É—Ç")
            
        return games_to_monitor
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–≥—Ä: {e}")
        return []

async def run_game_results_monitor():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä"""
    print("üèÄ –ó–ê–ü–£–°–ö –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ò–ì–†")
    print("=" * 60)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    now = get_moscow_time()
    print(f"üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (–ú–æ—Å–∫–≤–∞): {now.strftime('%d.%m.%Y %H:%M:%S')}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–≥—Ä—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    games_to_monitor = await check_games_for_monitoring()
    
    if not games_to_monitor:
        print("üìÖ –ù–µ—Ç –∏–≥—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É")
        return
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        monitor_history = load_game_monitor_history()
        print(f"üìã –ò—Å—Ç–æ—Ä–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç {len(monitor_history)} –∑–∞–ø–∏—Å–µ–π")
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞
        monitor = GameResultsMonitor()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã
        for game in games_to_monitor:
            print(f"\nüéÆ –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –∏–≥—Ä—ã: {game['team1']} vs {game['team2']}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –Ω–∞–π–¥–µ–Ω–∞ –≤–Ω—É—Ç—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞)
            success = await monitor.start_monitoring_for_game(game, "")
            
            if success:
                print(f"   ‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∏
        active_monitors = 0
        completed_monitors = 0
        
        for game_key, monitor_info in monitor_history.items():
            status = monitor_info.get('status', 'unknown')
            
            if status == 'monitoring':
                active_monitors += 1
                game_info = monitor_info.get('game_info', {})
                game_link = monitor_info.get('game_link', '')
                
                print(f"\nüéÆ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {game_key}")
                print(f"   –î–∞—Ç–∞: {game_info.get('date', 'N/A')}")
                print(f"   –í—Ä–µ–º—è: {game_info.get('time', 'N/A')}")
                print(f"   –ö–æ–º–∞–Ω–¥—ã: {game_info.get('team1', 'N/A')} vs {game_info.get('team2', 'N/A')}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
                scoreboard_info = await monitor.parse_game_scoreboard(game_link)
                
                if scoreboard_info:
                    print(f"   üìä –ü–µ—Ä–∏–æ–¥: {scoreboard_info['period']}, –í—Ä–µ–º—è: {scoreboard_info['timer']}")
                    print(f"   üèÄ –°—á–µ—Ç: {scoreboard_info['score1']} : {scoreboard_info['score2']}")
                    
                    if scoreboard_info['is_game_finished']:
                        print(f"   üèÅ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        success = await monitor.send_game_result_notification(
                            game_info, scoreboard_info, game_link
                        )
                        
                        if success:
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∏—Å—Ç–æ—Ä–∏–∏
                            monitor_info['status'] = 'completed'
                            monitor_info['end_time'] = get_moscow_time().isoformat()
                            completed_monitors += 1
                            print(f"   ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º workflow
                            save_game_monitor_history(monitor_history)
                            print(f"   üèÅ Workflow –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                            return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                        else:
                            print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                    else:
                        print(f"   ‚è≥ –ò–≥—Ä–∞ –µ—â–µ –∏–¥–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
                else:
                    print(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–æ")
            
            elif status == 'completed':
                completed_monitors += 1
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
        save_game_monitor_history(monitor_history)
        
        print(f"\nüìã –ò–¢–û–ì–ò –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê:")
        print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤: {active_monitors}")
        print(f"   –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤: {completed_monitors}")
        print(f"   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: {len(monitor_history)}")
        
        if active_monitors == 0:
            print(f"   ‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤")
        
        print(f"\n‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        raise

if __name__ == "__main__":
    asyncio.run(run_game_results_monitor())
