#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä –≤ GitHub Actions
"""

import asyncio
import json
import os
from datetime import datetime, timezone, timedelta
from typing import Dict, Optional
from game_results_monitor import GameResultsMonitor, load_game_monitor_history, save_game_monitor_history
from datetime_utils import get_moscow_time, is_today
from game_system_manager import GameSystemManager

async def check_games_for_monitoring() -> list:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–≥—Ä—ã –Ω–∞ —Ç–∞–±–ª–æ letobasket.ru, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –Ω–∞—á–∞—Ç—å—Å—è –≤ –±–ª–∏–∂–∞–π—à–∏–µ 15 –º–∏–Ω—É—Ç –∏–ª–∏ —É–∂–µ –º–æ–Ω–∏—Ç–æ—Ä—è—Ç—Å—è"""
    try:
        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–≥—Ä—ã –Ω–∞ —Ç–∞–±–ª–æ letobasket.ru...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        monitor_history = load_game_monitor_history()
        
        # –ü–∞—Ä—Å–∏–º —Ç–∞–±–ª–æ letobasket.ru –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        games_to_monitor = []
        now = get_moscow_time()
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∏
        active_monitors = []
        for game_key, monitor_info in monitor_history.items():
            status = monitor_info.get('status', 'unknown')
            if status == 'monitoring':
                game_info = monitor_info.get('game_info', {})
                if game_info and is_today(game_info.get('date', '')):
                    active_monitors.append(game_info)
                    print(f"   üéÆ –ù–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {game_info.get('team1', '')} vs {game_info.get('team2', '')}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∏ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        games_to_monitor.extend(active_monitors)
        
        # –¢–µ–ø–µ—Ä—å –ø–∞—Ä—Å–∏–º —Ç–∞–±–ª–æ letobasket.ru
        try:
            import aiohttp
            from bs4 import BeautifulSoup
            
            url = "http://letobasket.ru/"
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as response:
                    if response.status == 200:
                        content = await response.text()
                        soup = BeautifulSoup(content, 'html.parser')
                        
                        # –ò—â–µ–º —Å–µ–∫—Ü–∏—é —Å —Ç–∞–±–ª–æ –∏–≥—Ä
                        scoreboard_section = soup.find('div', class_='scoreboard') or soup.find('div', id='scoreboard')
                        
                        if scoreboard_section:
                            print("   üìä –ù–∞–π–¥–µ–Ω–∞ —Å–µ–∫—Ü–∏—è —Ç–∞–±–ª–æ")
                            print(f"   üîç –¢–∏–ø —Å–µ–∫—Ü–∏–∏: {type(scoreboard_section)}")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ Tag, –∞ –Ω–µ NavigableString
                            from bs4 import Tag
                            if isinstance(scoreboard_section, Tag):
                                # –ò—â–µ–º –∏–≥—Ä—ã —Å –Ω–∞—à–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
                                game_elements = scoreboard_section.find_all(['div', 'tr'])
                            else:
                                print("   ‚ö†Ô∏è –°–µ–∫—Ü–∏—è —Ç–∞–±–ª–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Tag —ç–ª–µ–º–µ–Ω—Ç–æ–º")
                                game_elements = []
                            
                            for game_element in game_elements:
                                try:
                                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ
                                    game_info = await parse_game_from_scoreboard(game_element, now)
                                    
                                    if game_info:
                                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞—à–∏ –∫–æ–º–∞–Ω–¥—ã
                                        if has_pull_up_team(game_info):
                                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
                                            time_diff = (game_info['game_time'] - now).total_seconds()
                                            
                                            if 0 <= time_diff <= 900:  # –û—Ç 0 –¥–æ 15 –º–∏–Ω—É—Ç
                                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–º –ª–∏ —É–∂–µ —ç—Ç—É –∏–≥—Ä—É
                                                game_key = f"{game_info['date']}_{game_info['time']}_{game_info['team1']}_{game_info['team2']}"
                                                if game_key not in monitor_history:
                                                    games_to_monitor.append(game_info)
                                                    print(f"   üèÄ –ù–æ–≤–∞—è –∏–≥—Ä–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {game_info['team1']} vs {game_info['team2']} –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ {time_diff/60:.1f} –º–∏–Ω—É—Ç")
                                                else:
                                                    print(f"   ‚è≠Ô∏è –ò–≥—Ä–∞ —É–∂–µ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {game_info['team1']} vs {game_info['team2']}")
                                            
                                except Exception as e:
                                    print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–≥—Ä—ã: {e}")
                                    continue
                        else:
                            print("   ‚ö†Ô∏è –°–µ–∫—Ü–∏—è —Ç–∞–±–ª–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
                    else:
                        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {response.status}")
                        
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–∞–±–ª–æ: {e}")
        
        if games_to_monitor:
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(games_to_monitor)} –∏–≥—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        else:
            print(f"   ‚ÑπÔ∏è –ù–µ—Ç –∏–≥—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 15 –º–∏–Ω—É—Ç")
            
        return games_to_monitor
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–≥—Ä: {e}")
        return []

async def parse_game_from_scoreboard(game_element, now) -> Optional[Dict]:
    """–ü–∞—Ä—Å–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞ —Ç–∞–±–ª–æ"""
    try:
        # –ò—â–µ–º –∫–æ–º–∞–Ω–¥—ã
        team_elements = game_element.find_all(['td', 'div'], class_=['team', 'team-name'])
        if len(team_elements) < 2:
            return None
            
        team1 = team_elements[0].get_text(strip=True)
        team2 = team_elements[1].get_text(strip=True)
        
        # –ò—â–µ–º –≤—Ä–µ–º—è –∏–≥—Ä—ã
        time_element = game_element.find(['td', 'div', 'span'], class_=['time', 'game-time', 'start-time'])
        if not time_element:
            return None
            
        time_text = time_element.get_text(strip=True)
        
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è (—Ñ–æ—Ä–º–∞—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º: "20:30", "20.30", "20-30")
        time_str = time_text.replace('.', ':').replace('-', ':')
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º—è –∏–≥—Ä—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        game_time = datetime.strptime(f"{now.strftime('%d.%m.%Y')} {time_str}", '%d.%m.%Y %H:%M')
        game_time = game_time.replace(tzinfo=timezone(timedelta(hours=3)))  # –ú–°–ö
        
        # –ò—â–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–≥—Ä—É
        link_element = game_element.find('a', href=True)
        game_link = link_element['href'] if link_element else ""
        
        return {
            'date': now.strftime('%d.%m.%Y'),
            'time': time_str,
            'team1': team1,
            'team2': team2,
            'game_time': game_time,
            'game_link': game_link,
            'venue': '–í–û –°–®–û–† –ú–∞–ª—ã–π 66'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }
        
    except Exception as e:
        print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–≥—Ä—ã: {e}")
        return None

def has_pull_up_team(game_info: dict) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –∫–æ–º–∞–Ω–¥–∞ Pull Up –≤ –∏–≥—Ä–µ"""
    team1 = game_info.get('team1', '').lower()
    team2 = game_info.get('team2', '').lower()
    
    pull_up_variants = ['pull up', 'pullup', 'pull up-—Ñ–∞—Ä–º', 'pull up —Ñ–∞—Ä–º']
    
    for variant in pull_up_variants:
        if variant in team1 or variant in team2:
            return True
    
    return False

async def run_game_results_monitor():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä"""
    print("üèÄ –ó–ê–ü–£–°–ö –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ò–ì–†")
    print("=" * 60)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    now = get_moscow_time()
    print(f"üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (–ú–æ—Å–∫–≤–∞): {now.strftime('%d.%m.%Y %H:%M:%S')}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–≥—Ä—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    games_to_monitor = await check_games_for_monitoring()
    
    if not games_to_monitor:
        print("üìÖ –ù–µ—Ç –∏–≥—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É")
        return
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        monitor_history = load_game_monitor_history()
        print(f"üìã –ò—Å—Ç–æ—Ä–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç {len(monitor_history)} –∑–∞–ø–∏—Å–µ–π")
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞
        monitor = GameResultsMonitor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã
        for game in games_to_monitor:
            print(f"\nüéÆ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–≥—Ä—É: {game['team1']} vs {game['team2']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–≥—Ä—É –≤ –∏—Å—Ç–æ—Ä–∏–∏
            game_key = f"{game['date']}_{game['time']}_{game['team1']}_{game['team2']}"
            game_link = ""
            
            if game_key in monitor_history:
                game_link = monitor_history[game_key].get('game_link', '')
                print(f"   üîó –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏: {game_link}")
            
            # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∏ –Ω–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –µ—ë
            if not game_link:
                print(f"   üîç –ò—â–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–≥—Ä—É...")
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            success = await monitor.start_monitoring_for_game(game, game_link)
            
            if success:
                print(f"   ‚úÖ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            else:
                print(f"   ‚è≥ –ò–≥—Ä–∞ –µ—â–µ –∏–¥–µ—Ç –∏–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
        save_game_monitor_history(monitor_history)
        
        print(f"\nüìã –ò–¢–û–ì–ò –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê:")
        print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–≥—Ä: {len(games_to_monitor)}")
        print(f"   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: {len(monitor_history)}")
        
        print(f"\n‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        raise

if __name__ == "__main__":
    asyncio.run(run_game_results_monitor())
