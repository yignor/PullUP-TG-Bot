#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –∏–≥—Ä PullUP
"""

import asyncio
import os
import re
import json
import logging
from datetime import datetime, time
from bs4 import BeautifulSoup
import aiohttp
from telegram import Bot
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

LETOBASKET_URL = "http://letobasket.ru/"
POLLS_FILE = "schedule_polls.json"

class SchedulePollsManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
    
    def __init__(self):
        self.bot = Bot(token=os.getenv('BOT_TOKEN')) if os.getenv('BOT_TOKEN') else None
        self.chat_id = os.getenv('CHAT_ID')
        self.topic_id = "1282"  # –¢–æ–ø–∏–∫ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π
        self.created_polls = self.load_created_polls()
    
    def load_created_polls(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π"""
        try:
            if os.path.exists(POLLS_FILE):
                with open(POLLS_FILE, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π: {e}")
        return {}
    
    def save_created_polls(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π"""
        try:
            with open(POLLS_FILE, 'w', encoding='utf-8') as f:
                json.dump(self.created_polls, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π: {e}")
    
    def get_poll_id(self, game):
        """–°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
        return f"{game['date']}_{game['opponent_team']}_{game['pullup_team']}"
    
    def is_poll_created(self, game):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–æ –ª–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã"""
        poll_id = self.get_poll_id(game)
        return poll_id in self.created_polls
    
    def mark_poll_created(self, game, message_id):
        """–û—Ç–º–µ—á–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∫–∞–∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–µ"""
        poll_id = self.get_poll_id(game)
        self.created_polls[poll_id] = {
            'date': game['date'],
            'opponent': game['opponent_team'],
            'pullup_team': game['pullup_team'],
            'message_id': message_id,
            'created_at': datetime.now().isoformat()
        }
        self.save_created_polls()
    
    async def get_fresh_page_content(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤–µ–∂–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            'Cache-Control': 'no-cache',
            'Pragma': 'no-cache'
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.get(LETOBASKET_URL, headers=headers) as response:
                return await response.text()
    
    def parse_schedule(self, html_content):
        """–ü–∞—Ä—Å–∏—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä"""
        soup = BeautifulSoup(html_content, 'html.parser')
        schedule_text = soup.get_text()
        
        # –ò—â–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
        schedule_pattern = r'\d{2}\.\d{2}\.\d{4}\s+\d{2}\.\d{2}\s*\([^)]+\)\s*-\s*[^-]+[^-]*-\s*[^-]+'
        schedule_matches = re.findall(schedule_pattern, schedule_text)
        
        pullup_games = []
        
        for match in schedule_matches:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∑–∞–ø–∏—Å—å PullUP
            pullup_patterns = [
                r'pull\s*up',
                r'PullUP',
                r'Pull\s*Up'
            ]
            
            is_pullup_game = any(re.search(pattern, match, re.IGNORECASE) for pattern in pullup_patterns)
            
            if is_pullup_game:
                # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
                date_time_match = re.search(r'(\d{2}\.\d{2}\.\d{4})\s+(\d{2}\.\d{2})', match)
                if date_time_match:
                    date_str = date_time_match.group(1)
                    time_str = date_time_match.group(2)
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏
                    try:
                        date_obj = datetime.strptime(date_str, '%d.%m.%Y')
                        weekday_names = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
                        weekday = weekday_names[date_obj.weekday()]
                    except:
                        weekday = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                
                # –ü–∞—Ä—Å–∏–º –∞–¥—Ä–µ—Å –∑–∞–ª–∞
                venue_match = re.search(r'\(([^)]+)\)', match)
                venue = venue_match.group(1) if venue_match else "–ù–µ —É–∫–∞–∑–∞–Ω"
                
                # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥
                pullup_match = re.search(r'Pull\s*Up', match, re.IGNORECASE)
                if pullup_match:
                    # –ò—â–µ–º –∫–æ–º–∞–Ω–¥—É –ø–µ—Ä–µ–¥ Pull Up
                    opponent_match = re.search(r'-\s*([^-]+?)(?:\s*-\s*Pull\s*Up)', match, re.IGNORECASE)
                    if opponent_match:
                        opponent_team = opponent_match.group(1).strip()
                        pullup_team = "Pull Up"
                        
                        pullup_games.append({
                            'date': date_str if date_time_match else None,
                            'time': time_str if date_time_match else None,
                            'weekday': weekday,
                            'venue': venue,
                            'pullup_team': pullup_team,
                            'opponent_team': opponent_team,
                            'full_text': match.strip()
                        })
        
        return pullup_games
    
    def create_poll_title(self, game):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã
        if "Pull Up-–§–∞—Ä–º" in game['pullup_team']:
            team_type = "—Ä–∞–∑–≤–∏—Ç–∏–µ"
        else:
            team_type = "–ø–µ—Ä–≤—ã–π —Å–æ—Å—Ç–∞–≤"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
        title = f"–õ–µ—Ç–Ω—è—è –ª–∏–≥–∞, {team_type}, {game['opponent_team']}: {game['weekday']} ({game['date'][:8]}) {game['time']}, {game['venue']}"
        
        return title
    
    async def create_poll_for_game(self, game):
        """–°–æ–∑–¥–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–≥—Ä—ã"""
        if not self.bot or not self.chat_id:
            logger.error("–ë–æ—Ç –∏–ª–∏ CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
        if self.is_poll_created(game):
            logger.info(f"–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã {game['opponent_team']} –Ω–∞ {game['date']} —É–∂–µ —Å–æ–∑–¥–∞–Ω–æ")
            return False
        
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
            poll_title = self.create_poll_title(game)
            
            # –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
            poll_options = [
                "‚úÖ –ì–æ—Ç–æ–≤",
                "‚ùå –ù–µ—Ç", 
                "üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä"
            ]
            
            # –°–æ–∑–¥–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
            poll = await self.bot.send_poll(
                chat_id=self.chat_id,
                question=poll_title,
                options=poll_options,
                allows_multiple_answers=False,  # –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä
                is_anonymous=False,  # –û—Ç–∫—Ä—ã—Ç–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
                message_thread_id=int(self.topic_id)
            )
            
            # –û—Ç–º–µ—á–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∫–∞–∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–µ
            self.mark_poll_created(game, poll.message_id)
            
            logger.info(f"–°–æ–∑–¥–∞–Ω–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã {game['opponent_team']} –Ω–∞ {game['date']} (ID: {poll.message_id})")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –¥–ª—è –∏–≥—Ä—ã {game['opponent_team']}: {e}")
            return False
    
    async def check_and_create_polls(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤ 10 —É—Ç—Ä–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            current_time = datetime.now().time()
            if not (time(10, 0) <= current_time <= time(10, 5)):  # –¢–æ–ª—å–∫–æ –≤ 10:00-10:05
                logger.info("–ù–µ –≤—Ä–µ–º—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π (—Ç–æ–ª—å–∫–æ –≤ 10:00-10:05)")
                return
            
            logger.info("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            html_content = await self.get_fresh_page_content()
            pullup_games = self.parse_schedule(html_content)
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(pullup_games)} –∏–≥—Ä PullUP –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏")
            
            # –°–æ–∑–¥–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö –∏–≥—Ä
            created_count = 0
            for game in pullup_games:
                if await self.create_poll_for_game(game):
                    created_count += 1
            
            logger.info(f"–°–æ–∑–¥–∞–Ω–æ {created_count} –Ω–æ–≤—ã—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ check_and_create_polls: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    manager = SchedulePollsManager()
    await manager.check_and_create_polls()

if __name__ == "__main__":
    asyncio.run(main())
