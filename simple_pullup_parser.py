#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä –∏–≥—Ä PullUP - –∏—â–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ —Å–∞–π—Ç–µ
"""

import asyncio
import re
import aiohttp
from datetime import datetime, timezone, timedelta

LETOBASKET_URL = "http://letobasket.ru/"

async def simple_pullup_parser():
    """–ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä –∏–≥—Ä PullUP"""
    
    async with aiohttp.ClientSession() as session:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            'Cache-Control': 'no-cache'
        }
        
        try:
            async with session.get(LETOBASKET_URL, headers=headers) as response:
                if response.status == 200:
                    content = await response.text()
                    
                    print("üèÄ –ü–ê–†–°–ï–† –ò–ì–† PULLUP")
                    print("=" * 50)
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
                    moscow_tz = timezone(timedelta(hours=3))
                    current_date = datetime.now(moscow_tz).strftime('%d.%m.%Y')
                    
                    print(f"üéØ –ò–ì–†–´ PULLUP (—Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {current_date})")
                    print("=" * 50)
                    
                    # –ò—â–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ PullUP
                    pullup_patterns = [
                        r'pull\s*up',
                        r'PullUP',
                        r'Pull\s*Up',
                        r'Pull\s*Up-–§–∞—Ä–º'
                    ]
                    
                    found_lines = []
                    lines = content.split('\n')
                    
                    for line in lines:
                        for pattern in pullup_patterns:
                            if re.search(pattern, line, re.IGNORECASE):
                                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∫—Ä—É–≥ —Å—Ç—Ä–æ–∫–∏
                                start = max(0, lines.index(line) - 2)
                                end = min(len(lines), lines.index(line) + 3)
                                context = '\n'.join(lines[start:end])
                                found_lines.append(context.strip())
                                break
                    
                    if found_lines:
                        print(f"üìã –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ —Å PullUP: {len(found_lines)}")
                        print()
                        
                        for i, line in enumerate(found_lines[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                            print(f"{i}. {line[:200]}...")  # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                    else:
                        print("üìÖ –°—Ç—Ä–æ–∫ —Å PullUP –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    
                    print()
                    print("üîç –ü–û–ò–°–ö –ö–û–ù–ö–†–ï–¢–ù–´–• –ò–ì–†")
                    print("=" * 50)
                    
                    # –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏–≥—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –≤–∏–¥–µ–ª–∏ –≤ –∞–Ω–∞–ª–∏–∑–µ
                    specific_games = [
                        "27.08.2025 20.30 (MarvelHall) - –ö—É–¥—Ä–æ–≤–æ - Pull Up-–§–∞—Ä–º",
                        "27.08.2025 21.45 (MarvelHall) - Old Stars - Pull Up",
                        "30.08.2025 12.30 (MarvelHall) - –¢–æ—Å–Ω–æ - Pull Up-–§–∞—Ä–º"
                    ]
                    
                    found_specific = []
                    for game in specific_games:
                        if game in content:
                            found_specific.append(game)
                    
                    if found_specific:
                        print(f"üìã –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∏–≥—Ä: {len(found_specific)}")
                        print()
                        
                        for i, game in enumerate(found_specific, 1):
                            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è (–∑–∞–º–µ–Ω—è–µ–º —Ç–æ—á–∫—É –Ω–∞ –¥–≤–æ–µ—Ç–æ—á–∏–µ)
                            game_formatted = re.sub(r'(\d{2})\.(\d{2})', r'\1:\2', game)
                            print(f"{i}. ‚è∞ {game_formatted}")
                    else:
                        print("üìÖ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏–≥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    
                    print()
                    print("üîç –ü–û–ò–°–ö –ü–û –ü–ê–¢–¢–ï–†–ù–ê–ú")
                    print("=" * 50)
                    
                    # –ò—â–µ–º –ø–æ –æ–±—â–∏–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
                    patterns_to_try = [
                        r'(\d{2}\.\d{2}\.\d{4})\s+(\d{2}\.\d{2})\s+\([^)]+\)\s*-\s*[^-]+?\s*-\s*[^-]*?Pull[^-]*?(?:\s|$)',
                        r'(\d{2}\.\d{2}\.\d{4})\s+(\d{2}\.\d{2})\s+\([^)]+\)\s*-\s*[^-]*?Pull[^-]*?\s*-\s*[^-]+?(?:\s|$)',
                        r'(\d{2}\.\d{2}\.\d{4})-\s*[^-]+?\s*-\s*[^-]*?Pull[^-]*?\s*(\d+:\d+)',
                    ]
                    
                    for pattern in patterns_to_try:
                        matches = re.findall(pattern, content, re.IGNORECASE)
                        if matches:
                            print(f"üìã –ü–∞—Ç—Ç–µ—Ä–Ω –Ω–∞–π–¥–µ–Ω: {len(matches)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")
                            for match in matches[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                                print(f"   {match}")
                            break
                    else:
                        print("üìÖ –ü–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {response.status}")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(simple_pullup_parser())
