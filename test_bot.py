#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞
"""

import os
import sys
import asyncio
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def test_environment():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    bot_token = os.getenv("BOT_TOKEN")
    chat_id = os.getenv("CHAT_ID")
    
    if not bot_token:
        print("‚ö†Ô∏è BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ Railway)")
    else:
        print("‚úÖ BOT_TOKEN –Ω–∞–π–¥–µ–Ω")
    
    if not chat_id:
        print("‚ö†Ô∏è CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ Railway)")
    else:
        print("‚úÖ CHAT_ID –Ω–∞–π–¥–µ–Ω")
    
    # –ù–µ —Å—á–∏—Ç–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–æ–π –¥–ª—è Railway
    return True

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    try:
        import aiohttp
        print("‚úÖ aiohttp –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ aiohttp: {e}")
        return False
    
    try:
        import bs4
        print("‚úÖ beautifulsoup4 –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ beautifulsoup4: {e}")
        return False
    
    try:
        from telegram import Bot
        from telegram.ext import Application
        print("‚úÖ python-telegram-bot –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ python-telegram-bot: {e}")
        return False
    
    return True

async def test_telegram_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram...")
    
    try:
        from telegram import Bot
        from telegram.ext import Application
        bot_token = os.getenv("BOT_TOKEN")
        
        if not bot_token:
            print("‚ö†Ô∏è BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç Telegram")
            return True
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å API
        application = Application.builder().token(bot_token).build()
        bot = application.bot
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        bot_info = await bot.get_me()
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å–ø–µ—à–Ω–æ")
        print(f"   –ò–º—è –±–æ—Ç–∞: {bot_info.first_name}")
        print(f"   Username: @{bot_info.username}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram: {e}")
        return False

async def test_website_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–∞–π—Ç—É letobasket.ru"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ letobasket.ru...")
    
    try:
        import aiohttp
        url = "http://letobasket.ru/"
        
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    print("‚úÖ –°–∞–π—Ç letobasket.ru –¥–æ—Å—Ç—É–ø–µ–Ω")
                    return True
                else:
                    print(f"‚ùå –°–∞–π—Ç –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: {response.status}")
                    return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–∞–π—Ç—É: {e}")
        return False

def test_birthday_logic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è...")
    
    try:
        import datetime
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–∫–ª–æ–Ω–µ–Ω–∏—è
        def get_years_word(age: int) -> str:
            if 11 <= age % 100 <= 14:
                return "–ª–µ—Ç"
            elif age % 10 == 1:
                return "–≥–æ–¥"
            elif 2 <= age % 10 <= 4:
                return "–≥–æ–¥–∞"
            else:
                return "–ª–µ—Ç"
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–∑—Ä–∞—Å—Ç—ã
        test_cases = [1, 2, 5, 11, 21, 22, 25, 31, 32, 35]
        for age in test_cases:
            word = get_years_word(age)
            print(f"   {age} {word}")
        
        print("‚úÖ –õ–æ–≥–∏–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ª–æ–≥–∏–∫–µ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è: {e}")
        return False

def test_pullup_patterns():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ PullUP"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø–æ–∏—Å–∫–∞ PullUP...")
    
    try:
        import re
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ PullUP
        PULLUP_PATTERNS = [
            r'PullUP',
            r'Pull UP',
            r'PULL UP',
            r'pull up',
            r'PULLUP',
            r'pullup',
            r'Pull Up',
            r'PULL UP\s+\w+',  # PULL UP —Å –ª—é–±—ã–º —Å–ª–æ–≤–æ–º –ø–æ—Å–ª–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, PULL UP —Ñ–∞—Ä–º)
            r'Pull UP\s+\w+',  # Pull UP —Å –ª—é–±—ã–º —Å–ª–æ–≤–æ–º –ø–æ—Å–ª–µ
            r'pull up\s+\w+',  # pull up —Å –ª—é–±—ã–º —Å–ª–æ–≤–æ–º –ø–æ—Å–ª–µ
        ]
        
        def find_pullup_team(text_block):
            """–ò—â–µ—Ç –∫–æ–º–∞–Ω–¥—É PullUP –≤ —Ç–µ–∫—Å—Ç–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∞—Ä–∏–∞—Ü–∏–π"""
            for pattern in PULLUP_PATTERNS:
                matches = re.findall(pattern, text_block, re.IGNORECASE)
                if matches:
                    return matches[0].strip()
            return None
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
        test_strings = [
            "PullUP",
            "Pull UP",
            "PULL UP",
            "pull up",
            "PULLUP",
            "pullup",
            "Pull Up",
            "PULL UP —Ñ–∞—Ä–º",
            "Pull UP team",
            "pull up club"
        ]
        
        for test_str in test_strings:
            result = find_pullup_team(test_str)
            if result:
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ: '{test_str}' ‚Üí '{result}'")
            else:
                print(f"   ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ: '{test_str}'")
        
        print("‚úÖ –ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–∏—Å–∫–∞ PullUP —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–∞—Ç—Ç–µ—Ä–Ω–∞—Ö –ø–æ–∏—Å–∫–∞ PullUP: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞...\n")
    
    tests_passed = 0
    total_tests = 6
    
    # –¢–µ—Å—Ç 1: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if test_environment():
        tests_passed += 1
    
    # –¢–µ—Å—Ç 2: –ò–º–ø–æ—Ä—Ç—ã
    if test_imports():
        tests_passed += 1
    
    # –¢–µ—Å—Ç 3: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram
    if await test_telegram_connection():
        tests_passed += 1
    
    # –¢–µ—Å—Ç 4: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–∞–π—Ç—É
    if await test_website_connection():
        tests_passed += 1
    
    # –¢–µ—Å—Ç 5: –õ–æ–≥–∏–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è
    if test_birthday_logic():
        tests_passed += 1
    
    # –¢–µ—Å—Ç 6: –ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–∏—Å–∫–∞ PullUP
    if test_pullup_patterns():
        tests_passed += 1
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"   –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {tests_passed}/{total_tests}")
    
    if tests_passed >= total_tests - 1:  # –†–∞–∑—Ä–µ—à–∞–µ–º –æ–¥–∏–Ω –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç
        print("üéâ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
        return True
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        return False

if __name__ == "__main__":
    try:
        result = asyncio.run(main())
        if not result:
            sys.exit(1)
    except KeyboardInterrupt:
        print("\nüõë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        sys.exit(1)
