#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è GitHub Actions
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è
"""

import os
import asyncio
from players_manager import PlayersManager
from birthday_notifications import get_years_word, test_birthday_notifications

def test_google_sheets_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö GOOGLE SHEETS")
    print("=" * 50)
    
    try:
        pm = PlayersManager()
        players = pm.get_all_players()
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(players)} –∏–≥—Ä–æ–∫–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
        for i, player in enumerate(players[:3], 1):
            surname = player.get('surname', '')
            name = player.get('name', '')
            nickname = player.get('nickname', '')
            telegram_id = player.get('telegram_id', '')
            print(f"{i}. {surname} {name} | –ù–∏–∫: \"{nickname}\" | Telegram: {telegram_id}")
            
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def test_message_formatting():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø –°–û–û–ë–©–ï–ù–ò–ô")
    print("=" * 50)
    
    try:
        pm = PlayersManager()
        players = pm.get_all_players()
        
        print("üìù –ü–†–ò–ú–ï–†–´ –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø –°–û–û–ë–©–ï–ù–ò–ô:")
        print("-" * 40)
        
        # –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä–æ–∫–∞ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        example_player = None
        for player in players:
            if player.get('nickname') and player.get('telegram_id'):
                example_player = player
                break
        
        if example_player:
            surname = example_player.get('surname', '')
            nickname = example_player.get('nickname', '')
            telegram_id = example_player.get('telegram_id', '')
            first_name = example_player.get('name', '')
            age = example_player.get('age', 0)
            
            print("1. –° –Ω–∏–∫–Ω–µ–π–º–æ–º –∏ Telegram ID:")
            print(f"üéâ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É {surname} \"{nickname}\" ({telegram_id}) {first_name} ({age} {get_years_word(age)})!")
            print(" –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéÇ")
            print()
            
            print("2. –¢–æ–ª—å–∫–æ —Å –Ω–∏–∫–Ω–µ–π–º–æ–º:")
            print(f"üéâ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É {surname} \"{nickname}\" {first_name} ({age} {get_years_word(age)})!")
            print(" –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéÇ")
            print()
            
            print("3. –¢–æ–ª—å–∫–æ —Å Telegram ID:")
            print(f"üéâ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É {surname} ({telegram_id}) {first_name} ({age} {get_years_word(age)})!")
            print(" –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéÇ")
            print()
            
            print("4. –ë–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
            print(f"üéâ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É {surname} {first_name} ({age} {get_years_word(age)})!")
            print(" –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéÇ")
        else:
            print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –∏–≥—Ä–æ–∫ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞")
        
        print("‚úÖ –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

async def test_birthday_logic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è"""
    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –õ–û–ì–ò–ö–ò –î–ù–ï–ô –†–û–ñ–î–ï–ù–ò–Ø")
    print("=" * 50)
    
    try:
        await test_birthday_notifications()
        print("‚úÖ –¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–û–í–û–ô –°–ò–°–¢–ï–ú–´ –î–ù–ï–ô –†–û–ñ–î–ï–ù–ò–Ø")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    bot_token = os.getenv("BOT_TOKEN")
    chat_id = os.getenv("CHAT_ID")
    google_credentials = os.getenv("GOOGLE_SHEETS_CREDENTIALS")
    spreadsheet_id = os.getenv("SPREADSHEET_ID")
    
    print("üîß –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø:")
    print(f"BOT_TOKEN: {'‚úÖ' if bot_token else '‚ùå'}")
    print(f"CHAT_ID: {'‚úÖ' if chat_id else '‚ùå'}")
    print(f"GOOGLE_SHEETS_CREDENTIALS: {'‚úÖ' if google_credentials else '‚ùå'}")
    print(f"SPREADSHEET_ID: {'‚úÖ' if spreadsheet_id else '‚ùå'}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tests_passed = 0
    total_tests = 3
    
    # –¢–µ—Å—Ç 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
    if test_google_sheets_connection():
        tests_passed += 1
    
    # –¢–µ—Å—Ç 2: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    if test_message_formatting():
        tests_passed += 1
    
    # –¢–µ—Å—Ç 3: –õ–æ–≥–∏–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è
    if await test_birthday_logic():
        tests_passed += 1
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 60)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {tests_passed}/{total_tests}")
    
    if tests_passed == total_tests:
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("üéÇ –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        return True
    else:
        print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´!")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ª–æ–≥–∏")
        return False

if __name__ == "__main__":
    success = asyncio.run(main())
    exit(0 if success else 1)
