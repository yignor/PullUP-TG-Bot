#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞ –ø–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è–º
"""

import asyncio
import os
from dotenv import load_dotenv
from telegram import Bot

def load_env_variables():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞"""
    try:
        load_dotenv()
        print("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —á–µ—Ä–µ–∑ python-dotenv")
    except ImportError:
        try:
            with open('.env', 'r') as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#') and '=' in line:
                        key, value = line.split('=', 1)
                        os.environ[key] = value
            print("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ .env —Ñ–∞–π–ª–∞")
        except FileNotFoundError:
            print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False, None, None
    
    bot_token = os.getenv('BOT_TOKEN')
    chat_id = os.getenv('CHAT_ID')
    
    if not bot_token or not chat_id:
        print("‚ùå BOT_TOKEN –∏–ª–∏ CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return False, None, None
    
    print(f"‚úÖ BOT_TOKEN: {bot_token[:10]}...")
    print(f"‚úÖ CHAT_ID: {chat_id}")
    return True, bot_token, chat_id

async def test_sunday_poll_creation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –ø–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è–º"""
    print("\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–û–ó–î–ê–ù–ò–Ø –û–ü–†–û–°–ê –ü–û –í–û–°–ö–†–ï–°–ï–ù–¨–Ø–ú ===\n")
    
    success, bot_token, chat_id = load_env_variables()
    if not success:
        return
    
    try:
        bot = Bot(token=bot_token)
        print("‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –æ–ø—Ä–æ—Å–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        training_options = [
            "üèÄ –í—Ç–æ—Ä–Ω–∏–∫ 19:00",
            "üèÄ –ü—è—Ç–Ω–∏—Ü–∞ 20:30",
            "üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä",
            "‚ùå –ù–µ—Ç"
        ]
        
        print(f"1. –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ –Ω–µ–¥–µ–ª—é...")
        question = "üèÄ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ –Ω–µ–¥–µ–ª–µ –°–®–û–† –í–û"
        
        # –°–æ–∑–¥–∞–µ–º –æ–ø—Ä–æ—Å —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º
        poll = await bot.send_poll(
            chat_id=chat_id,
            question=question,
            options=training_options,
            allows_multiple_answers=True,
            is_anonymous=False,  # –û—Ç–∫—Ä—ã—Ç—ã–π –æ–ø—Ä–æ—Å
            explanation="–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–∏–π—Ç–∏ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ"
        )
        
        print("‚úÖ –û–ø—Ä–æ—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"   –í–æ–ø—Ä–æ—Å: {poll.poll.question}")
        print(f"   –í–∞—Ä–∏–∞–Ω—Ç—ã: {poll.poll.options}")
        print(f"   –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä: {'–î–∞' if poll.poll.allows_multiple_answers else '–ù–µ—Ç'}")
        print(f"   –ê–Ω–æ–Ω–∏–º–Ω—ã–π: {'–ù–µ—Ç' if poll.poll.is_anonymous else '–î–∞'}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞
        print(f"\n2. –°–æ–∑–¥–∞–Ω–∏–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞...")
        motivation_question = "üí™ –ß—Ç–æ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—É PullUP?"
        motivation_options = [
            "üèÜ –ü–æ–±–µ–¥—ã –∏ —Ç—Ä–æ—Ñ–µ–∏",
            "üë• –ö–æ–º–∞–Ω–¥–Ω—ã–π –¥—É—Ö",
            "üèÄ –õ—é–±–æ–≤—å –∫ –±–∞—Å–∫–µ—Ç–±–æ–ª—É",
            "üí™ –§–∏–∑–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞",
            "üéØ –¶–µ–ª–∏ –∏ –∞–º–±–∏—Ü–∏–∏"
        ]
        
        motivation_poll = await bot.send_poll(
            chat_id=chat_id,
            question=motivation_question,
            options=motivation_options,
            allows_multiple_answers=False,
            is_anonymous=False,
            explanation="–ü–æ–º–æ–≥–∏—Ç–µ –ø–æ–Ω—è—Ç—å, —á—Ç–æ –¥–≤–∏–∂–µ—Ç –∫–æ–º–∞–Ω–¥–æ–π! üí™"
        )
        
        print("‚úÖ –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –æ–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"   –í–æ–ø—Ä–æ—Å: {motivation_poll.poll.question}")
        print(f"   –í–∞—Ä–∏–∞–Ω—Ç—ã: {motivation_poll.poll.options}")
        
        print("\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û ===")
        print("üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram —á–∞—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_sunday_poll_creation())
