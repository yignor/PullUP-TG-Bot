#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –æ–ø—Ä–æ—Å–æ–≤ –ø–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è–º
"""

import asyncio
import datetime
import os
from dotenv import load_dotenv
from training_polls import should_create_weekly_poll, should_collect_attendance, get_target_training_day

def load_env_variables():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞"""
    try:
        load_dotenv()
        print("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —á–µ—Ä–µ–∑ python-dotenv")
    except ImportError:
        try:
            with open('.env', 'r') as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#') and '=' in line:
                        key, value = line.split('=', 1)
                        os.environ[key] = value
            print("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ .env —Ñ–∞–π–ª–∞")
        except FileNotFoundError:
            print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    
    bot_token = os.getenv('BOT_TOKEN')
    chat_id = os.getenv('CHAT_ID')
    
    if not bot_token or not chat_id:
        print("‚ùå BOT_TOKEN –∏–ª–∏ CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return False
    
    print(f"‚úÖ BOT_TOKEN: {bot_token[:10]}...")
    print(f"‚úÖ CHAT_ID: {chat_id}")
    return True

async def test_sunday_polls():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ–ø—Ä–æ—Å–æ–≤ –ø–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è–º"""
    print("\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ü–†–û–°–û–í –ü–û –í–û–°–ö–†–ï–°–ï–ù–¨–Ø–ú ===\n")
    
    if not load_env_variables():
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    now = datetime.datetime.now()
    print(f"1. –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {now.strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"   –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {now.strftime('%A')} ({now.weekday()})")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å –Ω–∞ –Ω–µ–¥–µ–ª—é
    should_create = await should_create_weekly_poll()
    print(f"\n2. –ù—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å –Ω–∞ –Ω–µ–¥–µ–ª—é: {'‚úÖ –î–∞' if should_create else '‚ùå –ù–µ—Ç'}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
    should_collect = await should_collect_attendance()
    print(f"3. –ù—É–∂–Ω–æ –ª–∏ —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏: {'‚úÖ –î–∞' if should_collect else '‚ùå –ù–µ—Ç'}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
    target_day = get_target_training_day()
    print(f"4. –¶–µ–ª–µ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {target_day if target_day else '–ù–µ—Ç'}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
    print(f"\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤:")
    import os
    
    poll_files = [
        'training_polls.py',
        'enhanced_training_polls.py',
        'poll_results_handler.py'
    ]
    
    for poll_file in poll_files:
        if os.path.exists(poll_file):
            print(f"   ‚úÖ {poll_file} - —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            print(f"   ‚ùå {poll_file} - –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ (–µ—Å–ª–∏ –≤—Ä–µ–º—è –ø–æ–¥—Ö–æ–¥—è—â–µ–µ)
    if should_create:
        print(f"\n6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é...")
        try:
            from training_polls import training_manager
            poll = await training_manager.create_weekly_training_poll()
            if poll:
                print("‚úÖ –û–ø—Ä–æ—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
                print(f"   –í–æ–ø—Ä–æ—Å: {poll.poll.question}")
                print(f"   –í–∞—Ä–∏–∞–Ω—Ç—ã: {poll.poll.options}")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    print(f"\n7. –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–æ–≤:")
    print(f"   üìÖ –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 9:00 - –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é")
    print(f"   üìÖ –°—Ä–µ–¥–∞ 9:00 - –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞ –í—Ç–æ—Ä–Ω–∏–∫")
    print(f"   üìÖ –°—É–±–±–æ—Ç–∞ 9:00 - –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ü—è—Ç–Ω–∏—Ü—É")
    print(f"   üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ 9:00 - –ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    print(f"\n8. –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –≤ –æ–ø—Ä–æ—Å–µ:")
    options = [
        "üèÄ –í—Ç–æ—Ä–Ω–∏–∫ 19:00",
        "üèÄ –ü—è—Ç–Ω–∏—Ü–∞ 20:30", 
        "üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä",
        "‚ùå –ù–µ—Ç"
    ]
    for i, option in enumerate(options, 1):
        print(f"   {i}. {option}")
    
    print("\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û ===")

if __name__ == "__main__":
    asyncio.run(test_sunday_polls())
