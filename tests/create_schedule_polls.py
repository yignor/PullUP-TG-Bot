#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –∏–≥—Ä PullUP
"""

import asyncio
import os
import re
import sys
from bs4 import BeautifulSoup
import aiohttp
from dotenv import load_dotenv
from datetime import datetime
from telegram import Bot

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append('..')

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

LETOBASKET_URL = "http://letobasket.ru/"

async def get_fresh_page_content():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤–µ–∂–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        'Cache-Control': 'no-cache',
        'Pragma': 'no-cache'
    }
    
    async with aiohttp.ClientSession() as session:
        async with session.get(LETOBASKET_URL, headers=headers) as response:
            return await response.text()

def parse_schedule(html_content):
    """–ü–∞—Ä—Å–∏—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä"""
    soup = BeautifulSoup(html_content, 'html.parser')
    schedule_text = soup.get_text()
    
    # –ò—â–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
    schedule_pattern = r'\d{2}\.\d{2}\.\d{4}\s+\d{2}\.\d{2}\s*\([^)]+\)\s*-\s*[^-]+[^-]*-\s*[^-]+'
    schedule_matches = re.findall(schedule_pattern, schedule_text)
    
    pullup_games = []
    
    for match in schedule_matches:
        print(f"DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å—å: {match.strip()}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∑–∞–ø–∏—Å—å PullUP
        pullup_patterns = [
            r'pull\s*up',
            r'PullUP',
            r'Pull\s*Up'
        ]
        
        is_pullup_game = any(re.search(pattern, match, re.IGNORECASE) for pattern in pullup_patterns)
        print(f"DEBUG: is_pullup_game = {is_pullup_game}")
        
        if is_pullup_game:
            print(f"   DEBUG: –ù–∞–π–¥–µ–Ω–∞ –∏–≥—Ä–∞ PullUP!")
            
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            date_time_match = re.search(r'(\d{2}\.\d{2}\.\d{4})\s+(\d{2}\.\d{2})', match)
            if date_time_match:
                date_str = date_time_match.group(1)
                time_str = date_time_match.group(2)
                print(f"   DEBUG: –î–∞—Ç–∞: {date_str}, –í—Ä–µ–º—è: {time_str}")
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏
                try:
                    date_obj = datetime.strptime(date_str, '%d.%m.%Y')
                    weekday_names = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
                    weekday = weekday_names[date_obj.weekday()]
                    print(f"   DEBUG: –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {weekday}")
                except:
                    weekday = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            else:
                print(f"   DEBUG: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è")
                date_str = None
                time_str = None
                weekday = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            # –ü–∞—Ä—Å–∏–º –∞–¥—Ä–µ—Å –∑–∞–ª–∞
            venue_match = re.search(r'\(([^)]+)\)', match)
            venue = venue_match.group(1) if venue_match else "–ù–µ —É–∫–∞–∑–∞–Ω"
            print(f"   DEBUG: –ê–¥—Ä–µ—Å –∑–∞–ª–∞: {venue}")
            
            # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—ã - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
            # –ò—â–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ö–æ–º–∞–Ω–¥–∞1 - –ö–æ–º–∞–Ω–¥–∞2"
            teams_match = re.search(r'-\s*([^-]+?)\s*-\s*([^-]+?)(?:\s|$)', match)
            if not teams_match:
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –¥–µ—Ñ–∏—Å–∞–º–∏
                teams_match = re.search(r'-\s*([^-]+?)\s*([^-]+?)(?:\s|$)', match)
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–º–∞–Ω–¥—ã, –ø–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥
            if not teams_match:
                # –ò—â–µ–º "Pull Up" –≤ —Ç–µ–∫—Å—Ç–µ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
                pullup_match = re.search(r'Pull\s*Up', match, re.IGNORECASE)
                if pullup_match:
                    # –ò—â–µ–º –∫–æ–º–∞–Ω–¥—É –ø–µ—Ä–µ–¥ Pull Up
                    before_pullup = match[:pullup_match.start()].strip()
                    opponent_match = re.search(r'-\s*([^-]+?)(?:\s*-\s*Pull\s*Up)', match, re.IGNORECASE)
                    if opponent_match:
                        team1 = opponent_match.group(1).strip()
                        team2 = "Pull Up"
                        teams_match = type('MockMatch', (), {'group': lambda self, i: [team1, team2][i-1]})()
            
            print(f"   DEBUG: teams_match = {teams_match}")
            
            if teams_match:
                team1 = teams_match.group(1).strip()
                team2 = teams_match.group(2).strip()
                print(f"   DEBUG: team1 = '{team1}', team2 = '{team2}'")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ PullUP
                pullup_team = None
                opponent_team = None
                
                if any(re.search(pattern, team1, re.IGNORECASE) for pattern in pullup_patterns):
                    pullup_team = team1
                    opponent_team = team2
                elif any(re.search(pattern, team2, re.IGNORECASE) for pattern in pullup_patterns):
                    pullup_team = team2
                    opponent_team = team1
                
                if pullup_team and opponent_team:
                    print(f"   DEBUG: PullUP –∫–æ–º–∞–Ω–¥–∞: '{pullup_team}'")
                    print(f"   DEBUG: –°–æ–ø–µ—Ä–Ω–∏–∫: '{opponent_team}'")
                    
                    pullup_games.append({
                        'date': date_str if date_time_match else None,
                        'time': time_str if date_time_match else None,
                        'weekday': weekday,
                        'venue': venue,
                        'pullup_team': pullup_team,
                        'opponent_team': opponent_team,
                        'full_text': match.strip()
                    })
    
    return pullup_games

def create_poll_title(game):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã
    if "Pull Up-–§–∞—Ä–º" in game['pullup_team']:
        team_type = "—Ä–∞–∑–≤–∏—Ç–∏–µ"
    else:
        team_type = "–ø–µ—Ä–≤—ã–π —Å–æ—Å—Ç–∞–≤"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
    title = f"–õ–µ—Ç–Ω—è—è –ª–∏–≥–∞, {team_type}, {game['opponent_team']}: {game['weekday']} ({game['date'][:8]}) {game['time']}, {game['venue']}"
    
    return title

async def create_schedule_polls():
    """–°–æ–∑–¥–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
    print("üèÄ –°–û–ó–î–ê–ù–ò–ï –ì–û–õ–û–°–û–í–ê–ù–ò–ô –ü–û –†–ê–°–ü–ò–°–ê–ù–ò–Æ")
    print("=" * 60)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        bot_token = os.getenv('BOT_TOKEN')
        chat_id = os.getenv('CHAT_ID')
        topic_id = "1282"  # –¢–æ–ø–∏–∫ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π
        
        if not bot_token:
            print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return
        
        if not chat_id:
            print("‚ùå CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return
        
        print(f"‚úÖ BOT_TOKEN: {'*' * 10}{bot_token[-4:]}")
        print(f"‚úÖ CHAT_ID: {chat_id}")
        print(f"‚úÖ TOPIC_ID: {topic_id}")
        print()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        print("üì° –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å —Å–∞–π—Ç–∞...")
        html_content = await get_fresh_page_content()
        
        # –ü–∞—Ä—Å–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        pullup_games = parse_schedule(html_content)
        
        print(f"üìÖ –ù–∞–π–¥–µ–Ω–æ –∏–≥—Ä PullUP –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏: {len(pullup_games)}")
        
        if not pullup_games:
            print("‚ùå –ò–≥—Ä—ã PullUP –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
        bot = Bot(token=bot_token)
        
        # –°–æ–∑–¥–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã
        for i, game in enumerate(pullup_games, 1):
            print(f"\nüèÄ –ò–≥—Ä–∞ {i}: {game['pullup_team']} vs {game['opponent_team']}")
            print(f"   –î–∞—Ç–∞: {game['date']} ({game['weekday']})")
            print(f"   –í—Ä–µ–º—è: {game['time']}")
            print(f"   –ó–∞–ª: {game['venue']}")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
            poll_title = create_poll_title(game)
            print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: {poll_title}")
            
            # –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
            poll_options = [
                "‚úÖ –ì–æ—Ç–æ–≤",
                "‚ùå –ù–µ—Ç", 
                "üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä"
            ]
            
            try:
                # –°–æ–∑–¥–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
                poll = await bot.send_poll(
                    chat_id=chat_id,
                    question=poll_title,
                    options=poll_options,
                    allows_multiple_answers=False,  # –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä
                    is_anonymous=False,  # –û—Ç–∫—Ä—ã—Ç–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
                    message_thread_id=int(topic_id)
                )
                
                print(f"   ‚úÖ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ! ID: {poll.message_id}")
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: {e}")
        
        print(f"\nüéØ –°–û–ó–î–ê–ù–û –ì–û–õ–û–°–û–í–ê–ù–ò–ô: {len(pullup_games)}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(create_schedule_polls())
