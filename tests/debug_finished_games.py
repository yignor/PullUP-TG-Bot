#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∏–≥—Ä PullUP
"""

import asyncio
import os
import re
from datetime import datetime
from bs4 import BeautifulSoup
import aiohttp
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

LETOBASKET_URL = "http://letobasket.ru/"

async def get_fresh_page_content():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤–µ–∂–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        'Cache-Control': 'no-cache',
        'Pragma': 'no-cache'
    }
    
    async with aiohttp.ClientSession() as session:
        async with session.get(LETOBASKET_URL, headers=headers) as response:
            return await response.text()

def extract_current_date(page_text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    date_pattern = r'(\d{2}\.\d{2}\.\d{4})'
    date_match = re.search(date_pattern, page_text)
    return date_match.group(1) if date_match else None

def debug_finished_games(html_content, current_date):
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∏–≥—Ä"""
    print(f"üîç –û–¢–õ–ê–î–ö–ê –ó–ê–í–ï–†–®–ï–ù–ù–´–• –ò–ì–† –ù–ê {current_date}")
    print("=" * 60)
    
    soup = BeautifulSoup(html_content, 'html.parser')
    
    # –ò—â–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å –∏–≥—Ä–∞–º–∏
    game_rows = soup.find_all('tr')
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ —Å –∏–≥—Ä–∞–º–∏: {len(game_rows)}")
    
    # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å PullUP
    pullup_patterns = [
        r'pull\s*up',
        r'PullUP',
        r'Pull\s*Up'
    ]
    
    pullup_games = []
    
    for i, row in enumerate(game_rows):
        row_text = row.get_text()
        row_text_lower = row_text.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ PullUP
        is_pullup_game = any(re.search(pattern, row_text, re.IGNORECASE) for pattern in pullup_patterns)
        
        # –ò—â–µ–º —Å—á–µ—Ç –≤ —Å—Ç—Ä–æ–∫–µ
        score_match = re.search(r'(\d+)\s*:\s*(\d+)', row_text)
        
        if is_pullup_game:
            print(f"\nüèÄ –ù–ê–ô–î–ï–ù–ê –ò–ì–†–ê PULLUP (—Å—Ç—Ä–æ–∫–∞ {i+1}):")
            print(f"   –¢–µ–∫—Å—Ç: {row_text.strip()}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
            js_period = row.get('js-period')
            js_timer = row.get('js-timer')
            
            print(f"   js-period: {js_period}")
            print(f"   js-timer: {js_timer}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            is_finished = False
            if js_period == '4' and js_timer == '0:00':
                is_finished = True
                print("   ‚úÖ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (js-period=4, js-timer=0:00)")
            elif js_period == '4' and (js_timer == '0:00' or js_timer == '00:00'):
                is_finished = True
                print("   ‚úÖ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (js-period=4, js-timer=00:00)")
            elif '4—á' in row_text or '4 —á' in row_text:
                is_finished = True
                print("   ‚úÖ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–Ω–∞–π–¥–µ–Ω–æ '4—á' –≤ —Ç–µ–∫—Å—Ç–µ)")
            elif score_match:
                is_finished = True
                print("   ‚úÖ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–µ—Å—Ç—å –ø–æ–ª–Ω—ã–π —Å—á–µ—Ç)")
            else:
                print("   ‚ùå –ò–≥—Ä–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
            # –ò—â–µ–º —Å—á–µ—Ç
            score_match = re.search(r'(\d+)\s*:\s*(\d+)', row_text)
            if score_match:
                score1, score2 = score_match.groups()
                print(f"   üìä –°—á–µ—Ç: {score1} : {score2}")
            else:
                print("   üìä –°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            pullup_games.append({
                'row_index': i,
                'text': row_text.strip(),
                'js_period': js_period,
                'js_timer': js_timer,
                'is_finished': is_finished,
                'score': score_match.groups() if score_match else None
            })
    
    print(f"\nüìà –ò–¢–û–ì–û –ù–ê–ô–î–ï–ù–û –ò–ì–† PULLUP: {len(pullup_games)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞
    print(f"\nüîç –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ô –ü–û–ò–°–ö –ü–û –†–ï–ì–£–õ–Ø–†–ù–´–ú –í–´–†–ê–ñ–ï–ù–ò–Ø–ú:")
    
    # –ò—â–µ–º –≤—Å–µ –∏–≥—Ä—ã –Ω–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    all_games_pattern = rf'{current_date}\s+\d{{2}}\.\d{{2}}[^-]*-\s*[^-]+[^-]*-\s*[^-]+'
    all_games = re.findall(all_games_pattern, html_content)
    
    print(f"   –ù–∞–π–¥–µ–Ω–æ –∏–≥—Ä –Ω–∞ {current_date}: {len(all_games)}")
    
    pullup_games_regex = []
    for i, game_text in enumerate(all_games):
        if any(re.search(pattern, game_text, re.IGNORECASE) for pattern in pullup_patterns):
            print(f"   üèÄ –ò–≥—Ä–∞ {i+1}: {game_text.strip()}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—á–µ—Ç
            score_match = re.search(r'(\d+)\s*:\s*(\d+)', game_text)
            if score_match:
                score1, score2 = score_match.groups()
                print(f"      üìä –°—á–µ—Ç: {score1} : {score2}")
                pullup_games_regex.append({
                    'index': i,
                    'text': game_text.strip(),
                    'score': (score1, score2)
                })
            else:
                print(f"      üìä –°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    print(f"\nüìà –ò–¢–û–ì–û –ù–ê–ô–î–ï–ù–û –ò–ì–† PULLUP (regex): {len(pullup_games_regex)}")
    
    return pullup_games, pullup_games_regex

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –û–¢–õ–ê–î–ö–ê –ó–ê–í–ï–†–®–ï–ù–ù–´–• –ò–ì–† PULLUP")
    print("=" * 60)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
        print("üì° –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞...")
        html_content = await get_fresh_page_content()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        current_date = extract_current_date(html_content)
        if not current_date:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É")
            return
        
        print(f"üìÖ –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {current_date}")
        
        # –û—Ç–ª–∞–∂–∏–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã
        pullup_games, pullup_games_regex = debug_finished_games(html_content, current_date)
        
        print(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –û–¢–õ–ê–î–ö–ò:")
        print(f"   –ò–≥—Ä –Ω–∞–π–¥–µ–Ω–æ —á–µ—Ä–µ–∑ DOM: {len(pullup_games)}")
        print(f"   –ò–≥—Ä –Ω–∞–π–¥–µ–Ω–æ —á–µ—Ä–µ–∑ regex: {len(pullup_games_regex)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –∏–≥—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã
        finished_games = [game for game in pullup_games if game['is_finished']]
        print(f"   –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∏–≥—Ä: {len(finished_games)}")
        
        if finished_games:
            print("\nüèÅ –ó–ê–í–ï–†–®–ï–ù–ù–´–ï –ò–ì–†–´:")
            for game in finished_games:
                print(f"   - {game['text']}")
                if game['score']:
                    print(f"     –°—á–µ—Ç: {game['score'][0]} : {game['score'][1]}")
        
        if pullup_games_regex:
            print("\nüìä –ò–ì–†–´ –° –°–ß–ï–¢–û–ú (regex):")
            for game in pullup_games_regex:
                print(f"   - {game['text']}")
                print(f"     –°—á–µ—Ç: {game['score'][0]} : {game['score'][1]}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())
