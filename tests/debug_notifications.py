#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
–ü–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω—è—Ç—å, –∫–∞–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è
"""
import sys
import os
sys.path.append('..')

import asyncio
import logging
from pullup_notifications import PullUPNotificationManager
from notification_manager import notification_manager

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def debug_notifications():
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        logger.info("üîç –û–¢–õ–ê–î–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô")
        logger.info("=" * 50)
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
        manager = PullUPNotificationManager()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è
        from pullup_notifications import should_send_morning_notification
        should_send = should_send_morning_notification()
        logger.info(f"–î–æ–ª–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —É—Ç—Ä–µ–Ω–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {'‚úÖ –î–ê' if should_send else '‚ùå –ù–ï–¢'}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
        logger.info("üì° –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
        html_content = await manager.get_fresh_page_content()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        current_date = manager.extract_current_date(html_content)
        logger.info(f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {current_date}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã
        logger.info("üèÄ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∏–≥—Ä...")
        finished_games = manager.check_finished_games(html_content, current_date)
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∏–≥—Ä: {len(finished_games)}")
        
        for i, game in enumerate(finished_games, 1):
            logger.info(f"–ò–≥—Ä–∞ {i}: {game.get('pullup_team', 'N/A')} vs {game.get('opponent_team', 'N/A')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∏–≥—Ä—ã
        logger.info("üìÖ –ü–æ–∏—Å–∫ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∏–≥—Ä...")
        from bs4 import BeautifulSoup
        soup = BeautifulSoup(html_content, 'html.parser')
        page_text = soup.get_text()
        pullup_games = manager.find_pullup_games(page_text, current_date)
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∏–≥—Ä: {len(pullup_games)}")
        
        for i, game in enumerate(pullup_games, 1):
            logger.info(f"–ü—Ä–µ–¥—Å—Ç–æ—è—â–∞—è –∏–≥—Ä–∞ {i}: {game.get('team', 'N/A')} vs {game.get('opponent', 'N/A')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        logger.info("üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:")
        logger.info(f"  –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {len(notification_manager.sent_game_end_notifications)}")
        logger.info(f"  –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö: {len(notification_manager.sent_game_result_notifications)}")
        logger.info(f"  –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Ç—Ä–µ–Ω–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {len(notification_manager.sent_morning_notifications)}")
        
        logger.info("\n" + "=" * 50)
        logger.info("‚úÖ –û–¢–õ–ê–î–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–ª–∞–¥–∫–µ: {e}")
        import traceback
        logger.error(traceback.format_exc())

if __name__ == "__main__":
    asyncio.run(debug_notifications())
