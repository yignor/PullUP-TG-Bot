#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–ª–æ–∫–∞ "–†–ê–°–ü–ò–°–ê–ù–ò–ï –ò–ì–†"
"""

import asyncio
import os
import re
from bs4 import BeautifulSoup
import aiohttp
from dotenv import load_dotenv
from datetime import datetime

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

LETOBASKET_URL = "http://letobasket.ru/"

async def get_fresh_page_content():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤–µ–∂–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        'Cache-Control': 'no-cache',
        'Pragma': 'no-cache'
    }
    
    async with aiohttp.ClientSession() as session:
        async with session.get(LETOBASKET_URL, headers=headers) as response:
            return await response.text()

def debug_schedule(html_content):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–ª–æ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–≥—Ä"""
    print("üîç –ê–ù–ê–õ–ò–ó –ë–õ–û–ö–ê '–†–ê–°–ü–ò–°–ê–ù–ò–ï –ò–ì–†'")
    print("=" * 60)
    
    soup = BeautifulSoup(html_content, 'html.parser')
    
    # –ò—â–µ–º –±–ª–æ–∫ "–†–ê–°–ü–ò–°–ê–ù–ò–ï –ò–ì–†"
    schedule_text = soup.get_text()
    
    # –ò—â–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
    schedule_pattern = r'\d{2}\.\d{2}\.\d{4}\s+\d{2}\.\d{2}\s*\([^)]+\)\s*-\s*[^-]+[^-]*-\s*[^-]+'
    schedule_matches = re.findall(schedule_pattern, schedule_text)
    
    print(f"üìÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏: {len(schedule_matches)}")
    
    pullup_games = []
    
    for i, match in enumerate(schedule_matches):
        print(f"\nüèÄ –ó–∞–ø–∏—Å—å {i+1}: {match.strip()}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∑–∞–ø–∏—Å—å PullUP
        pullup_patterns = [
            r'pull\s*up',
            r'PullUP',
            r'Pull\s*Up'
        ]
        
        is_pullup_game = any(re.search(pattern, match, re.IGNORECASE) for pattern in pullup_patterns)
        
        if is_pullup_game:
            print(f"   ‚úÖ –≠–¢–û –ò–ì–†–ê PULLUP!")
            
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            date_time_match = re.search(r'(\d{2}\.\d{2}\.\d{4})\s+(\d{2}\.\d{2})', match)
            if date_time_match:
                date_str = date_time_match.group(1)
                time_str = date_time_match.group(2)
                print(f"   –î–∞—Ç–∞: {date_str}")
                print(f"   –í—Ä–µ–º—è: {time_str}")
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏
                try:
                    date_obj = datetime.strptime(date_str, '%d.%m.%Y')
                    weekday_names = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
                    weekday = weekday_names[date_obj.weekday()]
                    print(f"   –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {weekday}")
                except:
                    weekday = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            # –ü–∞—Ä—Å–∏–º –∞–¥—Ä–µ—Å –∑–∞–ª–∞
            venue_match = re.search(r'\(([^)]+)\)', match)
            if venue_match:
                venue = venue_match.group(1)
                print(f"   –ê–¥—Ä–µ—Å –∑–∞–ª–∞: {venue}")
            
            # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—ã
            teams_match = re.search(r'-\s*([^-]+?)\s*-\s*([^-]+?)(?:\s|$)', match)
            if teams_match:
                team1 = teams_match.group(1).strip()
                team2 = teams_match.group(2).strip()
                print(f"   –ö–æ–º–∞–Ω–¥–∞ 1: {team1}")
                print(f"   –ö–æ–º–∞–Ω–¥–∞ 2: {team2}")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ PullUP
                pullup_team = None
                opponent_team = None
                
                if any(re.search(pattern, team1, re.IGNORECASE) for pattern in pullup_patterns):
                    pullup_team = team1
                    opponent_team = team2
                elif any(re.search(pattern, team2, re.IGNORECASE) for pattern in pullup_patterns):
                    pullup_team = team2
                    opponent_team = team1
                
                if pullup_team and opponent_team:
                    print(f"   PullUP –∫–æ–º–∞–Ω–¥–∞: {pullup_team}")
                    print(f"   –°–æ–ø–µ—Ä–Ω–∏–∫: {opponent_team}")
                    
                    pullup_games.append({
                        'date': date_str if date_time_match else None,
                        'time': time_str if date_time_match else None,
                        'weekday': weekday,
                        'venue': venue if venue_match else None,
                        'pullup_team': pullup_team,
                        'opponent_team': opponent_team,
                        'full_text': match.strip()
                    })
        else:
            print(f"   ‚ùå –ù–µ –∏–≥—Ä–∞ PullUP")
    
    print(f"\nüìà –ò–¢–û–ì–û –ò–ì–† PULLUP –í –†–ê–°–ü–ò–°–ê–ù–ò–ò: {len(pullup_games)}")
    
    if pullup_games:
        print("\nüèÅ –ò–ì–†–´ PULLUP –í –†–ê–°–ü–ò–°–ê–ù–ò–ò:")
        for i, game in enumerate(pullup_games, 1):
            print(f"   {i}. {game['pullup_team']} vs {game['opponent_team']}")
            print(f"      –î–∞—Ç–∞: {game['date']} ({game['weekday']})")
            print(f"      –í—Ä–µ–º—è: {game['time']}")
            print(f"      –ó–∞–ª: {game['venue']}")
            print()
    
    return pullup_games

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ê–ù–ê–õ–ò–ó –†–ê–°–ü–ò–°–ê–ù–ò–Ø –ò–ì–†")
    print("=" * 60)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
        print("üì° –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞...")
        html_content = await get_fresh_page_content()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        pullup_games = debug_schedule(html_content)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())
