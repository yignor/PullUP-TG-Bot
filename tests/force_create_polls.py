#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
"""

import asyncio
import os
import sys
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append('..')

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

async def force_create_polls():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üèÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –°–û–ó–î–ê–ù–ò–ï –ì–û–õ–û–°–û–í–ê–ù–ò–ô (–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø)")
    print("=" * 60)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
        from schedule_polls import SchedulePollsManager
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        manager = SchedulePollsManager()
        
        print(f"‚úÖ –ë–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {manager.bot is not None}")
        print(f"‚úÖ CHAT_ID: {manager.chat_id}")
        print(f"‚úÖ TOPIC_ID: {manager.topic_id}")
        print()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        print("üì° –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å —Å–∞–π—Ç–∞...")
        html_content = await manager.get_fresh_page_content()
        
        # –ü–∞—Ä—Å–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        pullup_games = manager.parse_schedule(html_content)
        
        print(f"üìÖ –ù–∞–π–¥–µ–Ω–æ –∏–≥—Ä PullUP –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏: {len(pullup_games)}")
        
        if not pullup_games:
            print("‚ùå –ò–≥—Ä—ã PullUP –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –°–æ–∑–¥–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã
        created_count = 0
        for i, game in enumerate(pullup_games, 1):
            print(f"\nüèÄ –ò–≥—Ä–∞ {i}: {game['pullup_team']} vs {game['opponent_team']}")
            print(f"   –î–∞—Ç–∞: {game['date']} ({game['weekday']})")
            print(f"   –í—Ä–µ–º—è: {game['time']}")
            print(f"   –ó–∞–ª: {game['venue']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞–Ω–æ –ª–∏ —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
            if manager.is_poll_created(game):
                print(f"   ‚úÖ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —É–∂–µ —Å–æ–∑–¥–∞–Ω–æ —Ä–∞–Ω–µ–µ")
                continue
            
            # –°–æ–∑–¥–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
            poll_title = manager.create_poll_title(game)
            print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: {poll_title}")
            
            # –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
            poll_options = [
                "‚úÖ –ì–æ—Ç–æ–≤",
                "‚ùå –ù–µ—Ç", 
                "üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä"
            ]
            
            try:
                # –°–æ–∑–¥–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
                poll = await manager.bot.send_poll(
                    chat_id=manager.chat_id,
                    question=poll_title,
                    options=poll_options,
                    allows_multiple_answers=False,  # –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä
                    is_anonymous=False,  # –û—Ç–∫—Ä—ã—Ç–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
                    message_thread_id=int(manager.topic_id)
                )
                
                # –û—Ç–º–µ—á–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∫–∞–∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–µ
                manager.mark_poll_created(game, poll.message_id)
                
                print(f"   ‚úÖ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ! ID: {poll.message_id}")
                created_count += 1
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: {e}")
        
        print(f"\nüéØ –°–û–ó–î–ê–ù–û –ù–û–í–´–• –ì–û–õ–û–°–û–í–ê–ù–ò–ô: {created_count}")
        print(f"üìä –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π: {len(manager.created_polls)}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(force_create_polls())
