#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
"""

import datetime
from training_polls import get_target_training_day, should_collect_attendance

def test_attendance_logic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–Ω—è –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
    print("üèÄ –¢–ï–°–¢ –õ–û–ì–ò–ö–ò –°–ë–û–†–ê –î–ê–ù–ù–´–• –û –ü–û–°–ï–©–ê–ï–ú–û–°–¢–ò")
    print("=" * 55)
    print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
    test_days = [
        (0, "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"),
        (1, "–í—Ç–æ—Ä–Ω–∏–∫"), 
        (2, "–°—Ä–µ–¥–∞"),
        (3, "–ß–µ—Ç–≤–µ—Ä–≥"),
        (4, "–ü—è—Ç–Ω–∏—Ü–∞"),
        (5, "–°—É–±–±–æ—Ç–∞"),
        (6, "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ")
    ]
    
    print("üìÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ get_target_training_day():")
    print("-" * 45)
    
    for weekday, day_name in test_days:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –¥–∞—Ç—É
        test_date = datetime.datetime.now().replace(weekday=weekday)
        target_day = get_target_training_day()
        
        if weekday == 2:  # –°—Ä–µ–¥–∞
            expected = "–í—Ç–æ—Ä–Ω–∏–∫"
            status = "‚úÖ" if target_day == expected else "‚ùå"
            print(f"{status} {day_name} -> –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ {target_day} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected})")
        elif weekday == 5:  # –°—É–±–±–æ—Ç–∞
            expected = "–ü—è—Ç–Ω–∏—Ü–∞"
            status = "‚úÖ" if target_day == expected else "‚ùå"
            print(f"{status} {day_name} -> –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ {target_day} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected})")
        else:
            status = "‚úÖ" if target_day is None else "‚ùå"
            print(f"{status} {day_name} -> –ù–µ –¥–µ–Ω—å —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö ({target_day})")
    
    print()
    print("üïê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:")
    print("-" * 35)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —á–∞—Å—ã
    test_hours = [8, 9, 10, 11]
    test_weekdays = [2, 5]  # –°—Ä–µ–¥–∞ –∏ —Å—É–±–±–æ—Ç–∞
    
    for weekday in test_weekdays:
        day_name = "–°—Ä–µ–¥–∞" if weekday == 2 else "–°—É–±–±–æ—Ç–∞"
        print(f"\nüìÖ {day_name}:")
        
        for hour in test_hours:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –¥–∞—Ç—É
            test_date = datetime.datetime.now().replace(weekday=weekday, hour=hour, minute=15)
            should_collect = should_collect_attendance()
            
            if hour == 9:
                status = "‚úÖ" if should_collect else "‚ùå"
                print(f"   {status} {hour:02d}:15 -> –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö: {should_collect} (–æ–∂–∏–¥–∞–ª–æ—Å—å: True)")
            else:
                status = "‚úÖ" if not should_collect else "‚ùå"
                print(f"   {status} {hour:02d}:15 -> –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö: {should_collect} (–æ–∂–∏–¥–∞–ª–æ—Å—å: False)")

def show_workflow():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å"""
    print("\nüîÑ –†–ê–ë–û–ß–ò–ô –ü–†–û–¶–ï–°–° –°–ë–û–†–ê –î–ê–ù–ù–´–•")
    print("=" * 40)
    print()
    
    workflow = [
        {
            "day": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 9:00",
            "action": "–°–æ–∑–¥–∞–µ—Ç—Å—è –æ–ø—Ä–æ—Å –Ω–∞ –Ω–µ–¥–µ–ª—é",
            "description": "Bot —Å–æ–∑–¥–∞–µ—Ç –æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏: –í—Ç–æ—Ä–Ω–∏–∫ 19:00, –ü—è—Ç–Ω–∏—Ü–∞ 20:30, –¢—Ä–µ–Ω–µ—Ä, –ù–µ—Ç"
        },
        {
            "day": "–í—Ç–æ—Ä–Ω–∏–∫ 19:00",
            "action": "–ü—Ä–æ–≤–æ–¥–∏—Ç—Å—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞",
            "description": "–£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"
        },
        {
            "day": "–°—Ä–µ–¥–∞ 9:00",
            "action": "–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞ –í—Ç–æ—Ä–Ω–∏–∫",
            "description": "–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞ –∑–∞ –í—Ç–æ—Ä–Ω–∏–∫ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ Google Sheets"
        },
        {
            "day": "–ü—è—Ç–Ω–∏—Ü–∞ 20:30",
            "action": "–ü—Ä–æ–≤–æ–¥–∏—Ç—Å—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞",
            "description": "–£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"
        },
        {
            "day": "–°—É–±–±–æ—Ç–∞ 9:00",
            "action": "–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ü—è—Ç–Ω–∏—Ü—É",
            "description": "–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞ –∑–∞ –ü—è—Ç–Ω–∏—Ü—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ Google Sheets"
        }
    ]
    
    for i, step in enumerate(workflow, 1):
        print(f"{i}. {step['day']}")
        print(f"   üéØ {step['action']}")
        print(f"   üìù {step['description']}")
        print()

def show_data_structure():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö"""
    print("üìä –°–¢–†–£–ö–¢–£–†–ê –°–û–•–†–ê–ù–Ø–ï–ú–´–• –î–ê–ù–ù–´–•")
    print("=" * 35)
    print()
    
    print("üîë –ö–ª—é—á –≤ Google Sheets:")
    print("   –§–æ—Ä–º–∞—Ç: YYYY-MM-DD_–î–µ–Ω—å–ù–µ–¥–µ–ª–∏")
    print("   –ü—Ä–∏–º–µ—Ä—ã:")
    print("   ‚Ä¢ 2024-01-15_–í—Ç–æ—Ä–Ω–∏–∫")
    print("   ‚Ä¢ 2024-01-19_–ü—è—Ç–Ω–∏—Ü–∞")
    print()
    
    print("üìã –î–∞–Ω–Ω—ã–µ:")
    print("   {")
    print('     "–í—Ç–æ—Ä–Ω–∏–∫": ["–ò–≤–∞–Ω", "–ü–µ—Ç—Ä", "–ê–Ω–Ω–∞"]')
    print('     "–ü—è—Ç–Ω–∏—Ü–∞": ["–ú–∞—Ä–∏—è", "–°–µ—Ä–≥–µ–π"]')
    print('     "–¢—Ä–µ–Ω–µ—Ä": ["–ê–ª–µ–∫—Å–µ–π"]')
    print('     "–ù–µ—Ç": ["–î–º–∏—Ç—Ä–∏–π"]')
    print("   }")
    print()
    
    print("üí° –õ–æ–≥–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:")
    print("   ‚Ä¢ –°—Ä–µ–¥–∞ 9:00 -> –°–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –∑–∞ –í—Ç–æ—Ä–Ω–∏–∫")
    print("   ‚Ä¢ –°—É–±–±–æ—Ç–∞ 9:00 -> –°–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –∑–∞ –ü—è—Ç–Ω–∏—Ü—É")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    test_attendance_logic()
    show_workflow()
    show_data_structure()
    
    print("üéØ –í–´–í–û–î:")
    print("‚Ä¢ –°—Ä–µ–¥–∞ 9:00 -> –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ –í—Ç–æ—Ä–Ω–∏–∫")
    print("‚Ä¢ –°—É–±–±–æ—Ç–∞ 9:00 -> –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ –ü—è—Ç–Ω–∏—Ü—É")
    print("‚Ä¢ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —Å –∫–ª—é—á–æ–º YYYY-MM-DD_–î–µ–Ω—å–ù–µ–¥–µ–ª–∏")
    print("‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")

if __name__ == "__main__":
    main()
