#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è pullup_notifications –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ç–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª
"""

import asyncio
import os
from dotenv import load_dotenv
from telegram import Bot

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class TestPullUPNotificationManager:
    """–¢–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
    
    def __init__(self):
        self.bot = Bot(token=os.getenv('BOT_TOKEN')) if os.getenv('BOT_TOKEN') else None
        self.test_chat_id = os.getenv('TEST_CHAT_ID')
    
    async def send_test_morning_notification(self, games, html_content):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —É—Ç—Ä–µ–Ω–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ç–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª"""
        if not games:
            print("‚ùå –ù–µ—Ç –∏–≥—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            return
        
        if not self.test_chat_id:
            print("‚ùå TEST_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return
        
        lines = []
        lines.append("üß™ –¢–ï–°–¢–û–í–û–ï –£–¢–†–ï–ù–ù–ï–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï")
        lines.append("")
        
        for game in games:
            lines.append(f"üèÄ –°–µ–≥–æ–¥–Ω—è –∏–≥—Ä–∞ –ø—Ä–æ—Ç–∏–≤ **{game['opponent']}**")
            lines.append(f"‚è∞ –í—Ä–µ–º—è –∏–≥—Ä—ã: **{game['time']}**")
            lines.append("üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–≥—Ä—É: [—Ç—É—Ç](http://letobasket.ru/)")
            lines.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –∏–≥—Ä–∞–º–∏
        
        message = "\n".join(lines)
        
        if self.bot:
            try:
                await self.bot.send_message(
                    chat_id=self.test_chat_id, 
                    text=message, 
                    parse_mode='Markdown'
                )
                print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É—Ç—Ä–µ–Ω–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        else:
            print(f"[DRY_RUN] –¢–µ—Å—Ç–æ–≤–æ–µ —É—Ç—Ä–µ–Ω–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {message}")
    
    async def send_test_finish_notification(self, finished_game):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã –≤ —Ç–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª"""
        if not self.test_chat_id:
            print("‚ùå TEST_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        if finished_game['pullup_score'] > finished_game['opponent_score']:
            result_emoji = "üèÜ"
            result_text = "–ø–æ–±–µ–¥–∏–ª–∏"
        elif finished_game['pullup_score'] < finished_game['opponent_score']:
            result_emoji = "üòî"
            result_text = "–ø—Ä–æ–∏–≥—Ä–∞–ª–∏"
        else:
            result_emoji = "ü§ù"
            result_text = "—Å—ã–≥—Ä–∞–ª–∏ –≤–Ω–∏—á—å—é"
        
        message = "üß™ –¢–ï–°–¢–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –û –ó–ê–í–ï–†–®–ï–ù–ò–ò –ò–ì–†–´\n\n"
        message += f"üèÄ –ò–≥—Ä–∞ –ø—Ä–æ—Ç–∏–≤ **{finished_game['opponent_team']}** –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å\n"
        message += f"{result_emoji} –°—á–µ—Ç: **{finished_game['pullup_team']} {finished_game['pullup_score']} : {finished_game['opponent_score']} {finished_game['opponent_team']}** ({result_text})\n"
        message += f"üìä –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª: [—Ç—É—Ç](http://letobasket.ru/)"
        
        if self.bot:
            try:
                await self.bot.send_message(
                    chat_id=self.test_chat_id,
                    text=message,
                    parse_mode='Markdown'
                )
                print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        else:
            print(f"[DRY_RUN] –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {message}")

async def test_pullup_notifications():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è PullUP –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ"""
    print("üß™ –¢–ï–°–¢ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô PULLUP –í –¢–ï–°–¢–û–í–û–ú –ö–ê–ù–ê–õ–ï")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    bot_token = os.getenv('BOT_TOKEN')
    test_chat_id = os.getenv('TEST_CHAT_ID')
    
    if not bot_token:
        print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return
    
    if not test_chat_id:
        print("‚ùå TEST_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        print("üìù –î–æ–±–∞–≤—å—Ç–µ TEST_CHAT_ID –≤ .env –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    print(f"‚úÖ BOT_TOKEN: {'*' * 10}{bot_token[-4:]}")
    print(f"‚úÖ TEST_CHAT_ID: {test_chat_id}")
    print("üß™ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –¢–ï–°–¢–û–í–´–ô –∫–∞–Ω–∞–ª")
    print()
    
    manager = TestPullUPNotificationManager()
    
    # –¢–µ—Å—Ç 1: –£—Ç—Ä–µ–Ω–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∏–≥—Ä–∞—Ö
    print("1. –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:")
    
    test_games = [
        {
            'team': 'Pull Up',
            'opponent': 'IT Basket',
            'time': '12.30',
            'order': 2
        },
        {
            'team': 'Pull Up',
            'opponent': '–ú–∞–∏–ª–µ –ö–∞—Ä–≥–æ',
            'time': '14.00',
            'order': 3
        }
    ]
    
    test_html = "<html><a href='test_link'>Test Link</a></html>"
    
    await manager.send_test_morning_notification(test_games, test_html)
    
    print()
    
    # –¢–µ—Å—Ç 2: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã
    print("2. –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã:")
    
    test_finished_game = {
        'pullup_team': 'Pull Up',
        'opponent_team': 'IT Basket',
        'pullup_score': 85,
        'opponent_score': 72,
        'date': '16.08.2025'
    }
    
    await manager.send_test_finish_notification(test_finished_game)
    
    print()
    print("üß™ –¢–ï–°–¢–û–í–´–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –û–¢–ü–†–ê–í–õ–ï–ù–´ –í –¢–ï–°–¢–û–í–´–ô –ö–ê–ù–ê–õ")

if __name__ == "__main__":
    asyncio.run(test_pullup_notifications())
