#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞–º–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Google Sheets
"""

import os
import asyncio
import datetime
import json
from typing import List, Dict, Any, Optional
from dotenv import load_dotenv
from telegram import Bot, Poll
import gspread
from google.oauth2.service_account import Credentials

def get_moscow_time():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ú–æ—Å–∫–≤—ã"""
    moscow_tz = datetime.timezone(datetime.timedelta(hours=3))  # UTC+3 –¥–ª—è –ú–æ—Å–∫–≤—ã
    return datetime.datetime.now(moscow_tz)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
ANNOUNCEMENTS_TOPIC_ID = os.getenv("ANNOUNCEMENTS_TOPIC_ID")  # ID —Ç–æ–ø–∏–∫–∞ "–ê–ù–û–ù–°–´ –¢–†–ï–ù–ò–†–û–í–û–ö"
GOOGLE_SHEETS_CREDENTIALS = os.getenv("GOOGLE_SHEETS_CREDENTIALS")  # JSON credentials
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")  # ID Google —Ç–∞–±–ª–∏—Ü—ã

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN) if BOT_TOKEN else None

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets
SCOPES = [
    'https://www.googleapis.com/auth/spreadsheets',
    'https://www.googleapis.com/auth/drive'
]

# –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –æ–ø—Ä–æ—Å–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
TRAINING_OPTIONS = [
    "üèÄ –í—Ç–æ—Ä–Ω–∏–∫ 19:00",
    "üèÄ –ü—è—Ç–Ω–∏—Ü–∞ 20:30",
    "üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä",
    "‚ùå –ù–µ—Ç"
]

# –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
TRAINING_DAYS = ["–í—Ç–æ—Ä–Ω–∏–∫", "–ü—è—Ç–Ω–∏—Ü–∞"]

class TrainingPollsManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –æ–ø—Ä–æ—Å–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    
    def __init__(self):
        self.gc = None
        self.spreadsheet = None
        self._init_google_sheets()
    
    def _init_google_sheets(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets"""
        try:
            if not GOOGLE_SHEETS_CREDENTIALS:
                print("‚ö†Ô∏è GOOGLE_SHEETS_CREDENTIALS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return
            
            # –ü–∞—Ä—Å–∏–º JSON credentials
            creds_dict = json.loads(GOOGLE_SHEETS_CREDENTIALS)
            creds = Credentials.from_service_account_info(creds_dict, scopes=SCOPES)
            
            self.gc = gspread.authorize(creds)
            
            if SPREADSHEET_ID:
                self.spreadsheet = self.gc.open_by_key(SPREADSHEET_ID)
                print("‚úÖ Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                print("‚ö†Ô∏è SPREADSHEET_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}")
    
    async def create_weekly_training_poll(self):
        """–°–æ–∑–¥–∞–µ—Ç –æ–ø—Ä–æ—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ –Ω–µ–¥–µ–ª—é (–∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 10:00 –ø–æ –ú–æ—Å–∫–≤–µ –≤ —Ç–æ–ø–∏–∫ –ê–ù–û–ù–°–´ –¢–†–ï–ù–ò–†–û–í–û–ö)"""
        try:
            if not bot:
                print("‚ùå –ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return None
            
            question = "üèÄ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ –Ω–µ–¥–µ–ª–µ –°–®–û–† –í–û"
            
            # –°–æ–∑–¥–∞–µ–º –æ–ø—Ä–æ—Å —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º
            poll = await bot.send_poll(
                chat_id=CHAT_ID,
                question=question,
                options=TRAINING_OPTIONS,
                allows_multiple_answers=True,
                is_anonymous=False,  # –û—Ç–∫—Ä—ã—Ç—ã–π –æ–ø—Ä–æ—Å
                explanation="–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–∏–π—Ç–∏ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ",
                message_thread_id=ANNOUNCEMENTS_TOPIC_ID  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç–æ–ø–∏–∫ "–ê–ù–û–ù–°–´ –¢–†–ï–ù–ò–†–û–í–û–ö"
            )
            
            print(f"‚úÖ –û–ø—Ä–æ—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å–æ–∑–¥–∞–Ω: {poll.poll.question}")
            return poll
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {e}")
            return None
    
    async def get_poll_results(self, poll_id: str) -> Dict[str, List[str]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞ –ø–æ ID"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø—Ä–æ—Å–µ
            poll_info = await bot.get_chat(chat_id=CHAT_ID)
            
            # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ä–æ—Å–æ–≤
            # –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, Telegram Bot API –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –æ–ø—Ä–æ—Å–æ–≤
            # –ù—É–∂–Ω–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Telegram Client API –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Ä—É—á–Ω—É—é
            
            print(f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ä–æ—Å–∞ {poll_id} —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏")
            return {}
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ä–æ—Å–∞: {e}")
            return {}
    
    def save_attendance_to_sheet(self, date: str, attendees: Dict[str, List[str]]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –≤ Google —Ç–∞–±–ª–∏—Ü—É"""
        try:
            if not self.spreadsheet:
                print("‚ùå Google —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
            month_year = datetime.datetime.now().strftime("%Y-%m")
            try:
                worksheet = self.spreadsheet.worksheet(month_year)
            except:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–∏—Å—Ç
                worksheet = self.spreadsheet.add_worksheet(title=month_year, rows=100, cols=10)
                
                # –ó–∞–≥–æ–ª–æ–≤–∫–∏
                headers = ["–î–∞—Ç–∞", "–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏", "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", "–£—á–∞—Å—Ç–Ω–∏–∫–∏", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]
                worksheet.update('A1:E1', [headers])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            row_data = []
            for day, users in attendees.items():
                if users:  # –ï—Å–ª–∏ –µ—Å—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∏
                    row_data.append([
                        date,
                        day,
                        day,  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
                        ", ".join(users),
                        len(users)
                    ])
            
            if row_data:
                # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â—É—é –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
                next_row = len(worksheet.get_all_values()) + 1
                worksheet.update(f'A{next_row}:E{next_row + len(row_data) - 1}', row_data)
                print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {len(row_data)} –∑–∞–ø–∏—Å–µ–π")
                return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Google —Ç–∞–±–ª–∏—Ü—É: {e}")
            return False
    
    def generate_monthly_statistics(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–µ—â–µ–Ω–∏–π –∑–∞ –º–µ—Å—è—Ü"""
        try:
            if not self.spreadsheet:
                print("‚ùå Google —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
                return {}
            
            month_year = datetime.datetime.now().strftime("%Y-%m")
            try:
                worksheet = self.spreadsheet.worksheet(month_year)
            except:
                print(f"‚ùå –õ–∏—Å—Ç {month_year} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return {}
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            data = worksheet.get_all_values()
            if len(data) <= 1:  # –¢–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                return {"message": "–î–∞–Ω–Ω—ã–µ –∑–∞ –º–µ—Å—è—Ü –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"}
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            stats = {
                "total_trainings": 0,
                "total_participants": 0,
                "by_day": {},
                "by_person": {},
                "most_active": [],
                "least_active": []
            }
            
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ (–Ω–∞—á–∏–Ω–∞—è —Å–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏, –ø—Ä–æ–ø—É—Å–∫–∞—è –∑–∞–≥–æ–ª–æ–≤–∫–∏)
            for row in data[1:]:
                if len(row) >= 5:
                    date, day, training, participants, count = row[:5]
                    
                    if count and count.isdigit():
                        count = int(count)
                        stats["total_trainings"] += 1
                        stats["total_participants"] += count
                        
                        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º
                        if day not in stats["by_day"]:
                            stats["by_day"][day] = {"count": 0, "participants": 0}
                        stats["by_day"][day]["count"] += 1
                        stats["by_day"][day]["participants"] += count
                        
                        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
                        if participants:
                            for person in participants.split(", "):
                                person = person.strip()
                                if person:
                                    if person not in stats["by_person"]:
                                        stats["by_person"][person] = 0
                                    stats["by_person"][person] += 1
            
            # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö
            if stats["by_person"]:
                sorted_participants = sorted(stats["by_person"].items(), key=lambda x: x[1], reverse=True)
                stats["most_active"] = sorted_participants[:3]  # –¢–æ–ø-3
                stats["least_active"] = sorted_participants[-3:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3
            
            return stats
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}
    
    async def send_monthly_report(self, stats: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç –≤ —á–∞—Ç"""
        try:
            if not stats or "message" in stats:
                message = "üìä –ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º\n\n‚ùå –î–∞–Ω–Ω—ã–µ –∑–∞ –º–µ—Å—è—Ü –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
            else:
                message = "üìä –ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º\n\n"
                message += f"üèÄ –í—Å–µ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {stats['total_trainings']}\n"
                message += f"üë• –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {stats['total_participants']}\n\n"
                
                message += "üìÖ –ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏:\n"
                for day, data in stats['by_day'].items():
                    message += f"  {day}: {data['count']} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, {data['participants']} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
                
                if stats['most_active']:
                    message += "\nüèÜ –°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:\n"
                    for person, count in stats['most_active']:
                        message += f"  {person}: {count} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n"
                
                if stats['least_active']:
                    message += "\nüìâ –ú–µ–Ω–µ–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:\n"
                    for person, count in stats['least_active']:
                        message += f"  {person}: {count} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n"
            
            await bot.send_message(
                chat_id=CHAT_ID,
                text=message,
                message_thread_id=ANNOUNCEMENTS_TOPIC_ID
            )
            print("‚úÖ –ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
training_manager = TrainingPollsManager()

async def should_create_weekly_poll() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å –Ω–∞ –Ω–µ–¥–µ–ª—é (–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 10:00 –ø–æ –ú–æ—Å–∫–≤–µ)"""
    now = get_moscow_time()
    return now.weekday() == 6 and now.hour == 10 and now.minute < 30  # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 10:00 –ø–æ –ú–æ—Å–∫–≤–µ

async def should_collect_attendance() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ (—Å—Ä–µ–¥–∞/—Å—É–±–±–æ—Ç–∞ 9:00 –ø–æ –ú–æ—Å–∫–≤–µ)"""
    now = get_moscow_time()
    return (now.weekday() in [2, 5]) and now.hour == 9 and now.minute < 30  # –°—Ä–µ–¥–∞/—Å—É–±–±–æ—Ç–∞ 9:00 –ø–æ –ú–æ—Å–∫–≤–µ

def get_target_training_day() -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–Ω—è –Ω–µ–¥–µ–ª–∏"""
    now = get_moscow_time()
    weekday = now.weekday()
    
    if weekday == 2:  # –°—Ä–µ–¥–∞
        return "–í—Ç–æ—Ä–Ω–∏–∫"  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞ –í—Ç–æ—Ä–Ω–∏–∫
    elif weekday == 5:  # –°—É–±–±–æ—Ç–∞
        return "–ü—è—Ç–Ω–∏—Ü–∞"  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞ –ü—è—Ç–Ω–∏—Ü—É
    else:
        return None

async def collect_attendance_data():
    """–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–ø—Ä–æ—Å–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –ø—Ä–æ–≤–µ—Ä—è–µ–º
        target_day = get_target_training_day()
        if not target_day:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –¥–µ–Ω—å –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö")
            return None
        
        print(f"üìÖ –ü—Ä–æ–≤–µ—Ä—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ {target_day}...")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        from poll_results_handler import poll_handler
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        if not await poll_handler.start_client():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Telegram Client")
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–ø—Ä–æ—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        latest_poll = await poll_handler.get_latest_sunday_training_poll()
        
        if not latest_poll:
            print("üìä –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ–ø—Ä–æ—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await poll_handler.close_client()
            return None
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–ø—Ä–æ—Å
        poll_date = datetime.datetime.fromisoformat(latest_poll['date'].replace('Z', '+00:00')).date()
        all_attendees = poll_handler.parse_training_votes(latest_poll)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω—É–∂–Ω–æ–≥–æ –¥–Ω—è
        filtered_attendees = {}
        if target_day in all_attendees:
            filtered_attendees[target_day] = all_attendees[target_day]
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–ª—è {target_day}: {len(all_attendees[target_day])} —á–µ–ª–æ–≤–µ–∫")
        else:
            print(f"‚ö†Ô∏è –£—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–ª—è {target_day} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞ –∏ –¥–Ω—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        date_str = poll_date.strftime("%Y-%m-%d")
        result = {f"{date_str}_{target_day}": filtered_attendees}
        
        print(f"üìÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –æ–ø—Ä–æ—Å –æ—Ç {date_str} –¥–ª—è {target_day}:")
        if filtered_attendees and target_day in filtered_attendees:
            users = filtered_attendees[target_day]
            print(f"   {target_day}: {len(users)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        else:
            print(f"   {target_day}: 0 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        
        await poll_handler.close_client()
        return result
        
    except ImportError:
        print("‚ö†Ô∏è –ú–æ–¥—É–ª—å poll_results_handler –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏: {e}")
        return None

async def should_generate_monthly_report() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç (–ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ 9:00 –ø–æ –ú–æ—Å–∫–≤–µ)"""
    now = get_moscow_time()
    last_day = (now.replace(day=1) + datetime.timedelta(days=32)).replace(day=1) - datetime.timedelta(days=1)
    return now.day == last_day.day and now.hour == 9 and now.minute < 30

async def main_training_polls():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞–º–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    try:
        now = get_moscow_time()
        print(f"üèÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ä–æ—Å–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ {now.strftime('%Y-%m-%d %H:%M')} (–ú–æ—Å–∫–≤–∞)...")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é (–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 10:00 –ø–æ –ú–æ—Å–∫–≤–µ)
        if await should_create_weekly_poll():
            print("üìä –°–æ–∑–¥–∞—é –æ–ø—Ä–æ—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ –Ω–µ–¥–µ–ª—é...")
            await training_manager.create_weekly_training_poll()
        
        # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ (—Å—Ä–µ–¥–∞/—Å—É–±–±–æ—Ç–∞ 9:00 –ø–æ –ú–æ—Å–∫–≤–µ)
        if await should_collect_attendance():
            print("üìã –°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏...")
            attendance_data = await collect_attendance_data()
            
            if attendance_data:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets
                for date_key, attendees in attendance_data.items():
                    # date_key –∏–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç "YYYY-MM-DD_–î–µ–Ω—å–ù–µ–¥–µ–ª–∏"
                    training_manager.save_attendance_to_sheet(date_key, attendees)
                    print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞ {date_key} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            else:
                print("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ 9:00)
        if await should_generate_monthly_report():
            print("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç...")
            stats = training_manager.generate_monthly_statistics()
            await training_manager.send_monthly_report(stats)
        
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ä–æ—Å–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ main_training_polls: {e}")

if __name__ == "__main__":
    asyncio.run(main_training_polls())
