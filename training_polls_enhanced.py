#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–ø—Ä–æ—Å–∞–º–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–æ–≤, —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Google Sheets
"""

import os
import asyncio
import datetime
import json
from typing import Dict, List, Optional, Any, Tuple
from dotenv import load_dotenv
from telegram import Bot
from telegram.ext import Application, MessageHandler, filters
import gspread
from datetime_utils import get_moscow_time, log_current_time
from google.oauth2.service_account import Credentials

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
ANNOUNCEMENTS_TOPIC_ID = os.getenv("ANNOUNCEMENTS_TOPIC_ID")
GOOGLE_SHEETS_CREDENTIALS = os.getenv("GOOGLE_SHEETS_CREDENTIALS")
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets
SCOPES = [
    'https://www.googleapis.com/auth/spreadsheets',
    'https://www.googleapis.com/auth/drive'
]



def get_next_tuesday_date():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—Ç–æ—Ä–Ω–∏–∫–∞"""
    now = get_moscow_time()
    days_ahead = 1 - now.weekday()  # 1 = –≤—Ç–æ—Ä–Ω–∏–∫
    if days_ahead <= 0:  # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –≤—Ç–æ—Ä–Ω–∏–∫ –∏–ª–∏ –ø–æ–∑–∂–µ
        days_ahead += 7
    next_tuesday = now + datetime.timedelta(days=days_ahead)
    return next_tuesday.date()

def get_next_friday_date():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–π –ø—è—Ç–Ω–∏—Ü—ã"""
    now = get_moscow_time()
    days_ahead = 4 - now.weekday()  # 4 = –ø—è—Ç–Ω–∏—Ü–∞
    if days_ahead <= 0:  # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –ø—è—Ç–Ω–∏—Ü–∞ –∏–ª–∏ –ø–æ–∑–∂–µ
        days_ahead += 7
    next_friday = now + datetime.timedelta(days=days_ahead)
    return next_friday.date()

class TrainingPollsManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞–º–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    
    def __init__(self):
        self.bot = None
        self.gc = None
        self.spreadsheet = None
        self.current_poll_info = {}
        self.poll_results = {}
        self._init_bot()
        self._init_google_sheets()
    
    def _init_bot(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        if BOT_TOKEN:
            self.bot = Bot(token=BOT_TOKEN)
            print("‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        else:
            print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    def _init_google_sheets(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets"""
        try:
            if not GOOGLE_SHEETS_CREDENTIALS:
                print("‚ö†Ô∏è GOOGLE_SHEETS_CREDENTIALS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return
            
            creds_dict = json.loads(GOOGLE_SHEETS_CREDENTIALS)
            creds = Credentials.from_service_account_info(creds_dict, scopes=SCOPES)
            
            self.gc = gspread.authorize(creds)
            
            if SPREADSHEET_ID:
                self.spreadsheet = self.gc.open_by_key(SPREADSHEET_ID)
                print("‚úÖ Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                print("‚ö†Ô∏è SPREADSHEET_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}")
    
    async def create_weekly_training_poll(self):
        """–°–æ–∑–¥–∞–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ–ø—Ä–æ—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
        if not self.bot or not CHAT_ID:
            print("‚ùå –ë–æ—Ç –∏–ª–∏ CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return False
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
            tuesday_date = get_next_tuesday_date()
            friday_date = get_next_friday_date()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            question = f"üèÄ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ –Ω–µ–¥–µ–ª–µ –°–®–û–† –í–û ({tuesday_date.strftime('%d.%m')} - {friday_date.strftime('%d.%m')})"
            options = [
                f"üèÄ –í—Ç–æ—Ä–Ω–∏–∫ {tuesday_date.strftime('%d.%m')} 19:00",
                f"üèÄ –ü—è—Ç–Ω–∏—Ü–∞ {friday_date.strftime('%d.%m')} 20:30",
                "üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä",
                "‚ùå –ù–µ—Ç"
            ]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø—Ä–æ—Å
            message_thread_id = int(ANNOUNCEMENTS_TOPIC_ID) if ANNOUNCEMENTS_TOPIC_ID else None
            
            poll_message = await self.bot.send_poll(
                chat_id=int(CHAT_ID),
                question=question,
                options=options,
                is_anonymous=False,
                allows_multiple_answers=True,
                message_thread_id=message_thread_id
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø—Ä–æ—Å–µ
            self.current_poll_info = {
                'message_id': poll_message.message_id,
                'poll_id': poll_message.poll.id,
                'question': question,
                'options': options,
                'date': get_moscow_time().isoformat(),
                'chat_id': CHAT_ID,
                'topic_id': ANNOUNCEMENTS_TOPIC_ID,
                'tuesday_date': tuesday_date.isoformat(),
                'friday_date': friday_date.isoformat()
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            with open('current_poll_info.json', 'w', encoding='utf-8') as f:
                json.dump(self.current_poll_info, f, ensure_ascii=False, indent=2)
            
            print(f"‚úÖ –û–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            print(f"üìä ID –æ–ø—Ä–æ—Å–∞: {self.current_poll_info['poll_id']}")
            print(f"üìÖ –í—Ç–æ—Ä–Ω–∏–∫: {tuesday_date.strftime('%d.%m.%Y')}")
            print(f"üìÖ –ü—è—Ç–Ω–∏—Ü–∞: {friday_date.strftime('%d.%m.%Y')}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞: {e}")
            return False
    
    def should_create_weekly_poll(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ–ø—Ä–æ—Å"""
        now = get_moscow_time()
        
        # –°–æ–∑–¥–∞–µ–º –æ–ø—Ä–æ—Å –∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 10:00-10:59
        if now.weekday() == 6 and now.hour == 10:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω –æ–ø—Ä–æ—Å —Å–µ–≥–æ–¥–Ω—è
            if self._was_poll_created_today():
                print("üìä –û–ø—Ä–æ—Å —É–∂–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω —Å–µ–≥–æ–¥–Ω—è")
                return False
            return True
        
        return False
    
    def _was_poll_created_today(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω –æ–ø—Ä–æ—Å —Å–µ–≥–æ–¥–Ω—è"""
        try:
            if not os.path.exists('current_poll_info.json'):
                return False
            
            with open('current_poll_info.json', 'r', encoding='utf-8') as f:
                poll_info = json.load(f)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞
            poll_date_str = poll_info.get('date', '')
            if not poll_date_str:
                return False
            
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞
            poll_date = datetime.datetime.fromisoformat(poll_date_str.replace('Z', '+00:00'))
            poll_date_moscow = poll_date.replace(tzinfo=datetime.timezone.utc).astimezone(
                datetime.timezone(datetime.timedelta(hours=3))
            )
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–æ–π
            today = get_moscow_time().date()
            poll_date_only = poll_date_moscow.date()
            
            if poll_date_only == today:
                print(f"üìä –û–ø—Ä–æ—Å —É–∂–µ —Å–æ–∑–¥–∞–Ω —Å–µ–≥–æ–¥–Ω—è: {poll_date_moscow.strftime('%Y-%m-%d %H:%M')}")
                return True
            
            return False
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞: {e}")
            return False
    
    def should_collect_tuesday_data(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–±–∏—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –≤—Ç–æ—Ä–Ω–∏–∫"""
        now = get_moscow_time()
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—É—é —Å—Ä–µ–¥—É –≤ 10:00-10:59
        if now.weekday() == 2 and now.hour == 10:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∏ –ª–∏ —É–∂–µ —Å–æ–±—Ä–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è
            if self._was_data_collected_today("–í—Ç–æ—Ä–Ω–∏–∫"):
                print("üìä –î–∞–Ω–Ω—ã–µ –∑–∞ –≤—Ç–æ—Ä–Ω–∏–∫ —É–∂–µ –±—ã–ª–∏ —Å–æ–±—Ä–∞–Ω—ã —Å–µ–≥–æ–¥–Ω—è")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–ø—Ä–æ—Å –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
            if not self._poll_exists():
                print("‚ùå –û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω - –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
                return False
            
            return True
        
        return False
    
    def should_collect_friday_data(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–±–∏—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø—è—Ç–Ω–∏—Ü—É"""
        now = get_moscow_time()
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—É—é —Å—É–±–±–æ—Ç—É –≤ 10:00-10:59
        if now.weekday() == 5 and now.hour == 10:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∏ –ª–∏ —É–∂–µ —Å–æ–±—Ä–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è
            if self._was_data_collected_today("–ü—è—Ç–Ω–∏—Ü–∞"):
                print("üìä –î–∞–Ω–Ω—ã–µ –∑–∞ –ø—è—Ç–Ω–∏—Ü—É —É–∂–µ –±—ã–ª–∏ —Å–æ–±—Ä–∞–Ω—ã —Å–µ–≥–æ–¥–Ω—è")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–ø—Ä–æ—Å –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
            if not self._poll_exists():
                print("‚ùå –û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω - –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
                return False
            
            return True
        
        return False
    
    def _was_data_collected_today(self, day_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–∏ –ª–∏ —É–∂–µ —Å–æ–±—Ä–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–µ–Ω—å —Å–µ–≥–æ–¥–Ω—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
            if not os.path.exists('training_data_collection_log.json'):
                print(f"üìÑ –§–∞–π–ª training_data_collection_log.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = os.path.getsize('training_data_collection_log.json')
            if file_size == 0:
                print(f"üìÑ –§–∞–π–ª training_data_collection_log.json –ø—É—Å—Ç–æ–π")
                return False
            
            with open('training_data_collection_log.json', 'r', encoding='utf-8') as f:
                collection_log = json.load(f)
            
            today = get_moscow_time().date().isoformat()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –æ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            for entry in collection_log.get('collections', []):
                if (entry.get('date') == today and 
                    entry.get('day_name') == day_name):
                    print(f"üìä –î–∞–Ω–Ω—ã–µ –∑–∞ {day_name} —É–∂–µ —Å–æ–±—Ä–∞–Ω—ã —Å–µ–≥–æ–¥–Ω—è: {entry.get('time', '')}")
                    return True
            
            return False
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def _log_data_collection(self, day_name: str):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–æ–≥ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            if os.path.exists('training_data_collection_log.json'):
                with open('training_data_collection_log.json', 'r', encoding='utf-8') as f:
                    collection_log = json.load(f)
            else:
                collection_log = {'collections': []}
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            now = get_moscow_time()
            new_entry = {
                'date': now.date().isoformat(),
                'time': now.strftime('%H:%M:%S'),
                'day_name': day_name,
                'timestamp': now.isoformat()
            }
            
            collection_log['collections'].append(new_entry)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥
            with open('training_data_collection_log.json', 'w', encoding='utf-8') as f:
                json.dump(collection_log, f, ensure_ascii=False, indent=2)
            
            print(f"üìù –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞ {day_name} –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def find_player_by_telegram_id(self, telegram_id: str) -> Optional[Dict]:
        """–ò—â–µ—Ç –∏–≥—Ä–æ–∫–∞ –ø–æ Telegram ID –≤ –ª–∏—Å—Ç–µ '–ò–≥—Ä–æ–∫–∏'"""
        if not self.spreadsheet:
            return None
        
        try:
            worksheet = self.spreadsheet.worksheet("–ò–≥—Ä–æ–∫–∏")
            all_values = worksheet.get_all_values()
            
            if len(all_values) <= 1:
                return None
            
            headers = all_values[0]
            
            # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫—É —Å Telegram ID
            telegram_id_col = None
            for i, header in enumerate(headers):
                if 'telegram' in header.lower() or 'id' in header.lower():
                    telegram_id_col = i
                    break
            
            if telegram_id_col is None:
                return None
            
            # –ò—â–µ–º –∏–≥—Ä–æ–∫–∞
            for row in all_values[1:]:
                if len(row) > telegram_id_col:
                    cell_value = row[telegram_id_col].strip()
                    
                    if (cell_value == telegram_id or 
                        cell_value == f"@{telegram_id}" or 
                        cell_value == f"@{telegram_id.replace('@', '')}" or
                        cell_value == telegram_id.replace('@', '')):
                        
                        return {
                            'data': row,
                            'headers': headers
                        }
            
            return None
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–∞: {e}")
            return None
    
    def get_player_full_name(self, player_data: Dict) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω–æ–µ –∏–º—è –∏–≥—Ä–æ–∫–∞"""
        if not player_data:
            return None
        
        headers = player_data['headers']
        data = player_data['data']
        
        # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å –∏–º–µ–Ω–µ–º –∏ —Ñ–∞–º–∏–ª–∏–µ–π
        name_col = None
        surname_col = None
        
        for i, header in enumerate(headers):
            header_lower = header.lower()
            if '–∏–º—è' in header_lower or 'name' in header_lower:
                name_col = i
            elif '—Ñ–∞–º–∏–ª–∏—è' in header_lower or 'surname' in header_lower or 'last' in header_lower:
                surname_col = i
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è
        full_name_parts = []
        
        if surname_col is not None and len(data) > surname_col:
            surname = data[surname_col].strip()
            if surname:
                full_name_parts.append(surname)
        
        if name_col is not None and len(data) > name_col:
            name = data[name_col].strip()
            if name:
                full_name_parts.append(name)
        
        if full_name_parts:
            return ' '.join(full_name_parts)
        else:
            return None
    
    def format_player_name(self, user_name: str, telegram_id: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–º—è –∏–≥—Ä–æ–∫–∞ —Å —É—á–µ—Ç–æ–º –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã"""
        # –£–±–∏—Ä–∞–µ–º @ –∏–∑ telegram_id –¥–ª—è –ø–æ–∏—Å–∫–∞
        clean_telegram_id = telegram_id.replace('@', '')
        
        # –ò—â–µ–º –∏–≥—Ä–æ–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ
        player_data = self.find_player_by_telegram_id(clean_telegram_id)
        
        if player_data:
            full_name = self.get_player_full_name(player_data)
            if full_name:
                return full_name
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º—è –∏ telegram_id
        return f"{user_name} ({telegram_id})"
    
    async def collect_poll_data(self, target_day: str):
        """–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–Ω—è"""
        print(f"üîç –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞ {target_day}")
        
        if not os.path.exists('current_poll_info.json'):
            print("‚ùå –§–∞–π–ª current_poll_info.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        file_size = os.path.getsize('current_poll_info.json')
        print(f"üìÑ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ current_poll_info.json: {file_size} –±–∞–π—Ç")
        
        if file_size == 0:
            print("‚ùå –§–∞–π–ª current_poll_info.json –ø—É—Å—Ç–æ–π")
            return False
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø—Ä–æ—Å–µ
            with open('current_poll_info.json', 'r', encoding='utf-8') as f:
                poll_info = json.load(f)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ poll_id –≤ —Ñ–∞–π–ª–µ
            if not poll_info or 'poll_id' not in poll_info:
                print(f"‚ùå –§–∞–π–ª current_poll_info.json –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç poll_id")
                print(f"üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞: {poll_info}")
                return False
            
            print(f"üìä –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞ {target_day}")
            print(f"üìä ID –æ–ø—Ä–æ—Å–∞: {poll_info['poll_id']}")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞
            updates = await self.bot.get_updates(limit=50)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–∞
            tuesday_voters = []
            friday_voters = []
            trainer_voters = []
            no_voters = []
            
            for update in updates:
                if update.poll_answer:
                    poll_answer = update.poll_answer
                    if poll_answer.poll_id == poll_info['poll_id']:
                        user = poll_answer.user
                        option_ids = poll_answer.option_ids
                        
                        user_name = f"{user.first_name} {user.last_name or ''}".strip()
                        telegram_id = user.username or "–±–µ–∑_username"
                        if telegram_id != "–±–µ–∑_username":
                            telegram_id = f"@{telegram_id}"
                        
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–º—è –∏–≥—Ä–æ–∫–∞
                        formatted_name = self.format_player_name(user_name, telegram_id)
                        
                        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –¥–Ω—è–º
                        if 0 in option_ids:  # –í—Ç–æ—Ä–Ω–∏–∫
                            tuesday_voters.append(formatted_name)
                        if 1 in option_ids:  # –ü—è—Ç–Ω–∏—Ü–∞
                            friday_voters.append(formatted_name)
                        if 2 in option_ids:  # –¢—Ä–µ–Ω–µ—Ä
                            trainer_voters.append(formatted_name)
                        if 3 in option_ids:  # –ù–µ—Ç
                            no_voters.append(formatted_name)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.poll_results = {
                'poll_id': poll_info['poll_id'],
                'tuesday_voters': tuesday_voters,
                'friday_voters': friday_voters,
                'trainer_voters': trainer_voters,
                'no_voters': no_voters,
                'timestamp': get_moscow_time().isoformat()
            }
            
            with open('poll_results.json', 'w', encoding='utf-8') as f:
                json.dump(self.poll_results, f, ensure_ascii=False, indent=2)
            
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã:")
            print(f"   –í—Ç–æ—Ä–Ω–∏–∫: {len(tuesday_voters)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            print(f"   –ü—è—Ç–Ω–∏—Ü–∞: {len(friday_voters)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            print(f"   –¢—Ä–µ–Ω–µ—Ä: {len(trainer_voters)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            print(f"   –ù–µ—Ç: {len(no_voters)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
            self._log_data_collection(target_day)
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def _poll_exists(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –æ–ø—Ä–æ—Å –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if not os.path.exists('current_poll_info.json'):
                print("üìÑ –§–∞–π–ª current_poll_info.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = os.path.getsize('current_poll_info.json')
            if file_size <= 3:  # –§–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ {}
                print("üìÑ –§–∞–π–ª current_poll_info.json –ø—É—Å—Ç–æ–π")
                return False
            
            with open('current_poll_info.json', 'r', encoding='utf-8') as f:
                poll_info = json.load(f)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ poll_id
            if not poll_info or 'poll_id' not in poll_info:
                print("üìÑ –§–∞–π–ª current_poll_info.json –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç poll_id")
                return False
            
            print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π –æ–ø—Ä–æ—Å –Ω–∞–π–¥–µ–Ω: {poll_info['poll_id']}")
            return True
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞: {e}")
            return False
    
    def save_to_training_sheet(self, target_day: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –ª–∏—Å—Ç '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏' —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π"""
        if not self.spreadsheet:
            print("‚ùå Google Sheets –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            return False
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞
            if not os.path.exists('poll_results.json'):
                print("‚ùå –§–∞–π–ª poll_results.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            with open('poll_results.json', 'r', encoding='utf-8') as f:
                poll_results = json.load(f)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø—Ä–æ—Å–µ
            with open('current_poll_info.json', 'r', encoding='utf-8') as f:
                poll_info = json.load(f)
            
            # –ü–æ–ª—É—á–∞–µ–º –ª–∏—Å—Ç "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"
            try:
                worksheet = self.spreadsheet.worksheet("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
                print("‚úÖ –õ–∏—Å—Ç '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏' –Ω–∞–π–¥–µ–Ω")
            except gspread.WorksheetNotFound:
                worksheet = self.spreadsheet.add_worksheet(title="–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", rows=1000, cols=10)
                print("‚úÖ –õ–∏—Å—Ç '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏' —Å–æ–∑–¥–∞–Ω")
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                headers = ["–î–∞—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", "–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", "–£—á–∞—Å—Ç–Ω–∏–∫–∏"]
                worksheet.append_row(headers)
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                worksheet.format('A1:D1', {
                    'backgroundColor': {'red': 0.2, 'green': 0.6, 'blue': 0.8},
                    'textFormat': {'bold': True, 'foregroundColor': {'red': 1, 'green': 1, 'blue': 1}}
                })
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            if target_day == "–í—Ç–æ—Ä–Ω–∏–∫":
                voters = poll_results['tuesday_voters']
                training_date = poll_info['tuesday_date']
            elif target_day == "–ü—è—Ç–Ω–∏—Ü–∞":
                voters = poll_results['friday_voters']
                training_date = poll_info['friday_date']
            else:
                print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–µ–Ω—å: {target_day}")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏
            all_values = worksheet.get_all_values()
            next_row = len(all_values) + 1
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π
            main_row_data = [
                training_date,
                target_day,
                len(voters),
                ""  # –ü—É—Å—Ç–∞—è –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            ]
            worksheet.append_row(main_row_data)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
            for voter in voters:
                participant_row = ["", "", "", voter]
                worksheet.append_row(participant_row)
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É
            if len(voters) > 0:
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
                start_row = next_row + 1
                end_row = next_row + len(voters)
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è API)
                try:
                    worksheet.batch_update([{
                        'range': f'A{start_row}:D{end_row}',
                        'properties': {
                            'hiddenByUser': True
                        }
                    }])
                except:
                    print("‚ö†Ô∏è –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ API")
            
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞ {target_day} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
            print(f"   –î–∞—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {training_date}")
            print(f"   –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(voters)}")
            print(f"   –£—á–∞—Å—Ç–Ω–∏–∫–∏: {', '.join(voters) if voters else '–Ω–µ—Ç'}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Google —Ç–∞–±–ª–∏—Ü—É: {e}")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
training_manager = TrainingPollsManager()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üèÄ –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –û–ü–†–û–°–ê–ú–ò –¢–†–ï–ù–ò–†–û–í–û–ö")
    print("=" * 60)
    
    moscow_tz = datetime.timezone(datetime.timedelta(hours=3))
    now = datetime.datetime.now(moscow_tz)
    print(f"üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (–ú–æ—Å–∫–≤–∞): {now.strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üìÖ –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'][now.weekday()]}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    bot_token = os.getenv("BOT_TOKEN")
    chat_id = os.getenv("CHAT_ID")
    google_credentials = os.getenv("GOOGLE_SHEETS_CREDENTIALS")
    spreadsheet_id = os.getenv("SPREADSHEET_ID")
    
    print("üîß –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø:")
    print(f"BOT_TOKEN: {'‚úÖ' if bot_token else '‚ùå'}")
    print(f"CHAT_ID: {'‚úÖ' if chat_id else '‚ùå'}")
    print(f"GOOGLE_SHEETS_CREDENTIALS: {'‚úÖ' if google_credentials else '‚ùå'}")
    print(f"SPREADSHEET_ID: {'‚úÖ' if spreadsheet_id else '‚ùå'}")
    
    if not all([bot_token, chat_id, google_credentials, spreadsheet_id]):
        print("‚ùå –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return
    
    print(f"‚úÖ SPREADSHEET_ID: {spreadsheet_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    print("\nüîç –ü–†–û–í–ï–†–ö–ê –£–°–õ–û–í–ò–ô –í–´–ü–û–õ–ù–ï–ù–ò–Ø:")
    print(f"   –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ (–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 10:00): {'‚úÖ' if training_manager.should_create_weekly_poll() else '‚ùå'}")
    print(f"   –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—Ç–æ—Ä–Ω–∏–∫ (—Å—Ä–µ–¥–∞ 10:00): {'‚úÖ' if training_manager.should_collect_tuesday_data() else '‚ùå'}")
    print(f"   –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø—è—Ç–Ω–∏—Ü—É (—Å—É–±–±–æ—Ç–∞ 10:00): {'‚úÖ' if training_manager.should_collect_friday_data() else '‚ùå'}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å
    if training_manager.should_create_weekly_poll():
        print("\nüîÑ –°–æ–∑–¥–∞–Ω–∏–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞...")
        success = await training_manager.create_weekly_training_poll()
        if success:
            print("‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞")
    
    elif training_manager.should_collect_tuesday_data():
        print("\nüîÑ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—Ç–æ—Ä–Ω–∏–∫...")
        success = await training_manager.collect_poll_data("–í—Ç–æ—Ä–Ω–∏–∫")
        if success:
            print("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞ –≤—Ç–æ—Ä–Ω–∏–∫ —Å–æ–±—Ä–∞–Ω—ã")
            save_success = training_manager.save_to_training_sheet("–í—Ç–æ—Ä–Ω–∏–∫")
            if save_success:
                print("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞ –≤—Ç–æ—Ä–Ω–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—Ç–æ—Ä–Ω–∏–∫")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—Ç–æ—Ä–Ω–∏–∫")
    
    elif training_manager.should_collect_friday_data():
        print("\nüîÑ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø—è—Ç–Ω–∏—Ü—É...")
        success = await training_manager.collect_poll_data("–ü—è—Ç–Ω–∏—Ü–∞")
        if success:
            print("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞ –ø—è—Ç–Ω–∏—Ü—É —Å–æ–±—Ä–∞–Ω—ã")
            save_success = training_manager.save_to_training_sheet("–ü—è—Ç–Ω–∏—Ü–∞")
            if save_success:
                print("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞ –ø—è—Ç–Ω–∏—Ü—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø—è—Ç–Ω–∏—Ü—É")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø—è—Ç–Ω–∏—Ü—É")
    
    else:
        print("\n‚è∞ –ù–µ –≤—Ä–µ–º—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π")
        print("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:")
        print("   üóìÔ∏è –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 10:00 - –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞")
        print("   üìä –°—Ä–µ–¥–∞ 10:00 - –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—Ç–æ—Ä–Ω–∏–∫")
        print("   üìä –°—É–±–±–æ—Ç–∞ 10:00 - –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø—è—Ç–Ω–∏—Ü—É")

if __name__ == "__main__":
    asyncio.run(main())
