#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–ø—Ä–æ—Å–∞–º–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–æ–≤, —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Google Sheets
"""

import os
import asyncio
import datetime
import json
from typing import Dict, List, Optional, Any, Tuple
from dotenv import load_dotenv
from telegram import Bot
from telegram.ext import Application, MessageHandler, filters
import gspread
from datetime_utils import get_moscow_time, log_current_time
from google.oauth2.service_account import Credentials
from enhanced_duplicate_protection import duplicate_protection

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
ANNOUNCEMENTS_TOPIC_ID = os.getenv("ANNOUNCEMENTS_TOPIC_ID")
GOOGLE_SHEETS_CREDENTIALS = os.getenv("GOOGLE_SHEETS_CREDENTIALS")
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets
SCOPES = [
    'https://www.googleapis.com/auth/spreadsheets',
    'https://www.googleapis.com/auth/drive'
]



def get_current_week_period():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–∏–æ–¥ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)"""
    now = get_moscow_time()
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
    days_back = now.weekday()  # 0 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 6 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
    current_monday = now - datetime.timedelta(days=days_back)
    
    # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ + 6 –¥–Ω–µ–π
    current_sunday = current_monday + datetime.timedelta(days=6)
    
    return current_monday.date(), current_sunday.date()

def get_next_week_period():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–∏–æ–¥ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)"""
    now = get_moscow_time()
    
    # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
    days_ahead = 0 - now.weekday()  # 0 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
    if days_ahead <= 0:  # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –∏–ª–∏ –ø–æ–∑–∂–µ
        days_ahead += 7
    next_monday = now + datetime.timedelta(days=days_ahead)
    
    # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ + 6 –¥–Ω–µ–π
    next_sunday = next_monday + datetime.timedelta(days=6)
    
    return next_monday.date(), next_sunday.date()

class TrainingPollsManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞–º–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    
    def __init__(self):
        self.bot = None
        self.gc = None
        self.spreadsheet = None
        self.current_poll_info = {}
        self.poll_results = {}
        self._init_bot()
        self._init_google_sheets()
    
    def _init_bot(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        if BOT_TOKEN:
            self.bot = Bot(token=BOT_TOKEN)
            print("‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        else:
            print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    def _init_google_sheets(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ JSON —Ñ–∞–π–ª–∞
            if os.path.exists('google_credentials.json'):
                with open('google_credentials.json', 'r', encoding='utf-8') as f:
                    creds_dict = json.load(f)
                print("‚úÖ Google credentials –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ google_credentials.json")
            elif GOOGLE_SHEETS_CREDENTIALS:
                creds_dict = json.loads(GOOGLE_SHEETS_CREDENTIALS)
                print("‚úÖ Google credentials –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            else:
                print("‚ö†Ô∏è GOOGLE_SHEETS_CREDENTIALS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return
            
            creds = Credentials.from_service_account_info(creds_dict, scopes=SCOPES)
            
            self.gc = gspread.authorize(creds)
            
            if SPREADSHEET_ID:
                self.spreadsheet = self.gc.open_by_key(SPREADSHEET_ID)
                print("‚úÖ Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                print("‚ö†Ô∏è SPREADSHEET_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}")
    
    async def create_weekly_training_poll(self):
        """–°–æ–∑–¥–∞–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ–ø—Ä–æ—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
        if not self.bot or not CHAT_ID:
            print("‚ùå –ë–æ—Ç –∏–ª–∏ CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return False
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–∏–æ–¥ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏ (–¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Å–æ–∑–¥–∞–µ—Ç—Å—è –æ–ø—Ä–æ—Å)
            week_start, week_end = get_current_week_period()
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
            tuesday_date = self.get_next_tuesday_date()
            thursday_date = self.get_next_thursday_date()
            friday_date = self.get_next_friday_date()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è –Ω–µ–¥–µ–ª–∏
            locations = self.get_training_locations(week_start)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å —Å –¥–∞—Ç–∞–º–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
            question = f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ {tuesday_date.strftime('%d.%m')}, {thursday_date.strftime('%d.%m')} –∏ {friday_date.strftime('%d.%m')}"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
            options = [
                "–í—Ç–æ—Ä–Ω–∏–∫, 21:30, –∑–∞–ª –î–∏–Ω–∞–º–æ (–ö—Ä–µ—Å—Ç–æ–≤—Å–∫–∏–π –æ—Å—Ç—Ä–æ–≤)",
                "–ß–µ—Ç–≤–µ—Ä–≥, 21:30, –∑–∞–ª –î–∏–Ω–∞–º–æ (–ò–≥—Ä–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞, –º–∞–∫—Å–∏–º—É–º 9 —á–µ–ª–æ–≤–µ–∫)",
                "–ü—è—Ç–Ω–∏—Ü–∞, 20:30, –∑–∞–ª –°–®–û–† –í–û",
                "–¢—Ä–µ–Ω–µ—Ä",
                "–ù–µ—Ç"
            ]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø—Ä–æ—Å
            message_thread_id = int(ANNOUNCEMENTS_TOPIC_ID) if ANNOUNCEMENTS_TOPIC_ID else None
            
            if not CHAT_ID:
                print("‚ùå CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return False
            
            poll_message = await self.bot.send_poll(
                chat_id=int(CHAT_ID),
                question=question,
                options=options,
                is_anonymous=False,
                allows_multiple_answers=True,
                message_thread_id=message_thread_id
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø—Ä–æ—Å–µ
            self.current_poll_info = {
                'message_id': poll_message.message_id,
                'poll_id': poll_message.poll.id,
                'question': question,
                'options': options,
                'date': self.get_moscow_time().isoformat(),
                'chat_id': CHAT_ID,
                'topic_id': ANNOUNCEMENTS_TOPIC_ID,
                'tuesday_date': tuesday_date.isoformat(),
                'thursday_date': thursday_date.isoformat(),
                'friday_date': friday_date.isoformat(),
                'week_start': week_start.isoformat(),
                'week_end': week_end.isoformat(),
                'tuesday_location': {'time': '21:30', 'location': '–∑–∞–ª –î–∏–Ω–∞–º–æ (–ö—Ä–µ—Å—Ç–æ–≤—Å–∫–∏–π –æ—Å—Ç—Ä–æ–≤)'},
                'thursday_location': {'time': '21:30', 'location': '–∑–∞–ª –î–∏–Ω–∞–º–æ (–ò–≥—Ä–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞, –º–∞–∫—Å–∏–º—É–º 9 —á–µ–ª–æ–≤–µ–∫)'},
                'friday_location': {'time': '20:30', 'location': '–∑–∞–ª –°–®–û–† –í–û'}
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            with open('current_poll_info.json', 'w', encoding='utf-8') as f:
                json.dump(self.current_poll_info, f, ensure_ascii=False, indent=2)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Å–µ—Ä–≤–∏—Å–Ω—ã–π –ª–∏—Å—Ç –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            additional_info = f"–í—Ç–æ—Ä–Ω–∏–∫ {tuesday_date.strftime('%d.%m')}, –ß–µ—Ç–≤–µ—Ä–≥ {thursday_date.strftime('%d.%m')}, –ü—è—Ç–Ω–∏—Ü–∞ {friday_date.strftime('%d.%m')}"
            duplicate_protection.add_record(
                "–û–ü–†–û–°_–¢–†–ï–ù–ò–†–û–í–ö–ê",
                str(poll_message.poll.id),
                "–ê–ö–¢–ò–í–ï–ù",
                additional_info
            )
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ Google Sheets
            try:
                print(f"üìä –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ Google Sheets...")
                self._create_training_structure(tuesday_date, friday_date, str(poll_message.poll.id))
                print(f"‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤ Google Sheets —Å–æ–∑–¥–∞–Ω–∞")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ Google Sheets: {e}")
            
            print(f"‚úÖ –û–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            print(f"üìä ID –æ–ø—Ä–æ—Å–∞: {self.current_poll_info['poll_id']}")
            print(f"üìä ID —Å–æ–æ–±—â–µ–Ω–∏—è: {self.current_poll_info['message_id']}")
            print(f"üìÖ –ü–µ—Ä–∏–æ–¥ –Ω–µ–¥–µ–ª–∏: {week_start.strftime('%d.%m.%Y')} - {week_end.strftime('%d.%m.%Y')}")
            print(f"üìÖ –í—Ç–æ—Ä–Ω–∏–∫: {tuesday_date.strftime('%d.%m.%Y')} 21:30 –∑–∞–ª –î–∏–Ω–∞–º–æ (–ö—Ä–µ—Å—Ç–æ–≤—Å–∫–∏–π –æ—Å—Ç—Ä–æ–≤)")
            print(f"üìÖ –ü—è—Ç–Ω–∏—Ü–∞: {friday_date.strftime('%d.%m.%Y')} 20:30 –∑–∞–ª –°–®–û–† –í–û")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞: {e}")
            return False
    
    def should_create_weekly_poll(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ–ø—Ä–æ—Å"""
        now = self.get_moscow_time()
        
        # –°–æ–∑–¥–∞–µ–º –æ–ø—Ä–æ—Å –∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 10:00-23:59
        if now.weekday() == 6 and now.hour >= 10:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω –æ–ø—Ä–æ—Å —Å–µ–≥–æ–¥–Ω—è
            if self._was_poll_created_today():
                print("üìä –û–ø—Ä–æ—Å —É–∂–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω —Å–µ–≥–æ–¥–Ω—è")
                return False
            return True
        
        return False
    
    def _was_poll_created_today(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω –æ–ø—Ä–æ—Å —Å–µ–≥–æ–¥–Ω—è (—É—Å–∏–ª–µ–Ω–Ω–∞—è –∑–∞—â–∏—Ç–∞)"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –∑–∞—â–∏—Ç—ã –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            today = self.get_moscow_time().date()
            today_str = today.strftime('%d.%m.%Y')
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø—Ä–æ—Å—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            training_polls = duplicate_protection.get_records_by_type("–û–ü–†–û–°_–¢–†–ï–ù–ò–†–û–í–ö–ê")
            
            for poll in training_polls:
                if poll.get('date', '').startswith(today_str) and poll.get('status') == '–ê–ö–¢–ò–í–ï–ù':
                    print(f"üìä –û–ø—Ä–æ—Å —É–∂–µ —Å–æ–∑–¥–∞–Ω —Å–µ–≥–æ–¥–Ω—è: {poll.get('date')}")
                    return True
            
            # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª
            if os.path.exists('current_poll_info.json'):
                try:
                    with open('current_poll_info.json', 'r', encoding='utf-8') as f:
                        poll_info = json.load(f)
                    
                    poll_date_str = poll_info.get('date', '')
                    if poll_date_str:
                        poll_date = datetime.datetime.fromisoformat(poll_date_str.replace('Z', '+00:00'))
                        poll_date_moscow = poll_date.replace(tzinfo=datetime.timezone.utc).astimezone(
                            datetime.timezone(datetime.timedelta(hours=3))
                        )
                        
                        if poll_date_moscow.date() == today:
                            print(f"üìä –û–ø—Ä–æ—Å —É–∂–µ —Å–æ–∑–¥–∞–Ω —Å–µ–≥–æ–¥–Ω—è (—Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª): {poll_date_moscow.strftime('%Y-%m-%d %H:%M')}")
                            return True
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
            
            return False
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞: {e}")
            return False
    
    def should_collect_tuesday_data(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–±–∏—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –≤—Ç–æ—Ä–Ω–∏–∫"""
        now = self.get_moscow_time()
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—É—é —Å—Ä–µ–¥—É –≤ 10:00-23:59
        if now.weekday() == 2 and now.hour >= 10:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∏ –ª–∏ —É–∂–µ —Å–æ–±—Ä–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è
            if self._was_data_collected_today("–í—Ç–æ—Ä–Ω–∏–∫"):
                print("üìä –î–∞–Ω–Ω—ã–µ –∑–∞ –≤—Ç–æ—Ä–Ω–∏–∫ —É–∂–µ –±—ã–ª–∏ —Å–æ–±—Ä–∞–Ω—ã —Å–µ–≥–æ–¥–Ω—è")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–ø—Ä–æ—Å –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
            if not self._poll_exists():
                print("‚ùå –û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω - –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
                return False
            
            return True
        
        return False
    
    def should_collect_friday_data(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–±–∏—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø—è—Ç–Ω–∏—Ü—É"""
        now = self.get_moscow_time()
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—É—é —Å—É–±–±–æ—Ç—É –≤ 10:00-23:59
        if now.weekday() == 5 and now.hour >= 10:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∏ –ª–∏ —É–∂–µ —Å–æ–±—Ä–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è
            if self._was_data_collected_today("–ü—è—Ç–Ω–∏—Ü–∞"):
                print("üìä –î–∞–Ω–Ω—ã–µ –∑–∞ –ø—è—Ç–Ω–∏—Ü—É —É–∂–µ –±—ã–ª–∏ —Å–æ–±—Ä–∞–Ω—ã —Å–µ–≥–æ–¥–Ω—è")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–ø—Ä–æ—Å –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
            if not self._poll_exists():
                print("‚ùå –û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω - –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
                return False
            
            return True
        
        return False
    
    def _was_data_collected_today(self, day_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–∏ –ª–∏ —É–∂–µ —Å–æ–±—Ä–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–µ–Ω—å —Å–µ–≥–æ–¥–Ω—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
            if not os.path.exists('training_data_collection_log.json'):
                print(f"üìÑ –§–∞–π–ª training_data_collection_log.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = os.path.getsize('training_data_collection_log.json')
            if file_size == 0:
                print(f"üìÑ –§–∞–π–ª training_data_collection_log.json –ø—É—Å—Ç–æ–π")
                return False
            
            with open('training_data_collection_log.json', 'r', encoding='utf-8') as f:
                collection_log = json.load(f)
            
            today = self.get_moscow_time().date().isoformat()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –æ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            for entry in collection_log.get('collections', []):
                if (entry.get('date') == today and 
                    entry.get('day_name') == day_name):
                    print(f"üìä –î–∞–Ω–Ω—ã–µ –∑–∞ {day_name} —É–∂–µ —Å–æ–±—Ä–∞–Ω—ã —Å–µ–≥–æ–¥–Ω—è: {entry.get('time', '')}")
                    return True
            
            return False
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def _log_data_collection(self, day_name: str):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–æ–≥ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            if os.path.exists('training_data_collection_log.json'):
                with open('training_data_collection_log.json', 'r', encoding='utf-8') as f:
                    collection_log = json.load(f)
            else:
                collection_log = {'collections': []}
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            now = self.get_moscow_time()
            new_entry = {
                'date': now.date().isoformat(),
                'time': now.strftime('%H:%M:%S'),
                'day_name': day_name,
                'timestamp': now.isoformat()
            }
            
            collection_log['collections'].append(new_entry)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥
            with open('training_data_collection_log.json', 'w', encoding='utf-8') as f:
                json.dump(collection_log, f, ensure_ascii=False, indent=2)
            
            print(f"üìù –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞ {day_name} –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def find_player_by_telegram_id(self, telegram_id: str) -> Optional[Dict]:
        """–ò—â–µ—Ç –∏–≥—Ä–æ–∫–∞ –ø–æ Telegram ID –≤ –ª–∏—Å—Ç–µ '–ò–≥—Ä–æ–∫–∏'"""
        if not self.spreadsheet:
            return None
        
        try:
            worksheet = self.spreadsheet.worksheet("–ò–≥—Ä–æ–∫–∏")
            all_values = worksheet.get_all_values()
            
            if len(all_values) <= 1:
                return None
            
            headers = all_values[0]
            
            # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫—É —Å Telegram ID
            telegram_id_col = None
            for i, header in enumerate(headers):
                if 'telegram' in header.lower() or 'id' in header.lower():
                    telegram_id_col = i
                    break
            
            if telegram_id_col is None:
                return None
            
            # –ò—â–µ–º –∏–≥—Ä–æ–∫–∞
            for row in all_values[1:]:
                if len(row) > telegram_id_col:
                    cell_value = row[telegram_id_col].strip()
                    
                    if (cell_value == telegram_id or 
                        cell_value == f"@{telegram_id}" or 
                        cell_value == f"@{telegram_id.replace('@', '')}" or
                        cell_value == telegram_id.replace('@', '')):
                        
                        return {
                            'data': row,
                            'headers': headers
                        }
            
            return None
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–∞: {e}")
            return None
    
    def get_player_full_name(self, player_data: Dict) -> Tuple[str, str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è –∏–≥—Ä–æ–∫–∞"""
        if not player_data:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π", "–∏–≥—Ä–æ–∫"
        
        headers = player_data['headers']
        data = player_data['data']
        
        # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å —Ñ–∞–º–∏–ª–∏–µ–π –∏ –∏–º–µ–Ω–µ–º
        surname_col = None
        name_col = None
        
        for i, header in enumerate(headers):
            header_lower = header.lower()
            if '—Ñ–∞–º–∏–ª–∏—è' in header_lower:
                surname_col = i
            elif '–∏–º—è' in header_lower:
                name_col = i
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è
        surname = ""
        name = ""
        
        if surname_col is not None and len(data) > surname_col:
            surname = data[surname_col].strip()
        
        if name_col is not None and len(data) > name_col:
            name = data[name_col].strip()
        
        return surname, name

    def format_player_name(self, user_name: str, telegram_id: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–º—è –∏–≥—Ä–æ–∫–∞ —Å —É—á–µ—Ç–æ–º –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã"""
        # –£–±–∏—Ä–∞–µ–º @ –∏–∑ telegram_id –¥–ª—è –ø–æ–∏—Å–∫–∞
        clean_telegram_id = telegram_id.replace('@', '')
        
        # –ò—â–µ–º –∏–≥—Ä–æ–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ
        player_data = self.find_player_by_telegram_id(clean_telegram_id)
        
        if player_data:
            surname, name = self.get_player_full_name(player_data)
            if surname and name:
                return f"{surname} {name}"
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º—è –∏ telegram_id
        return f"{user_name} ({telegram_id})"
    
    def _get_or_create_training_worksheet(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –ª–∏—Å—Ç '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏'"""
        if not self.spreadsheet:
            print("‚ùå Google Sheets –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            return None
            
        try:
            worksheet = self.spreadsheet.worksheet("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
            print("‚úÖ –õ–∏—Å—Ç '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏' –Ω–∞–π–¥–µ–Ω")
            return worksheet
        except gspread.WorksheetNotFound:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–∏—Å—Ç —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
            worksheet = self.spreadsheet.add_worksheet(title="–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", rows=1000, cols=10)
            print("‚úÖ –õ–∏—Å—Ç '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏' —Å–æ–∑–¥–∞–Ω")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
            headers = [
                "–î–∞—Ç–∞", 
                "ID", 
                "–§–∞–º–∏–ª–∏—è", 
                "–ò–º—è", 
                "Telegram ID"
            ]
            worksheet.append_row(headers)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            worksheet.format('A1:E1', {
                'backgroundColor': {'red': 0.2, 'green': 0.6, 'blue': 0.8},
                'textFormat': {'bold': True, 'foregroundColor': {'red': 1, 'green': 1, 'blue': 1}}
            })
            
            return worksheet

    def _check_existing_poll(self, tuesday_date: datetime.date, friday_date: datetime.date) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –æ–ø—Ä–æ—Å –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –¥–∞—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
        try:
            worksheet = self._get_or_create_training_worksheet()
            if not worksheet:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–∏—Å—Ç '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏'")
                return False
                
            all_values = worksheet.get_all_values()
            
            if len(all_values) <= 1:  # –¢–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                return False
            
            # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–ø—Ä–æ—Å—ã —Å —Ç–µ–º–∏ –∂–µ –¥–∞—Ç–∞–º–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
            for row in all_values[1:]:
                if len(row) >= 3:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–ª–æ–Ω–æ–∫
                    poll_date_str = row[0]  # –î–∞—Ç–∞ –æ–ø—Ä–æ—Å–∞
                    training_date_str = row[2]  # –î–∞—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –¥–∞—Ç—É
                    if not training_date_str or not training_date_str.strip():
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–∞—Ç–∞ (—Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ—á–∫–∏ –∏–ª–∏ –¥–µ—Ñ–∏—Å—ã)
                    if not ('.' in training_date_str or '-' in training_date_str):
                        continue
                    
                    try:
                        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
                        if '.' in training_date_str:
                            training_date = datetime.datetime.strptime(training_date_str, '%d.%m.%Y').date()
                        else:
                            training_date = datetime.datetime.strptime(training_date_str, '%Y-%m-%d').date()
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –¥–∞—Ç–∞ —Å –Ω–∞—à–∏–º–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏
                        if training_date in [tuesday_date, friday_date]:
                            print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–ø—Ä–æ—Å –¥–ª—è –¥–∞—Ç—ã {training_date_str}")
                            return True
                    except Exception as e:
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –¥–∞—Ç–∞–º–∏
                        continue
            
            return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ–ø—Ä–æ—Å–æ–≤: {e}")
            return False

    def get_next_tuesday_date(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—Ç–æ—Ä–Ω–∏–∫–∞"""
        now = self.get_moscow_time()
        days_ahead = 1 - now.weekday()  # 1 = –≤—Ç–æ—Ä–Ω–∏–∫
        if days_ahead <= 0:  # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –≤—Ç–æ—Ä–Ω–∏–∫ –∏–ª–∏ –ø–æ–∑–∂–µ
            days_ahead += 7
        next_tuesday = now + datetime.timedelta(days=days_ahead)
        return next_tuesday.date()
    
    def get_next_thursday_date(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–µ—Ç–≤–µ—Ä–≥–∞"""
        now = self.get_moscow_time()
        days_ahead = 3 - now.weekday()  # 3 = —á–µ—Ç–≤–µ—Ä–≥
        if days_ahead <= 0:  # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è —á–µ—Ç–≤–µ—Ä–≥ –∏–ª–∏ –ø–æ–∑–∂–µ
            days_ahead += 7
        next_thursday = now + datetime.timedelta(days=days_ahead)
        return next_thursday.date()
    
    def get_next_friday_date(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–π –ø—è—Ç–Ω–∏—Ü—ã"""
        now = self.get_moscow_time()
        days_ahead = 4 - now.weekday()  # 4 = –ø—è—Ç–Ω–∏—Ü–∞
        if days_ahead <= 0:  # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –ø—è—Ç–Ω–∏—Ü–∞ –∏–ª–∏ –ø–æ–∑–∂–µ
            days_ahead += 7
        next_friday = now + datetime.timedelta(days=days_ahead)
        return next_friday.date()
    
    def get_training_locations(self, week_start_date):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–µ—Å—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è –Ω–µ–¥–µ–ª–∏"""
        # –ï–¥–∏–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: –î–∏–Ω–∞–º–æ + –°–®–û–† –í–û
        return {
            'tuesday': {'time': '21:30', 'location': '–∑–∞–ª –î–∏–Ω–∞–º–æ (–ö—Ä–µ—Å—Ç–æ–≤—Å–∫–∏–π –æ—Å—Ç—Ä–æ–≤)'},
            'friday': {'time': '20:30', 'location': '–∑–∞–ª –°–®–û–† –í–û'}
        }
    
    def get_moscow_time(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ"""
        return get_moscow_time()

    def _create_training_structure(self, tuesday_date: datetime.date, friday_date: datetime.date, poll_id: str):
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –≤ –ª–∏—Å—Ç–µ '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏'"""
        try:
            worksheet = self._get_or_create_training_worksheet()
            if not worksheet:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–∏—Å—Ç '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏'")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞
            now = self.get_moscow_time()
            poll_creation_date = now.strftime('%d.%m.%Y')
            
            # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä–æ–∫—É –æ–ø—Ä–æ—Å–∞
            main_row_data = [
                poll_creation_date,  # –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞
                poll_id,             # ID –æ–ø—Ä–æ—Å–∞
                "",                  # –§–∞–º–∏–ª–∏—è (–ø—É—Å—Ç–∞—è)
                "",                  # –ò–º—è (–ø—É—Å—Ç–∞—è)
                ""                   # Telegram ID (–ø—É—Å—Ç–æ–π)
            ]
            worksheet.append_row(main_row_data)
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –≤—Ç–æ—Ä–Ω–∏–∫–∞
            tuesday_header = [
                tuesday_date.strftime('%d.%m.%Y'),  # –î–∞—Ç–∞ –≤—Ç–æ—Ä–Ω–∏–∫–∞ —Å –≥–æ–¥–æ–º
                "–í—Ç–æ—Ä–Ω–∏–∫",                       # ID —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
                "",                              # –§–∞–º–∏–ª–∏—è (–ø—É—Å—Ç–∞—è)
                "",                              # –ò–º—è (–ø—É—Å—Ç–∞—è)
                ""                               # Telegram ID (–ø—É—Å—Ç–æ–π)
            ]
            worksheet.append_row(tuesday_header)
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—è—Ç–Ω–∏—Ü—ã
            friday_header = [
                friday_date.strftime('%d.%m.%Y'),   # –î–∞—Ç–∞ –ø—è—Ç–Ω–∏—Ü—ã —Å –≥–æ–¥–æ–º
                "–ü—è—Ç–Ω–∏—Ü–∞",                       # ID —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
                "",                              # –§–∞–º–∏–ª–∏—è (–ø—É—Å—Ç–∞—è)
                "",                              # –ò–º—è (–ø—É—Å—Ç–∞—è)
                ""                               # Telegram ID (–ø—É—Å—Ç–æ–π)
            ]
            worksheet.append_row(friday_header)
            
            print(f"‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ –≤ –ª–∏—Å—Ç–µ '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏'")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

    async def collect_poll_data(self, target_day: str):
        """–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å–∞ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–µ–Ω—å"""
        if not self.bot:
            print("‚ùå –ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø—Ä–æ—Å–µ –∏–∑ Google Sheets
        if not self.spreadsheet:
            print("‚ùå Google Sheets –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            return False
        
        try:
            worksheet = self.spreadsheet.worksheet("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
        except gspread.WorksheetNotFound:
            print("‚ùå –õ–∏—Å—Ç '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        all_values = worksheet.get_all_values()
        
        if len(all_values) <= 1:
            print("üìÑ –õ–∏—Å—Ç '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏' –ø—É—Å—Ç–æ–π")
            return False
        
        # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø—Ä–æ—Å—ã
        active_polls = []
        for i, row in enumerate(all_values):
            if len(row) > 1 and row[1] and len(row[1]) > 10 and row[1] not in ["–í—Ç–æ—Ä–Ω–∏–∫", "–ü—è—Ç–Ω–∏—Ü–∞"]:
                active_polls.append({
                    'poll_id': row[1],
                    'date': row[0],
                    'row': i + 1
                })
        
        if not active_polls:
            print("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ Google Sheets")
            return False
            
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–ø—Ä–æ—Å
        latest_poll = active_polls[-1]
        poll_info = {
            'poll_id': latest_poll['poll_id'],
            'date': latest_poll['date']
        }
        
        print(f"üìä –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞ {target_day}")
        print(f"üìä ID –æ–ø—Ä–æ—Å–∞: {poll_info['poll_id']}")
        print(f"üìä –î–∞—Ç–∞ –æ–ø—Ä–æ—Å–∞: {poll_info['date']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        if not self.bot:
            print("‚ùå –ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
            
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ API
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø—Ä–æ—Å–µ
            if CHAT_ID:
                poll_info_api = await self.bot.get_chat(chat_id=int(CHAT_ID))
                print(f"üìä –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ: {poll_info_api.id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞ —Å –±–æ–ª—å—à–∏–º –ª–∏–º–∏—Ç–æ–º –∏ offset
            all_updates = []
            offset = 0
            limit = 100
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ü–∏—è–º–∏
            for attempt in range(10):  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 10 –ø–æ–ø—ã—Ç–æ–∫
                try:
                    updates_batch = await self.bot.get_updates(limit=limit, offset=offset, timeout=10)
                    if not updates_batch:
                        break
                    
                    all_updates.extend(updates_batch)
                    offset = updates_batch[-1].update_id + 1
                    print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(updates_batch)} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
                    
                    # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ —á–µ–º –ª–∏–º–∏—Ç, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ—Ä—Ü–∏—è
                    if len(updates_batch) < limit:
                        break
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                    break
            
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –º–∞–ª–æ –≥–æ–ª–æ—Å–æ–≤, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º offset
            if len(all_updates) < 100:
                print("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–æ –º–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª–µ–µ —Å—Ç–∞—Ä—ã–µ...")
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º offset (–±–æ–ª–µ–µ —Å—Ç–∞—Ä—ã–µ)
                    for offset_val in [-200, -400, -600, -800, -1000]:
                        older_updates = await self.bot.get_updates(limit=200, offset=offset_val, timeout=10)
                        if older_updates:
                            all_updates.extend(older_updates)
                            print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ {len(older_updates)} —Å—Ç–∞—Ä—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (offset {offset_val})")
                        else:
                            break
                except Exception as e:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            
            updates = all_updates
            print(f"üìä –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ {len(updates)} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
            updates = []
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ Google —Ç–∞–±–ª–∏—Ü—ã
        existing_tuesday_voters = set()
        existing_friday_voters = set()
        
        try:
            worksheet = self.spreadsheet.worksheet("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
            all_values = worksheet.get_all_values()
            
            # –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Å–æ–±–∏—Ä–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            for i, row in enumerate(all_values):
                if len(row) > 0 and row[0]:  # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞—Ç–∞
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤—Ç–æ—Ä–Ω–∏–∫–∞ –∏–ª–∏ –ø—è—Ç–Ω–∏—Ü—ã
                    if len(row) > 1 and row[1] == "–í—Ç–æ—Ä–Ω–∏–∫":
                        # –°–æ–±–∏—Ä–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤—Ç–æ—Ä–Ω–∏–∫–∞ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                        j = i + 1
                        while j < len(all_values) and all_values[j][1] != "–ü—è—Ç–Ω–∏—Ü–∞" and all_values[j][1] != "–í—Ç–æ—Ä–Ω–∏–∫":
                            if len(all_values[j]) > 3 and all_values[j][2] and all_values[j][3]:  # –ï—Å—Ç—å –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è
                                name = all_values[j][3]  # –ò–º—è
                                surname = all_values[j][2]  # –§–∞–º–∏–ª–∏—è
                                existing_tuesday_voters.add(f"{name} {surname}")
                            j += 1
                    elif len(row) > 1 and row[1] == "–ü—è—Ç–Ω–∏—Ü–∞":
                        # –°–æ–±–∏—Ä–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—è—Ç–Ω–∏—Ü—ã –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                        j = i + 1
                        while j < len(all_values) and all_values[j][1] != "–í—Ç–æ—Ä–Ω–∏–∫" and all_values[j][1] != "–ü—è—Ç–Ω–∏—Ü–∞":
                            if len(all_values[j]) > 3 and all_values[j][2] and all_values[j][3]:  # –ï—Å—Ç—å –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è
                                name = all_values[j][3]  # –ò–º—è
                                surname = all_values[j][2]  # –§–∞–º–∏–ª–∏—è
                                existing_friday_voters.add(f"{name} {surname}")
                            j += 1
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤—Ç–æ—Ä–Ω–∏–∫–∞: {len(existing_tuesday_voters)}")
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—è—Ç–Ω–∏—Ü—ã: {len(existing_friday_voters)}")
            if existing_tuesday_voters:
                print(f"üìä –£—á–∞—Å—Ç–Ω–∏–∫–∏ –≤—Ç–æ—Ä–Ω–∏–∫–∞: {', '.join(list(existing_tuesday_voters)[:5])}{'...' if len(existing_tuesday_voters) > 5 else ''}")
            if existing_friday_voters:
                print(f"üìä –£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—è—Ç–Ω–∏—Ü—ã: {', '.join(list(existing_friday_voters)[:5])}{'...' if len(existing_friday_voters) > 5 else ''}")
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–∞
        tuesday_voters = []
        friday_voters = []
        trainer_voters = []
        no_voters = []
        
        poll_answers_found = 0
        total_poll_answers = 0
        user_votes = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≥–æ–ª–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
        print(f"üîç –ê–Ω–∞–ª–∏–∑ {len(updates)} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
        
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≥–æ–ª–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for update in updates:
            if update.poll_answer:
                total_poll_answers += 1
                poll_answer = update.poll_answer
                user = update.effective_user
                
                print(f"üîç –ù–∞–π–¥–µ–Ω –≥–æ–ª–æ—Å –≤ –æ–ø—Ä–æ—Å–µ {poll_answer.poll_id} (–∏—â–µ–º {poll_info['poll_id']})")
                
                if poll_answer.poll_id == poll_info['poll_id']:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–ª–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π)
                    user_votes[user.id] = {
                        'user': user,
                        'option_ids': poll_answer.option_ids,
                        'update_id': update.update_id
                    }
                    print(f"üìä –ì–æ–ª–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: –≤–∞—Ä–∏–∞–Ω—Ç—ã {poll_answer.option_ids}")
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(user_votes)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≥–æ–ª–æ—Å–∞–º–∏")
        
        # –¢–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≥–æ–ª–æ—Å–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for user_id, vote_data in user_votes.items():
            poll_answers_found += 1
            user = vote_data['user']
            option_ids = vote_data['option_ids']
            
            user_name = f"{user.first_name} {user.last_name or ''}".strip()
            telegram_id = user.username or "–±–µ–∑_username"
            if telegram_id != "–±–µ–∑_username":
                telegram_id = f"@{telegram_id}"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–º—è –∏–≥—Ä–æ–∫–∞
            formatted_name = self.format_player_name(user_name, telegram_id)
            
            print(f"üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å: {formatted_name} -> –≤–∞—Ä–∏–∞–Ω—Ç—ã {option_ids}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ Google —Ç–∞–±–ª–∏—Ü–µ
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –¥–Ω—è–º —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            if 0 in option_ids:  # –í—Ç–æ—Ä–Ω–∏–∫
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ –¥–ª—è –≤—Ç–æ—Ä–Ω–∏–∫–∞
                name_parts = formatted_name.split()
                if len(name_parts) >= 2:
                    table_name = f"{name_parts[0]} {name_parts[-1]}"  # –ò–º—è –§–∞–º–∏–ª–∏—è
                    if table_name not in existing_tuesday_voters:
                        tuesday_voters.append(formatted_name)
                        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫ –≤—Ç–æ—Ä–Ω–∏–∫–∞: {formatted_name}")
                    else:
                        print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç –≤—Ç–æ—Ä–Ω–∏–∫–∞: {formatted_name} (—É–∂–µ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ)")
                else:
                    tuesday_voters.append(formatted_name)
                    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫ –≤—Ç–æ—Ä–Ω–∏–∫–∞: {formatted_name}")
            
            if 1 in option_ids:  # –ü—è—Ç–Ω–∏—Ü–∞
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ –¥–ª—è –ø—è—Ç–Ω–∏—Ü—ã
                name_parts = formatted_name.split()
                if len(name_parts) >= 2:
                    table_name = f"{name_parts[0]} {name_parts[-1]}"  # –ò–º—è –§–∞–º–∏–ª–∏—è
                    if table_name not in existing_friday_voters:
                        friday_voters.append(formatted_name)
                        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫ –ø—è—Ç–Ω–∏—Ü—ã: {formatted_name}")
                    else:
                        print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç –ø—è—Ç–Ω–∏—Ü—ã: {formatted_name} (—É–∂–µ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ)")
                else:
                    friday_voters.append(formatted_name)
                    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫ –ø—è—Ç–Ω–∏—Ü—ã: {formatted_name}")
            
            if 2 in option_ids:  # –¢—Ä–µ–Ω–µ—Ä
                trainer_voters.append(formatted_name)
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ç—Ä–µ–Ω–µ—Ä: {formatted_name}")
            
            if 3 in option_ids:  # –ù–µ—Ç
                no_voters.append(formatted_name)
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω '–ù–µ—Ç': {formatted_name}")
        
        print(f"üìä –í—Å–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö: {total_poll_answers}")
        print(f"üìä –ì–æ–ª–æ—Å–æ–≤ –¥–ª—è –Ω—É–∂–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞: {poll_answers_found}")
        
        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –º–∞–ª–æ –≥–æ–ª–æ—Å–æ–≤, –≤—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        if poll_answers_found < 5:  # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –º–µ–Ω—å—à–µ 5 –≥–æ–ª–æ—Å–æ–≤
            print("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –º–∞–ª–æ –≥–æ–ª–æ—Å–æ–≤, –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å get_updates")
            print("‚ö†Ô∏è –†–ï–®–ï–ù–ò–ï: –£–≤–µ–ª–∏—á–∏–ª–∏ –ª–∏–º–∏—Ç get_updates –¥–æ 1000 –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
            print("‚ö†Ô∏è –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –≤–æ–∑–º–æ–∂–Ω–æ –≥–æ–ª–æ—Å–∞ –±—ã–ª–∏ —Å–¥–µ–ª–∞–Ω—ã –¥–∞–≤–Ω–æ")
            print("‚ö†Ô∏è –í–ê–ñ–ù–û: Telegram API –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å")
            print("‚ö†Ô∏è –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –°–æ–±–∏—Ä–∞–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å–∞ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è")
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {poll_answers_found} –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è –æ–ø—Ä–æ—Å–∞ {poll_info['poll_id']}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.poll_results = {
            'poll_id': poll_info['poll_id'],
            'tuesday_voters': tuesday_voters,
            'friday_voters': friday_voters,
            'trainer_voters': trainer_voters,
            'no_voters': no_voters,
            'timestamp': self.get_moscow_time().isoformat()
        }
        
        with open('poll_results.json', 'w', encoding='utf-8') as f:
            json.dump(self.poll_results, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã:")
        print(f"   –í—Ç–æ—Ä–Ω–∏–∫: {len(tuesday_voters)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        print(f"   –ü—è—Ç–Ω–∏—Ü–∞: {len(friday_voters)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        print(f"   –¢—Ä–µ–Ω–µ—Ä: {len(trainer_voters)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        print(f"   –ù–µ—Ç: {len(no_voters)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
        try:
            if hasattr(self, '_log_data_collection'):
                self._log_data_collection(target_day)
            else:
                print("‚ö†Ô∏è –ú–µ—Ç–æ–¥ _log_data_collection –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets
        try:
            if target_day.upper() == "–í–¢–û–†–ù–ò–ö" and tuesday_voters:
                print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—Ç–æ—Ä–Ω–∏–∫ –≤ Google Sheets...")
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                voters_for_sheet = []
                for voter_name in tuesday_voters:
                    # –ü–∞—Ä—Å–∏–º –∏–º—è –∏–∑ —Å—Ç—Ä–æ–∫–∏ "–ò–º—è –§–∞–º–∏–ª–∏—è" (–±–µ–∑ username)
                    name_parts = voter_name.split()
                    if len(name_parts) >= 2:
                        surname = name_parts[-1]  # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å - —Ñ–∞–º–∏–ª–∏—è
                        name = ' '.join(name_parts[:-1])  # –û—Å—Ç–∞–ª—å–Ω–æ–µ - –∏–º—è
                    else:
                        surname = name_parts[0] if name_parts else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
                        name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
                    
                    # –î–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∫–∞–∫ telegram_id
                    telegram_id = voter_name
                    
                    voters_for_sheet.append({
                        'surname': surname,
                        'name': name,
                        'telegram_id': telegram_id
                    })
                
                if voters_for_sheet:
                    self._save_voters_to_sheet("–í–¢–û–†–ù–ò–ö", voters_for_sheet, poll_info['poll_id'])
                else:
                    print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞ –≤—Ç–æ—Ä–Ω–∏–∫")
            
            elif target_day.upper() == "–ü–Ø–¢–ù–ò–¶–ê" and friday_voters:
                print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø—è—Ç–Ω–∏—Ü—É –≤ Google Sheets...")
                # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø—è—Ç–Ω–∏—Ü—ã
                voters_for_sheet = []
                for voter_name in friday_voters:
                    # –ü–∞—Ä—Å–∏–º –∏–º—è –∏–∑ —Å—Ç—Ä–æ–∫–∏ "–ò–º—è –§–∞–º–∏–ª–∏—è" (–±–µ–∑ username)
                    name_parts = voter_name.split()
                    if len(name_parts) >= 2:
                        surname = name_parts[-1]
                        name = ' '.join(name_parts[:-1])
                    else:
                        surname = name_parts[0] if name_parts else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
                        name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
                    
                    # –î–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∫–∞–∫ telegram_id
                    telegram_id = voter_name
                    
                    voters_for_sheet.append({
                        'surname': surname,
                        'name': name,
                        'telegram_id': telegram_id
                    })
                
                if voters_for_sheet:
                    self._save_voters_to_sheet("–ü–Ø–¢–ù–ò–¶–ê", voters_for_sheet, poll_info['poll_id'])
                else:
                    print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞ –ø—è—Ç–Ω–∏—Ü—É")
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets: {e}")
        
        return True

    def _save_voters_to_sheet(self, target_day: str, voters: List[Dict], poll_id: str) -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ Google Sheet —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π"""
        try:
            worksheet = self._get_or_create_training_worksheet()
            if not worksheet:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–∏—Å—Ç '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏'")
                return False
            
            print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {target_day}...")
            print(f"üîç –¢–∏–ø voters: {type(voters)}")
            print(f"üîç –°–æ–¥–µ—Ä–∂–∏–º–æ–µ voters: {voters}")
            
            if not isinstance(voters, list):
                print(f"‚ùå voters –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º: {type(voters)}")
                return False
            
            print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {len(voters)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è {target_day}...")
            
            # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –¥–Ω—è
            all_values = worksheet.get_all_values()
            target_day_upper = target_day.upper()
            
            # –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–Ω—è (–í—Ç–æ—Ä–Ω–∏–∫ –∏–ª–∏ –ü—è—Ç–Ω–∏—Ü–∞) –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –æ–ø—Ä–æ—Å–∞
            day_header_row = None
            poll_id = str(poll_id)
            
            # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Å—Ç—Ä–æ–∫—É —Å ID –æ–ø—Ä–æ—Å–∞
            poll_row = None
            for i, row in enumerate(all_values):
                if len(row) > 1 and row[1] == poll_id:
                    poll_row = i + 1
                    break
            
            if poll_row is None:
                print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –æ–ø—Ä–æ—Å —Å ID {poll_id}")
                return False
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω –æ–ø—Ä–æ—Å –≤ —Å—Ç—Ä–æ–∫–µ {poll_row}")
            
            # –¢–µ–ø–µ—Ä—å –∏—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–Ω—è –ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ –æ–ø—Ä–æ—Å–∞
            print(f"üîç –ü–æ–∏—Å–∫ –∑–∞–≥–æ–ª–æ–≤–∫–∞ {target_day_upper} –ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ {poll_row}...")
            for i in range(poll_row, len(all_values)):
                row_data = all_values[i]
                print(f"   –°—Ç—Ä–æ–∫–∞ {i+1}: {row_data}")
                if len(row_data) > 1 and row_data[1].upper() == target_day_upper:
                    day_header_row = i + 1  # +1 –ø–æ—Ç–æ–º—É —á—Ç–æ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –≤ Google Sheets –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ {target_day_upper} –≤ —Å—Ç—Ä–æ–∫–µ {day_header_row}")
                    break
            
            if day_header_row is None:
                print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –¥–Ω—è {target_day_upper} –ø–æ—Å–ª–µ –æ–ø—Ä–æ—Å–∞ {poll_id}")
                return False
            
            # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–Ω—è
            next_day_row = None
            for i in range(day_header_row, len(all_values)):
                if len(all_values[i]) > 1 and all_values[i][1] in ["–í—Ç–æ—Ä–Ω–∏–∫", "–ü—è—Ç–Ω–∏—Ü–∞"]:
                    next_day_row = i + 1
                    break
            
            if next_day_row is None:
                # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å, –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É
                next_day_row = len(all_values) + 1
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–Ω—è
            insert_row = day_header_row + 1
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
            rows_to_insert = []
            for voter in voters:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
                surname = voter.get('surname', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
                name = voter.get('name', '–∏–≥—Ä–æ–∫')
                telegram_id = voter.get('telegram_id', '–±–µ–∑_username')
                
                # –§–æ—Ä–º–∞—Ç: ["", "", "–§–∞–º–∏–ª–∏—è", "–ò–º—è", "Telegram ID"]
                row_data = ["", "", surname, name, telegram_id]
                rows_to_insert.append(row_data)
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å—Ä–∞–∑—É
            if rows_to_insert:
                try:
                    print(f"üîß –í—Å—Ç–∞–≤–∫–∞ {len(rows_to_insert)} —Å—Ç—Ä–æ–∫ –Ω–∞—á–∏–Ω–∞—è —Å –ø–æ–∑–∏—Ü–∏–∏ {insert_row}")
                    
                    # –í—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –ø–æ –æ–¥–Ω–æ–π
                    for i, row_data in enumerate(rows_to_insert):
                        worksheet.insert_row(row_data, insert_row + i)
                    
                    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(rows_to_insert)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è {target_day}")
                    
                    # –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É
                    self._create_auto_grouping()
                    
                    return True
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ —Å—Ç—Ä–æ–∫: {e}")
                    return False
            else:
                print(f"‚ö†Ô∏è –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–ª—è {target_day}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è {target_day}: {e}")
            return False

    def _create_auto_grouping(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É —Å—Ç—Ä–æ–∫ –≤ Google Sheet"""
        try:
            if not self.spreadsheet:
                print("‚ö†Ô∏è Google Sheets –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
                return
            
            print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏...")
            
            # –ü–æ–ª—É—á–∞–µ–º –ª–∏—Å—Ç "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"
            worksheet = self._get_or_create_training_worksheet()
            if not worksheet:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–∏—Å—Ç –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            all_values = worksheet.get_all_values()
            if len(all_values) < 7:
                print("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏")
                return
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Å–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É
            self._analyze_and_group_rows(worksheet, all_values)
            
            print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏: {e}")

    def _analyze_and_group_rows(self, worksheet, all_values: List[List[str]]) -> None:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–µ—Ç –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É —Å—Ç—Ä–æ–∫"""
        try:
            # –ù–∞—Ö–æ–¥–∏–º –∫–ª—é—á–µ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
            poll_header_row = None
            tuesday_header_row = None
            friday_header_row = None
            tuesday_end_row = None
            friday_end_row = None
            
            for i, row in enumerate(all_values):
                if len(row) > 1:
                    if row[1] == "–í—Ç–æ—Ä–Ω–∏–∫":
                        tuesday_header_row = i + 1
                    elif row[1] == "–ü—è—Ç–Ω–∏—Ü–∞":
                        friday_header_row = i + 1
                    elif row[1] and row[1] != "–í—Ç–æ—Ä–Ω–∏–∫" and row[1] != "–ü—è—Ç–Ω–∏—Ü–∞" and row[2] and row[3]:
                        # –≠—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫
                        if tuesday_header_row and not tuesday_end_row:
                            tuesday_end_row = i + 1
                        elif friday_header_row and not friday_end_row:
                            friday_end_row = i + 1
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω–µ—Ü –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–Ω—è
            if tuesday_header_row and not tuesday_end_row:
                tuesday_end_row = len(all_values)
            if friday_header_row and not friday_end_row:
                friday_end_row = len(all_values)
            
            print(f"üìã –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:")
            print(f"   –í—Ç–æ—Ä–Ω–∏–∫: —Å—Ç—Ä–æ–∫–∏ {tuesday_header_row}-{tuesday_end_row}")
            print(f"   –ü—è—Ç–Ω–∏—Ü–∞: —Å—Ç—Ä–æ–∫–∏ {friday_header_row}-{friday_end_row}")
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É —á–µ—Ä–µ–∑ Google Sheets API
            if tuesday_header_row and tuesday_end_row and friday_header_row and friday_end_row:
                self._create_row_grouping_via_api(worksheet, tuesday_header_row, tuesday_end_row, friday_header_row, friday_end_row)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")

    def _create_row_grouping_via_api(self, worksheet, tuesday_start: int, tuesday_end: int, friday_start: int, friday_end: int) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É —Å—Ç—Ä–æ–∫ —á–µ—Ä–µ–∑ Google Sheets API"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º batch_update –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
            requests = []
            
            # 1. –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤—Ç–æ—Ä–Ω–∏–∫–∞
            if tuesday_start and tuesday_end and tuesday_end > tuesday_start:
                participants_range = f"{tuesday_start + 1}:{tuesday_end}"
                requests.append({
                    "autoResizeDimensions": {
                        "dimensions": {
                            "sheetId": worksheet.id,
                            "dimension": "ROWS",
                            "startIndex": tuesday_start,
                            "endIndex": tuesday_end
                        }
                    }
                })
            
            # 2. –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—è—Ç–Ω–∏—Ü—ã
            if friday_start and friday_end and friday_end > friday_start:
                participants_range = f"{friday_start + 1}:{friday_end}"
                requests.append({
                    "autoResizeDimensions": {
                        "dimensions": {
                            "sheetId": worksheet.id,
                            "dimension": "ROWS",
                            "startIndex": friday_start,
                            "endIndex": friday_end
                        }
                    }
                })
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É
            if requests and self.spreadsheet:
                self.spreadsheet.batch_update({"requests": requests})
                print("‚úÖ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ API")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —á–µ—Ä–µ–∑ API: {e}")
            # Fallback: —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É
            self._create_simple_grouping(worksheet, tuesday_start, tuesday_end, friday_start, friday_end)

    def _create_simple_grouping(self, worksheet, tuesday_start: int, tuesday_end: int, friday_start: int, friday_end: int) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç—É—é –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∞–º–∏"""
        try:
            # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É –¥–ª—è –≤—Ç–æ—Ä–Ω–∏–∫–∞
            if tuesday_start and tuesday_end and tuesday_end > tuesday_start:
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –≤—Ç–æ—Ä–Ω–∏–∫–∞
                for row_num in range(tuesday_start + 1, tuesday_end + 1):
                    try:
                        # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É –Ω–∞ —É—Ä–æ–≤–Ω–µ 1
                        worksheet.batch_update([{
                            "range": f"A{row_num}",
                            "values": [["", "", "", "", ""]]  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
                        }])
                    except Exception as e:
                        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É {row_num}: {e}")
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É –¥–ª—è –ø—è—Ç–Ω–∏—Ü—ã
            if friday_start and friday_end and friday_end > friday_start:
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –ø—è—Ç–Ω–∏—Ü—ã
                for row_num in range(friday_start + 1, friday_end + 1):
                    try:
                        # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É –Ω–∞ —É—Ä–æ–≤–Ω–µ 1
                        worksheet.batch_update([{
                            "range": f"A{row_num}",
                            "values": [["", "", "", "", ""]]  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
                        }])
                    except Exception as e:
                        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É {row_num}: {e}")
            
            print("‚úÖ –ü—Ä–æ—Å—Ç–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏: {e}")
    
    def _poll_exists(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –æ–ø—Ä–æ—Å –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if not self.spreadsheet:
                print("‚ùå Google Sheets –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –ª–∏—Å—Ç '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏'
            try:
                worksheet = self.spreadsheet.worksheet("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
            except gspread.WorksheetNotFound:
                print("‚ùå –õ–∏—Å—Ç '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            all_values = worksheet.get_all_values()
            
            if len(all_values) <= 1:
                print("üìÑ –õ–∏—Å—Ç '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏' –ø—É—Å—Ç–æ–π")
                return False
            
            # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø—Ä–æ—Å—ã (—Å—Ç—Ä–æ–∫–∏ —Å –¥–ª–∏–Ω–Ω—ã–º ID –≤ –∫–æ–ª–æ–Ω–∫–µ 1)
            active_polls = []
            for i, row in enumerate(all_values):
                if len(row) > 1 and row[1] and len(row[1]) > 10 and row[1] not in ["–í—Ç–æ—Ä–Ω–∏–∫", "–ü—è—Ç–Ω–∏—Ü–∞"]:
                    active_polls.append({
                        'poll_id': row[1],
                        'date': row[0],
                        'row': i + 1
                    })
            
            if active_polls:
                latest_poll = active_polls[-1]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–ø—Ä–æ—Å
                print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π –æ–ø—Ä–æ—Å –Ω–∞–π–¥–µ–Ω: {latest_poll['poll_id']} (–¥–∞—Ç–∞: {latest_poll['date']})")
                return True
            else:
                print("üìÑ –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ Google Sheets")
                return False
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞: {e}")
            return False
    
    def save_to_training_sheet(self, target_day: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –ª–∏—Å—Ç '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏' —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π"""
        if not self.spreadsheet:
            print("‚ùå Google Sheets –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            return False
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞
            if not os.path.exists('poll_results.json'):
                print("‚ùå –§–∞–π–ª poll_results.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            with open('poll_results.json', 'r', encoding='utf-8') as f:
                poll_results = json.load(f)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø—Ä–æ—Å–µ
            with open('current_poll_info.json', 'r', encoding='utf-8') as f:
                poll_info = json.load(f)
            
            # –ü–æ–ª—É—á–∞–µ–º –ª–∏—Å—Ç "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"
            try:
                worksheet = self.spreadsheet.worksheet("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
                print("‚úÖ –õ–∏—Å—Ç '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏' –Ω–∞–π–¥–µ–Ω")
            except gspread.WorksheetNotFound:
                worksheet = self.spreadsheet.add_worksheet(title="–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", rows=1000, cols=10)
                print("‚úÖ –õ–∏—Å—Ç '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏' —Å–æ–∑–¥–∞–Ω")
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                headers = ["–î–∞—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", "–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", "–£—á–∞—Å—Ç–Ω–∏–∫–∏"]
                worksheet.append_row(headers)
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                worksheet.format('A1:D1', {
                    'backgroundColor': {'red': 0.2, 'green': 0.6, 'blue': 0.8},
                    'textFormat': {'bold': True, 'foregroundColor': {'red': 1, 'green': 1, 'blue': 1}}
                })
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            if target_day == "–í—Ç–æ—Ä–Ω–∏–∫":
                voters = poll_results['tuesday_voters']
                training_date = poll_info['tuesday_date']
            elif target_day == "–ü—è—Ç–Ω–∏—Ü–∞":
                voters = poll_results['friday_voters']
                training_date = poll_info['friday_date']
            else:
                print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–µ–Ω—å: {target_day}")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏
            all_values = worksheet.get_all_values()
            next_row = len(all_values) + 1
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π
            main_row_data = [
                training_date,
                target_day,
                len(voters),
                ""  # –ü—É—Å—Ç–∞—è –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            ]
            worksheet.append_row(main_row_data)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
            for voter in voters:
                participant_row = ["", "", "", voter]
                worksheet.append_row(participant_row)
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É
            if len(voters) > 0:
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
                start_row = next_row + 1
                end_row = next_row + len(voters)
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è API)
                try:
                    worksheet.batch_update([{
                        'range': f'A{start_row}:D{end_row}',
                        'properties': {
                            'hiddenByUser': True
                        }
                    }])
                except:
                    print("‚ö†Ô∏è –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ API")
            
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞ {target_day} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
            print(f"   –î–∞—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {training_date}")
            print(f"   –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(voters)}")
            print(f"   –£—á–∞—Å—Ç–Ω–∏–∫–∏: {', '.join(voters) if voters else '–Ω–µ—Ç'}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Google —Ç–∞–±–ª–∏—Ü—É: {e}")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
training_manager = TrainingPollsManager()

class TableIntegrityGuard:
    """–°—Ç—Ä–∞–∂ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Ç–∞–±–ª–∏—Ü—ã - –∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self, manager: TrainingPollsManager):
        self.manager = manager
        self.worksheet = None
        self.all_values = []
        self.structure_index = {}
    
    def load_table_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            self.worksheet = self.manager._get_or_create_training_worksheet()
            if not self.worksheet:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–∏—Å—Ç '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏'")
                return False
            
            self.all_values = self.worksheet.get_all_values()
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(self.all_values)} —Å—Ç—Ä–æ–∫")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def build_structure_index(self):
        """–°—Ç—Ä–æ–∏—Ç –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã"""
        if not self.all_values:
            print("‚ùå –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            return False
        
        print("üîç –ü–û–°–¢–†–û–ï–ù–ò–ï –ò–ù–î–ï–ö–°–ê –°–¢–†–£–ö–¢–£–†–´:")
        print("=" * 40)
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
        self.structure_index = {
            'polls': {},           # poll_id -> {row, date}
            'tuesday_sections': {}, # date -> {row, poll_id}
            'friday_sections': {},  # date -> {row, poll_id}
            'participants': {}      # day_date_surname_name -> row
        }
        
        current_poll_id = None
        
        for i, row in enumerate(self.all_values):
            if len(row) > 1:
                # –ò—â–µ–º –æ–ø—Ä–æ—Å—ã
                if row[1] and row[1] != "–í—Ç–æ—Ä–Ω–∏–∫" and row[1] != "–ü—è—Ç–Ω–∏—Ü–∞" and len(row[1]) > 10:
                    poll_id = row[1]
                    date = row[0]
                    self.structure_index['polls'][poll_id] = {'row': i + 1, 'date': date}
                    current_poll_id = poll_id
                    print(f"   üìä –û–ø—Ä–æ—Å: {poll_id} (—Å—Ç—Ä–æ–∫–∞ {i+1}, –¥–∞—Ç–∞ {date})")
                
                # –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–Ω–µ–π
                elif row[1] == "–í—Ç–æ—Ä–Ω–∏–∫":
                    date = row[0]
                    self.structure_index['tuesday_sections'][date] = {'row': i + 1, 'poll_id': current_poll_id}
                    print(f"   üèÄ –í—Ç–æ—Ä–Ω–∏–∫: {date} (—Å—Ç—Ä–æ–∫–∞ {i+1}, –æ–ø—Ä–æ—Å {current_poll_id})")
                
                elif row[1] == "–ü—è—Ç–Ω–∏—Ü–∞":
                    date = row[0]
                    self.structure_index['friday_sections'][date] = {'row': i + 1, 'poll_id': current_poll_id}
                    print(f"   üèÄ –ü—è—Ç–Ω–∏—Ü–∞: {date} (—Å—Ç—Ä–æ–∫–∞ {i+1}, –æ–ø—Ä–æ—Å {current_poll_id})")
        
        print(f"‚úÖ –ò–Ω–¥–µ–∫—Å –ø–æ—Å—Ç—Ä–æ–µ–Ω:")
        print(f"   üìä –û–ø—Ä–æ—Å–æ–≤: {len(self.structure_index['polls'])}")
        print(f"   üèÄ –°–µ–∫—Ü–∏–π –≤—Ç–æ—Ä–Ω–∏–∫–∞: {len(self.structure_index['tuesday_sections'])}")
        print(f"   üèÄ –°–µ–∫—Ü–∏–π –ø—è—Ç–Ω–∏—Ü—ã: {len(self.structure_index['friday_sections'])}")
        
        return True
    
    def check_poll_exists(self, poll_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞"""
        if poll_id in self.structure_index['polls']:
            info = self.structure_index['polls'][poll_id]
            print(f"‚ö†Ô∏è –û–ø—Ä–æ—Å {poll_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å—Ç—Ä–æ–∫–µ {info['row']} (–¥–∞—Ç–∞ {info['date']})")
            return True
        return False
    
    def check_section_exists(self, target_day: str, date: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏"""
        if target_day == "–í—Ç–æ—Ä–Ω–∏–∫" and date in self.structure_index['tuesday_sections']:
            info = self.structure_index['tuesday_sections'][date]
            print(f"‚ö†Ô∏è –°–µ–∫—Ü–∏—è –≤—Ç–æ—Ä–Ω–∏–∫–∞ –¥–ª—è {date} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å—Ç—Ä–æ–∫–µ {info['row']}")
            return True
        elif target_day == "–ü—è—Ç–Ω–∏—Ü–∞" and date in self.structure_index['friday_sections']:
            info = self.structure_index['friday_sections'][date]
            print(f"‚ö†Ô∏è –°–µ–∫—Ü–∏—è –ø—è—Ç–Ω–∏—Ü—ã –¥–ª—è {date} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å—Ç—Ä–æ–∫–µ {info['row']}")
            return True
        return False
    
    def check_participant_exists(self, target_day: str, date: str, surname: str, name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        # –ò—â–µ–º —Å–µ–∫—Ü–∏—é
        section_info = None
        if target_day == "–í—Ç–æ—Ä–Ω–∏–∫":
            section_info = self.structure_index['tuesday_sections'].get(date)
        elif target_day == "–ü—è—Ç–Ω–∏—Ü–∞":
            section_info = self.structure_index['friday_sections'].get(date)
        
        if not section_info:
            return False
        
        section_row = section_info['row']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
        for i in range(section_row, len(self.all_values)):
            row = self.all_values[i]
            if len(row) >= 5 and row[2] and row[3]:
                if row[2] == surname and row[3] == name:
                    print(f"‚ö†Ô∏è –£—á–∞—Å—Ç–Ω–∏–∫ {surname} {name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ {target_day} {date} (—Å—Ç—Ä–æ–∫–∞ {i+1})")
                    return True
            elif len(row) > 1 and row[1] in ["–í—Ç–æ—Ä–Ω–∏–∫", "–ü—è—Ç–Ω–∏—Ü–∞"]:
                # –î–æ—Å—Ç–∏–≥–ª–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                break
        
        return False
    
    def safe_add_poll(self, poll_id: str, date: str) -> dict:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç –æ–ø—Ä–æ—Å"""
        print(f"\nüîß –ë–ï–ó–û–ü–ê–°–ù–û–ï –î–û–ë–ê–í–õ–ï–ù–ò–ï –û–ü–†–û–°–ê:")
        print("=" * 40)
        
        result = {
            'success': False,
            'reason': '',
            'action': 'none'
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        if self.check_poll_exists(poll_id):
            result['reason'] = f"–û–ø—Ä–æ—Å {poll_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            result['action'] = 'skip'
            print(f"‚ùå –û–ø—Ä–æ—Å {poll_id} –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω - –¥—É–±–ª–∏–∫–∞—Ç")
            return result
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
        for poll_info in self.structure_index['polls'].values():
            if poll_info['date'] == date:
                result['reason'] = f"–û–ø—Ä–æ—Å –¥–ª—è {date} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
                result['action'] = 'skip'
                print(f"‚ùå –û–ø—Ä–æ—Å –¥–ª—è {date} –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω - –¥–∞—Ç–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return result
        
        result['success'] = True
        result['action'] = 'add'
        print(f"‚úÖ –û–ø—Ä–æ—Å {poll_id} –¥–ª—è {date} –≥–æ—Ç–æ–≤ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é")
        return result
    
    def safe_add_section(self, target_day: str, date: str, poll_id: str) -> dict:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–µ–∫—Ü–∏—é"""
        print(f"\nüîß –ë–ï–ó–û–ü–ê–°–ù–û–ï –î–û–ë–ê–í–õ–ï–ù–ò–ï –°–ï–ö–¶–ò–ò {target_day.upper()}:")
        print("=" * 40)
        
        result = {
            'success': False,
            'reason': '',
            'action': 'none'
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏
        if self.check_section_exists(target_day, date):
            result['reason'] = f"–°–µ–∫—Ü–∏—è {target_day} –¥–ª—è {date} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            result['action'] = 'skip'
            print(f"‚ùå –°–µ–∫—Ü–∏—è {target_day} –¥–ª—è {date} –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ - –¥—É–±–ª–∏–∫–∞—Ç")
            return result
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞
        if poll_id not in self.structure_index['polls']:
            result['reason'] = f"–û–ø—Ä–æ—Å {poll_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            result['action'] = 'error'
            print(f"‚ùå –°–µ–∫—Ü–∏—è {target_day} –¥–ª—è {date} –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ - –æ–ø—Ä–æ—Å {poll_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return result
        
        result['success'] = True
        result['action'] = 'add'
        print(f"‚úÖ –°–µ–∫—Ü–∏—è {target_day} –¥–ª—è {date} (–æ–ø—Ä–æ—Å {poll_id}) –≥–æ—Ç–æ–≤–∞ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é")
        return result
    
    def safe_add_participant(self, target_day: str, date: str, surname: str, name: str, telegram_id: str) -> dict:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        print(f"\nüîß –ë–ï–ó–û–ü–ê–°–ù–û–ï –î–û–ë–ê–í–õ–ï–ù–ò–ï –£–ß–ê–°–¢–ù–ò–ö–ê:")
        print("=" * 40)
        
        result = {
            'success': False,
            'reason': '',
            'action': 'none'
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        if self.check_participant_exists(target_day, date, surname, name):
            result['reason'] = f"–£—á–∞—Å—Ç–Ω–∏–∫ {surname} {name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ {target_day} {date}"
            result['action'] = 'skip'
            print(f"‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ {surname} {name} –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω - –¥—É–±–ª–∏–∫–∞—Ç")
            return result
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏
        section_exists = False
        if target_day == "–í—Ç–æ—Ä–Ω–∏–∫":
            section_exists = date in self.structure_index['tuesday_sections']
        elif target_day == "–ü—è—Ç–Ω–∏—Ü–∞":
            section_exists = date in self.structure_index['friday_sections']
        
        if not section_exists:
            result['reason'] = f"–°–µ–∫—Ü–∏—è {target_day} –¥–ª—è {date} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            result['action'] = 'error'
            print(f"‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ {surname} {name} –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω - —Å–µ–∫—Ü–∏—è {target_day} –¥–ª—è {date} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return result
        
        result['success'] = True
        result['action'] = 'add'
        print(f"‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ {surname} {name} ({telegram_id}) –≥–æ—Ç–æ–≤ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –≤ {target_day} {date}")
        return result
    
    def get_integrity_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏"""
        print(f"\nüìä –û–¢–ß–ï–¢ –û –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –¢–ê–ë–õ–ò–¶–´:")
        print("=" * 50)
        
        issues = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ä–æ—Å—ã
        print(f"üìä –û–ü–†–û–°–´:")
        for poll_id, info in self.structure_index['polls'].items():
            print(f"   ‚úÖ {poll_id} (—Å—Ç—Ä–æ–∫–∞ {info['row']}, –¥–∞—Ç–∞ {info['date']})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ü–∏–∏ –≤—Ç–æ—Ä–Ω–∏–∫–∞
        print(f"\nüèÄ –°–ï–ö–¶–ò–ò –í–¢–û–†–ù–ò–ö–ê:")
        for date, info in self.structure_index['tuesday_sections'].items():
            poll_id = info['poll_id'] or "–±–µ–∑ –æ–ø—Ä–æ—Å–∞"
            print(f"   ‚úÖ {date} (—Å—Ç—Ä–æ–∫–∞ {info['row']}, –æ–ø—Ä–æ—Å {poll_id})")
            if not info['poll_id']:
                issues.append(f"–°–µ–∫—Ü–∏—è –≤—Ç–æ—Ä–Ω–∏–∫–∞ {date} –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å –æ–ø—Ä–æ—Å–æ–º")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ü–∏–∏ –ø—è—Ç–Ω–∏—Ü—ã
        print(f"\nüèÄ –°–ï–ö–¶–ò–ò –ü–Ø–¢–ù–ò–¶–´:")
        for date, info in self.structure_index['friday_sections'].items():
            poll_id = info['poll_id'] or "–±–µ–∑ –æ–ø—Ä–æ—Å–∞"
            print(f"   ‚úÖ {date} (—Å—Ç—Ä–æ–∫–∞ {info['row']}, –æ–ø—Ä–æ—Å {poll_id})")
            if not info['poll_id']:
                issues.append(f"–°–µ–∫—Ü–∏—è –ø—è—Ç–Ω–∏—Ü—ã {date} –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å –æ–ø—Ä–æ—Å–æ–º")
        
        if not issues:
            print(f"\nüéâ –¶–ï–õ–û–°–¢–ù–û–°–¢–¨ –¢–ê–ë–õ–ò–¶–´: –û–¢–õ–ò–ß–ù–û!")
        else:
            print(f"\n‚ö†Ô∏è –¶–ï–õ–û–°–¢–ù–û–°–¢–¨ –¢–ê–ë–õ–ò–¶–´: {len(issues)} –ü–†–û–ë–õ–ï–ú!")
            for issue in issues:
                print(f"   ‚Ä¢ {issue}")
        
        return len(issues) == 0

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å—Ç—Ä–∞–∂–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
integrity_guard = TableIntegrityGuard(training_manager)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üèÄ –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –û–ü–†–û–°–ê–ú–ò –¢–†–ï–ù–ò–†–û–í–û–ö")
    print("=" * 60)
    
    moscow_tz = datetime.timezone(datetime.timedelta(hours=3))
    now = datetime.datetime.now(moscow_tz)
    print(f"üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (–ú–æ—Å–∫–≤–∞): {now.strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üìÖ –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'][now.weekday()]}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    bot_token = os.getenv("BOT_TOKEN")
    chat_id = os.getenv("CHAT_ID")
    google_credentials = os.getenv("GOOGLE_SHEETS_CREDENTIALS")
    spreadsheet_id = os.getenv("SPREADSHEET_ID")
    
    print("ÔøΩÔøΩ –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø:")
    print(f"BOT_TOKEN: {'‚úÖ' if bot_token else '‚ùå'}")
    print(f"CHAT_ID: {'‚úÖ' if chat_id else '‚ùå'}")
    print(f"SPREADSHEET_ID: {'‚úÖ' if spreadsheet_id else '‚ùå'}")
    print(f"GOOGLE_CREDENTIALS_FILE: {'‚úÖ' if os.path.exists('google_credentials.json') else '‚ùå'}")
    
    if not all([bot_token, chat_id, spreadsheet_id]):
        print("‚ùå –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return
    
    print(f"‚úÖ SPREADSHEET_ID: {spreadsheet_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    print("\nüîç –ü–†–û–í–ï–†–ö–ê –£–°–õ–û–í–ò–ô –í–´–ü–û–õ–ù–ï–ù–ò–Ø:")
    print(f"   –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ (–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 10:00): {'‚úÖ' if training_manager.should_create_weekly_poll() else '‚ùå'}")
    print(f"   –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—Ç–æ—Ä–Ω–∏–∫ (—Å—Ä–µ–¥–∞ 10:00): {'‚úÖ' if training_manager.should_collect_tuesday_data() else '‚ùå'}")
    print(f"   –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø—è—Ç–Ω–∏—Ü—É (—Å—É–±–±–æ—Ç–∞ 10:00): {'‚úÖ' if training_manager.should_collect_friday_data() else '‚ùå'}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å
    if training_manager.should_create_weekly_poll():
        print("\nüîÑ –°–æ–∑–¥–∞–Ω–∏–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞...")
        success = await training_manager.create_weekly_training_poll()
        if success:
            print("‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞")
    
    elif training_manager.should_collect_tuesday_data():
        print("\nüîÑ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—Ç–æ—Ä–Ω–∏–∫...")
        success = await training_manager.collect_poll_data("–í—Ç–æ—Ä–Ω–∏–∫")
        if success:
            print("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞ –≤—Ç–æ—Ä–Ω–∏–∫ —Å–æ–±—Ä–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—Ç–æ—Ä–Ω–∏–∫")
    
    elif training_manager.should_collect_friday_data():
        print("\nüîÑ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø—è—Ç–Ω–∏—Ü—É...")
        success = await training_manager.collect_poll_data("–ü—è—Ç–Ω–∏—Ü–∞")
        if success:
            print("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞ –ø—è—Ç–Ω–∏—Ü—É —Å–æ–±—Ä–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø—è—Ç–Ω–∏—Ü—É")
    
    else:
        print("\n‚è∞ –ù–µ –≤—Ä–µ–º—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π")
        print("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:")
        print("   üóìÔ∏è –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 10:00-23:59 - –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞")
        print("   üìä –°—Ä–µ–¥–∞ 10:00-23:59 - –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—Ç–æ—Ä–Ω–∏–∫")
        print("   üìä –°—É–±–±–æ—Ç–∞ 10:00-23:59 - –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø—è—Ç–Ω–∏—Ü—É")

if __name__ == "__main__":
    asyncio.run(main())
