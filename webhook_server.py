#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π webhook —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
"""

import asyncio
import os
import json
from datetime import datetime
from dotenv import load_dotenv
from telegram import Bot, Update
from telegram.ext import Application, MessageHandler, filters
from training_polls_enhanced import TrainingPollsManager

class WebhookServer:
    """Webhook —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
    
    def __init__(self):
        self.bot = None
        self.training_manager = None
        self.poll_data = {}  # –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"""
        load_dotenv()
        
        bot_token = os.getenv("BOT_TOKEN")
        if not bot_token:
            print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        self.bot = Bot(token=bot_token)
        self.training_manager = TrainingPollsManager()
        
        return True
    
    async def handle_poll_answer(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤ –≤ –æ–ø—Ä–æ—Å–∞—Ö"""
        
        poll_answer = update.poll_answer
        user = update.effective_user
        
        print(f"üìä –ü–æ–ª—É—á–µ–Ω –≥–æ–ª–æ—Å: {user.first_name} -> {poll_answer.option_ids}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ–ª–æ—Å
        poll_id = poll_answer.poll_id
        if poll_id not in self.poll_data:
            self.poll_data[poll_id] = {
                'votes': {},
                'last_updated': datetime.now()
            }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–æ–ª–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π)
        self.poll_data[poll_id]['votes'][user.id] = {
            'user_name': f"{user.first_name} {user.last_name or ''}".strip(),
            'username': user.username,
            'option_ids': list(poll_answer.option_ids),
            'timestamp': datetime.now().isoformat()
        }
        
        self.poll_data[poll_id]['last_updated'] = datetime.now()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        await self.save_poll_data()
        
        print(f"‚úÖ –ì–æ–ª–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –æ–ø—Ä–æ—Å–∞ {poll_id}")
    
    async def handle_poll(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–æ–≤"""
        
        poll = update.poll
        print(f"üìä –°–æ–∑–¥–∞–Ω –æ–ø—Ä–æ—Å: {poll.question}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø—Ä–æ—Å–µ
        poll_id = poll.id
        if poll_id not in self.poll_data:
            self.poll_data[poll_id] = {
                'question': poll.question,
                'options': [option.text for option in poll.options],
                'votes': {},
                'created_at': datetime.now().isoformat(),
                'last_updated': datetime.now()
            }
        
        await self.save_poll_data()
        print(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø—Ä–æ—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
    
    async def save_poll_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤ –≤ —Ñ–∞–π–ª"""
        try:
            with open('webhook_poll_data.json', 'w', encoding='utf-8') as f:
                json.dump(self.poll_data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    async def load_poll_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open('webhook_poll_data.json', 'r', encoding='utf-8') as f:
                self.poll_data = json.load(f)
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ {len(self.poll_data)} –æ–ø—Ä–æ—Å–æ–≤")
        except FileNotFoundError:
            self.poll_data = {}
            print("üìÑ –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            self.poll_data = {}
    
    async def get_poll_results(self, poll_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ä–æ—Å–∞"""
        
        if poll_id not in self.poll_data:
            return None
        
        poll_info = self.poll_data[poll_id]
        votes = poll_info['votes']
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–∞
        tuesday_voters = []
        friday_voters = []
        trainer_voters = []
        no_voters = []
        
        for user_id, vote_data in votes.items():
            user_name = vote_data['user_name']
            option_ids = vote_data['option_ids']
            
            if 0 in option_ids:  # –í—Ç–æ—Ä–Ω–∏–∫
                tuesday_voters.append(user_name)
            if 1 in option_ids:  # –ü—è—Ç–Ω–∏—Ü–∞
                friday_voters.append(user_name)
            if 2 in option_ids:  # –¢—Ä–µ–Ω–µ—Ä
                trainer_voters.append(user_name)
            if 3 in option_ids:  # –ù–µ—Ç
                no_voters.append(user_name)
        
        return {
            'poll_id': poll_id,
            'question': poll_info.get('question', ''),
            'tuesday_voters': tuesday_voters,
            'friday_voters': friday_voters,
            'trainer_voters': trainer_voters,
            'no_voters': no_voters,
            'total_votes': len(votes),
            'last_updated': poll_info['last_updated']
        }

async def setup_webhook_server():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook —Å–µ—Ä–≤–µ—Ä–∞"""
    
    print("üîß –ù–ê–°–¢–†–û–ô–ö–ê WEBHOOK –°–ï–†–í–ï–†–ê")
    print("=" * 50)
    
    server = WebhookServer()
    
    if not await server.initialize():
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    await server.load_poll_data()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(os.getenv("BOT_TOKEN")).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(MessageHandler(filters.POLL, server.handle_poll))
    application.add_handler(MessageHandler(filters.POLL_ANSWER, server.handle_poll_answer))
    
    print("‚úÖ Webhook —Å–µ—Ä–≤–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    print("üìã –î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
    print("   python webhook_server.py --port 8080")
    print("   –∏–ª–∏")
    print("   uvicorn webhook_server:app --host 0.0.0.0 --port 8080")

if __name__ == "__main__":
    asyncio.run(setup_webhook_server())
