#!/usr/bin/env python3
"""
–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –≤—Å–µ—Ö –≥–æ–ª–æ—Å–æ–≤ —á–µ—Ä–µ–∑ webhook
"""

import asyncio
import os
import json
from dotenv import load_dotenv
from telegram import Bot
from telegram.error import TelegramError

async def setup_webhook_solution():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
    bot_token = os.getenv("BOT_TOKEN")
    if not bot_token:
        print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    bot = Bot(token=bot_token)
    
    print("üîß –ù–ê–°–¢–†–û–ô–ö–ê WEBHOOK –†–ï–®–ï–ù–ò–Ø")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook
    webhook_info = await bot.get_webhook_info()
    print(f"üìä –¢–µ–∫—É—â–∏–π webhook URL: {webhook_info.url}")
    print(f"üìä –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {webhook_info.pending_update_count}")
    
    if webhook_info.pending_update_count > 0:
        print("‚ö†Ô∏è –ï—Å—Ç—å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!")
        print("üîÑ –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            updates = await bot.get_updates(limit=1000, timeout=30)
            print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {len(updates)}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            updates_data = []
            for update in updates:
                update_dict = {
                    'update_id': update.update_id,
                    'poll_answer': None,
                    'poll': None,
                    'message': None
                }
                
                if update.poll_answer:
                    update_dict['poll_answer'] = {
                        'poll_id': update.poll_answer.poll_id,
                        'user': {
                            'id': update.effective_user.id,
                            'first_name': update.effective_user.first_name,
                            'last_name': update.effective_user.last_name,
                            'username': update.effective_user.username
                        },
                        'option_ids': list(update.poll_answer.option_ids)
                    }
                
                if update.poll:
                    update_dict['poll'] = {
                        'id': update.poll.id,
                        'question': update.poll.question,
                        'options': [option.text for option in update.poll.options]
                    }
                
                updates_data.append(update_dict)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            with open('all_updates.json', 'w', encoding='utf-8') as f:
                json.dump(updates_data, f, ensure_ascii=False, indent=2)
            
            print("‚úÖ –í—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ all_updates.json")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–∞
            poll_answers = [u for u in updates_data if u['poll_answer']]
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤: {len(poll_answers)}")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –æ–ø—Ä–æ—Å–∞–º
            polls = {}
            for update in poll_answers:
                poll_id = update['poll_answer']['poll_id']
                if poll_id not in polls:
                    polls[poll_id] = []
                polls[poll_id].append(update['poll_answer'])
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ –æ–ø—Ä–æ—Å–æ–≤: {len(polls)}")
            
            for poll_id, votes in polls.items():
                print(f"\nüìä –û–ø—Ä–æ—Å {poll_id}:")
                print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤: {len(votes)}")
                for vote in votes:
                    user_name = f"{vote['user']['first_name']} {vote['user']['last_name'] or ''}".strip()
                    print(f"   - {user_name} -> {vote['option_ids']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–µ–≤–æ–π –æ–ø—Ä–æ—Å
            target_poll_id = "5326045405962572819"
            if target_poll_id in polls:
                target_votes = polls[target_poll_id]
                print(f"\nüéØ –¶–ï–õ–ï–í–û–ô –û–ü–†–û–° {target_poll_id}:")
                print(f"   –ù–∞–π–¥–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤: {len(target_votes)}")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–∞
                tuesday_voters = []
                friday_voters = []
                trainer_voters = []
                no_voters = []
                
                for vote in target_votes:
                    user_name = f"{vote['user']['first_name']} {vote['user']['last_name'] or ''}".strip()
                    option_ids = vote['option_ids']
                    
                    if 0 in option_ids:
                        tuesday_voters.append(user_name)
                    if 1 in option_ids:
                        friday_voters.append(user_name)
                    if 2 in option_ids:
                        trainer_voters.append(user_name)
                    if 3 in option_ids:
                        no_voters.append(user_name)
                
                print(f"   –í—Ç–æ—Ä–Ω–∏–∫: {len(tuesday_voters)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
                print(f"   –ü—è—Ç–Ω–∏—Ü–∞: {len(friday_voters)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
                print(f"   –¢—Ä–µ–Ω–µ—Ä: {len(trainer_voters)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
                print(f"   –ù–µ—Ç: {len(no_voters)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
                
                if tuesday_voters:
                    print(f"   –£—á–∞—Å—Ç–Ω–∏–∫–∏ –≤—Ç–æ—Ä–Ω–∏–∫–∞: {', '.join(tuesday_voters)}")
                if friday_voters:
                    print(f"   –£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—è—Ç–Ω–∏—Ü—ã: {', '.join(friday_voters)}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                results = {
                    'poll_id': target_poll_id,
                    'tuesday_voters': tuesday_voters,
                    'friday_voters': friday_voters,
                    'trainer_voters': trainer_voters,
                    'no_voters': no_voters,
                    'total_votes': len(target_votes)
                }
                
                with open('poll_results_complete.json', 'w', encoding='utf-8') as f:
                    json.dump(results, f, ensure_ascii=False, indent=2)
                
                print("‚úÖ –ü–æ–ª–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ poll_results_complete.json")
                
            else:
                print(f"‚ùå –¶–µ–ª–µ–≤–æ–π –æ–ø—Ä–æ—Å {target_poll_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
    else:
        print("‚úÖ –ù–µ—Ç –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")

if __name__ == "__main__":
    asyncio.run(setup_webhook_solution())
